{
  "services": [
    {
      "id": "gcloud",
      "metadata": {
        "name": "Gcloud",
        "description": "<h1>Google Cloud</h1>  <p>Gcloud is the official library for interacting with the Google Cloud Platform. Google Cloud Platform is a set of modular cloud-based services that allow you to create anything from simple websites to complex applications.</p>  <p>Gcloud&#39;s goal is to provide a API that is familiar and comfortable to Rubyists. Authentication is handled by providing project and credential information, or if you are running on Google Compute Engine this configuration is taken care of for you.</p>  <p>You can learn more about various options for connection on the <a href=\"AUTHENTICATION\">Authentication Guide</a>.</p>",
        "source": "lib/gcloud.rb#L33",
        "resources": [],
        "examples": []
      },
      "methods": [
        {
          "metadata": {
            "name": "new",
            "description": "<p>Creates a new object for connecting to Google Cloud.</p>",
            "source": "lib/gcloud.rb#L52",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\ndataset = gcloud.datastore\npubsub  = gcloud.pubsub\nstorage = gcloud.storage"
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Project identifier for the Pub/Sub service you are connecting to.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "datastore",
            "description": "<p>Creates a new object for connecting to the Datastore service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L98",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\ndataset = gcloud.datastore\n\nentity = dataset.entity \"Task\" do |t|\n  t[\"description\"] = \"Get started with Google Cloud\"\n  t[\"completed\"] = false\nend\n\ndataset.save entity"
              },
              {
                "caption": "You shouldn&#39;t need to override the default scope, but you can:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nplatform_scope = \"https://www.googleapis.com/auth/cloud-platform\"\ndataset = gcloud.datastore scope: platform_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Datastore::Dataset"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "storage",
            "description": "<p>Creates a new object for connecting to the Storage service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L136",
            "resources": [
              {
                "href": "https://cloud.google.com/storage/docs/authentication#oauth",
                "title": "Storage OAuth 2.0 Authentication"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nstorage = gcloud.storage\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\""
              },
              {
                "caption": "The default scope can be overridden with the <code>scope</code> option:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nreadonly_scope = \"https://www.googleapis.com/auth/devstorage.read_only\"\nreadonly_storage = gcloud.storage scope: readonly_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Storage::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "pubsub",
            "description": "<p>Creates a new object for connecting to the Pub/Sub service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L171",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""
              },
              {
                "caption": "The default scope can be overridden with the <code>scope</code> option:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nplatform_scope = \"https://www.googleapis.com/auth/cloud-platform\"\npubsub = gcloud.pubsub scope: platform_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Pubsub::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "bigquery",
            "description": "<p>Creates a new object for connecting to the BigQuery service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L209",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my-dataset\"\ntable = dataset.table \"my-table\"\ntable.data.each do |row|\n  puts row\nend"
              },
              {
                "caption": "The default scope can be overridden with the <code>scope</code> option:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nplatform_scope = \"https://www.googleapis.com/auth/cloud-platform\"\nbigquery = gcloud.bigquery scope: platform_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Bigquery::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "dns",
            "description": "<p>Creates a new object for connecting to the DNS service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L246",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-zone\"\nzone.records.each do |record|\n  puts record.name\nend"
              },
              {
                "caption": "The default scope can be overridden with the <code>scope</code> option:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nreadonly_scope = \"https://www.googleapis.com/auth/ndev.clouddns.readonly\"\ndns = gcloud.dns scope: readonly_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Dns::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "resource_manager",
            "description": "<p>Creates a new object for connecting to the Resource Manager service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L286",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.projects.each do |project|\n  puts projects.project_id\nend"
              },
              {
                "caption": "The default scope can be overridden with the <code>scope</code> option:",
                "code": "require \"gcloud\"\n\ngcloud  = Gcloud.new\nreadonly_scope = \"https://www.googleapis.com/auth/cloudresourcemanager.readonly\"\nresource_manager = gcloud.resource_manager scope: readonly_scope"
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::ResourceManager::Manager"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "search",
            "description": "<p>Creates a new object for connecting to the Search service. Each call creates a new connection.</p>",
            "source": "lib/gcloud.rb#L312",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\""
              }
            ]
          },
          "params": [
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Search::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "dns",
            "description": "<p>Creates a new <code>Project</code> instance connected to the DNS service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/dns.rb#L47",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ndns = Gcloud.dns \"my-dns-project\",\n                 \"/path/to/keyfile.json\"\n\nzone = dns.zone \"example-com\""
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Identifier for a DNS project. If not present, the default project for the credentials is used.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Dns::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "search",
            "description": "<p>Creates a new <code>Project</code> instance connected to the Search service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/search.rb#L40",
            "resources": [],
            "examples": []
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Identifier for a Search project. If not present, the default project for the credentials is used.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Search::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "pubsub",
            "description": "<p>Creates a new object for connecting to the Pub/Sub service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/pubsub.rb#L47",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud/pubsub\"\n\npubsub = Gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Project identifier for the Pub/Sub service you are connecting to.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Pubsub::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "storage",
            "description": "<p>Creates a new object for connecting to the Storage service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/storage.rb#L48",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud/storage\"\n\nstorage = Gcloud.storage \"my-todo-project\",\n                         \"/path/to/keyfile.json\"\n\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\""
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Project identifier for the Storage service you are connecting to.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Storage::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "bigquery",
            "description": "<p>Creates a new <code>Project</code> instance connected to the BigQuery service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/bigquery.rb#L46",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud/bigquery\"\n\nbigquery = Gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\""
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Identifier for a BigQuery project. If not present, the default project for the credentials is used.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Bigquery::Project"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "datastore",
            "description": "<p>Creates a new object for connecting to the Datastore service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/datastore.rb#L56",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud/datastore\"\n\ndataset = Gcloud.datastore \"my-todo-project\",\n                           \"/path/to/keyfile.json\"\n\nentity = dataset.entity \"Task\" do |t|\n  t[\"description\"] = \"Get started with Google Cloud\"\n  t[\"completed\"] = false\nend\n\ndataset.save entity"
              }
            ]
          },
          "params": [
            {
              "name": "project",
              "types": ["String"],
              "description": "Dataset identifier for the Datastore you are connecting to.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::Datastore::Dataset"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "resource_manager",
            "description": "<p>Creates a new <code>Project</code> instance connected to the Resource Manager service. Each call creates a new connection.</p>",
            "source": "lib/gcloud/resource_manager.rb#L45",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud/resource_manager\"\n\nresource_manager = Gcloud.resource_manager\nresource_manager.projects.each do |project|\n  puts projects.project_id\nend"
              }
            ]
          },
          "params": [
            {
              "name": "keyfile",
              "types": [
                "String",
                "Hash"
              ],
              "description": "Keyfile downloaded from Google Cloud. If file path the file must be readable.",
              "optional": true,
              "default": "nil",
              "nullable": true
            },
            {
              "name": "scope",
              "types": [
                "String",
                "Array<String>"
              ],
              "description": null,
              "optional": true,
              "default": "nil",
              "nullable": true
            }
          ],
          "exceptions": [],
          "returns": [
            {
              "types": ["Gcloud::ResourceManager::Manager"],
              "description": null
            }
          ]
        }
      ],
      "pages": [
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<p>Base Gcloud exception class.</p>",
            "source": "lib/gcloud/errors.rb#L19",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "backoff",
          "metadata": {
            "name": "Backoff",
            "description": "<p>Backoff allows users to control how Google API calls are retried. If an API call fails the response will be checked to see if the call can be retried. If the response matches the criteria, then it will be retried with an incremental backoff. This means that an increasing delay will be added between each retried call. The first retry will be delayed one second, the second retry will be delayed two seconds, and so on.</p>  <p>require &quot;gcloud/backoff&quot;</p>  <p>Gcloud::Backoff.retries = 5 # Set a maximum of five retries per call</p>",
            "source": "lib/gcloud/backoff.rb#L29",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "retries",
                "description": "<p>The number of times a retriable API call should be retried.</p>  <p>The default value is 3.</p>",
                "source": "lib/gcloud/backoff.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "retries=",
                "description": "<p>The number of times a retriable API call should be retried.</p>  <p>The default value is 3.</p>",
                "source": "lib/gcloud/backoff.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http_codes",
                "description": "<p>The HTTP Status Codes that should be retried.</p>  <p>The default values are 500 and 503.</p>",
                "source": "lib/gcloud/backoff.rb#L41",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http_codes=",
                "description": "<p>The HTTP Status Codes that should be retried.</p>  <p>The default values are 500 and 503.</p>",
                "source": "lib/gcloud/backoff.rb#L41",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reasons",
                "description": "<p>The Google API error reasons that should be retried.</p>  <p>The default values are rateLimitExceeded and userRateLimitExceeded.</p>",
                "source": "lib/gcloud/backoff.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reasons=",
                "description": "<p>The Google API error reasons that should be retried.</p>  <p>The default values are rateLimitExceeded and userRateLimitExceeded.</p>",
                "source": "lib/gcloud/backoff.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "backoff",
                "description": "<p>The code to run when a backoff is handled. This must be a Proc and must take the number of retries as an argument.</p>  <p>Note: This method is undocumented and may change.</p>",
                "source": "lib/gcloud/backoff.rb#L56",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "backoff=",
                "description": "<p>The code to run when a backoff is handled. This must be a Proc and must take the number of retries as an argument.</p>  <p>Note: This method is undocumented and may change.</p>",
                "source": "lib/gcloud/backoff.rb#L56",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "<p>Represents the OAuth 2.0 signing logic. This class is intended to be inherited by API-specific classes which overrides the SCOPE constant.</p>",
            "source": "lib/gcloud/credentials.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "client",
                "description": "<p>Returns the value of attribute client</p>",
                "source": "lib/gcloud/credentials.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "client=",
                "description": "<p>Sets the attribute client</p>",
                "source": "lib/gcloud/credentials.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute client to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "",
                "source": "lib/gcloud/credentials.rb#L44",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Credentials"],
                  "description": "a new instance of Credentials"
                }
              ]
            },
            {
              "metadata": {
                "name": "default",
                "description": "<p>Returns the default credentials.</p>",
                "source": "lib/gcloud/credentials.rb#L67",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "verify_keyfile_provided!",
                "description": "<p>Verify that the keyfile argument is provided.</p>",
                "source": "lib/gcloud/credentials.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "verify_keyfile_exists!",
                "description": "<p>Verify that the keyfile argument is a file.</p>",
                "source": "lib/gcloud/credentials.rb#L102",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "init_client",
                "description": "<p>Initializes the Signet client.</p>",
                "source": "lib/gcloud/credentials.rb#L109",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "stringify_hash_keys",
                "description": "<p>returns a new Hash with string keys instead of symbol keys.</p>",
                "source": "lib/gcloud/credentials.rb#L116",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "client_options",
                "description": "",
                "source": "lib/gcloud/credentials.rb#L120",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        }
      ]
    },
    {
      "id": "gce",
      "metadata": {
        "name": "GCE",
        "description": "<p>Represents the Google Compute Engine environment.</p>",
        "source": "lib/gcloud/gce.rb#L22",
        "resources": [],
        "examples": []
      },
      "methods": [
        {
          "metadata": {
            "name": "gce?",
            "description": "",
            "source": "lib/gcloud/gce.rb#L26",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": [
            {
              "types": ["Boolean"],
              "description": null
            }
          ]
        },
        {
          "metadata": {
            "name": "project_id",
            "description": "",
            "source": "lib/gcloud/gce.rb#L38",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        }
      ],
      "pages": []
    },
    {
      "id": "dns",
      "metadata": {
        "name": "Dns",
        "description": "<h1>Google Cloud DNS</h1>  <p>Google Cloud DNS is a high-performance, resilient, global DNS service that provides a cost-effective way to make your applications and services available to your users. This programmable, authoritative DNS service can be used to easily publish and manage DNS records using the same infrastructure relied upon by Google. To learn more, read <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">What is Google Cloud DNS?</a>.</p>  <p>Gcloud&#39;s goal is to provide an API that is familiar and comfortable to Rubyists. Authentication is handled by Gcloud#dns. You can provide the project and credential information to connect to the Cloud DNS service, or if you are running on Google Compute Engine this configuration is taken care of for you. You can read more about the options for connecting in the <a href=\"../AUTHENTICATION\">Authentication Guide</a>.</p>  <h2>Creating Zones</h2>  <p>To get started with Google Cloud DNS, use your DNS Project to create a new Zone. The second argument to Project#create_zone must be a unique domain name for which you can <a href=\"https://www.google.com/webmasters/verification/home\">verify ownership</a>. Substitute a domain name of your own (ending with a dot to signify that it is <a href=\"https://en.wikipedia.org/wiki/Fully_qualified_domain_name\">fully qualified</a>) as you follow along with these examples.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.create_zone &quot;example-com&quot;, &quot;example.com.&quot; puts zone.id # unique identifier defined by the server ```</p>  <p>For more information, see <a href=\"https://cloud.google.com/dns/zones/\">Managing Zones</a>.</p>  <h2>Listing Zones</h2>  <p>You can retrieve all the zones in your project.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zones = dns.zones zones.each do |zone|   puts &quot;#{zone.name} - #{zone.dns}&quot; end ```</p>  <p>You can also retrieve a single zone by either name or id.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; ```</p>  <h2>Listing Records</h2>  <p>When you create a zone, the Cloud DNS service automatically creates two Record instances for it, providing configuration for Cloud DNS nameservers. Let&#39;s take a look at these records.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; records = zone.records records.count #=&gt; 2 records.map &amp;:type #=&gt; [&quot;NS&quot;, &quot;SOA&quot;] zone.records.first.data.count #=&gt; 4 zone.records.first.data #=&gt; [&quot;ns-cloud-d1.googledomains.com.&quot;, ...] ```</p>  <p>Note that Record#data returns an array. The Cloud DNS service only allows the zone to have one Record instance for each name and type combination. It supports multiple &quot;resource records&quot; (in this case, the four nameserver addresses) via this <code>data</code> collection.</p>  <h2>Managing Records</h2>  <p>You can easily add your own records to the zone. Each call to Zone#add results in a new Cloud DNS Change instance.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.add &quot;www&quot;, &quot;A&quot;, 86400, [&quot;1.2.3.4&quot;] change.additions.map &amp;:type #=&gt; [&quot;A&quot;, &quot;SOA&quot;] change.deletions.map &amp;:type #=&gt; [&quot;SOA&quot;] ```</p>  <p>Whenever you change the set of records belonging to a zone, the zone&#39;s start of authority (SOA) record should be updated with a higher serial number. The gcloud library automates this update for you, deleting the old SOA record and adding an updated one, as shown in the example above. You can disable or modify this behavior, of course. See Zone#update for details.</p>  <p>You can retrieve records by name and type. The name argument can be a subdomain (e.g., <code>www</code>) fragment for convenience, but notice that the retrieved record&#39;s domain name is always fully-qualified.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; records = zone.records &quot;www&quot;, &quot;A&quot; records.first.name #=&gt; &quot;www.example.com.&quot; ```</p>  <p>You can use Zone#replace to update the <code>ttl</code> and <code>data</code> for a record.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.replace &quot;www&quot;, &quot;A&quot;, 86400, [&quot;5.6.7.8&quot;] ```</p>  <p>Or, you can use Zone#modify to update just the <code>ttl</code> or <code>data</code>, without the risk of inadvertently changing values that you wish to leave unchanged.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.modify &quot;www&quot;, &quot;A&quot; do |r|   r.ttl = 3600 # change only the TTL end ```</p>  <p>You can also delete records by name and type.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.remove &quot;www&quot;, &quot;A&quot; record = change.deletions.first ```</p>  <p>The best way to add, remove, and update multiple records in a single <a href=\"https://cloud.google.com/dns/records\">transaction</a> is to call Zone#update with a block. See Zone::Transaction.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.update do |tx|   tx.add     &quot;www&quot;, &quot;A&quot;,  86400, &quot;1.2.3.4&quot;   tx.remove  &quot;example.com.&quot;, &quot;TXT&quot;   tx.replace &quot;example.com.&quot;, &quot;MX&quot;, 86400, [&quot;10 mail1.example.com.&quot;,                                            &quot;20 mail2.example.com.&quot;]   tx.modify &quot;www.example.com.&quot;, &quot;CNAME&quot; do |r|     r.ttl = 86400 # only change the TTL   end end ```</p>  <p>Finally, you can add and delete records by reference, using Zone#update.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; to<em>add = zone.record &quot;www&quot;, &quot;AAAA&quot;, 86400, [&quot;2607:f8b0:400a:801::1005&quot;] to</em>delete = zone.records &quot;www&quot;, &quot;A&quot; change = zone.update to<em>add, to</em>delete ```</p>  <h2>Listing Changes</h2>  <p>Because the transactions you execute against your zone do not always complete immediately, you can retrieve and inspect changes.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; changes = zone.changes changes.each do |change|   puts &quot;#{change.id} - #{change.started_at} - #{change.status}&quot; end ```</p>  <h2>Importing and exporting zone files</h2>  <p>You can import from a zone file. Because the Cloud DNS service only allows the zone to have one Record instance for each name and type combination, lines may be merged as needed into records with multiple <code>data</code> values.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot; change = zone.import &quot;path/to/db.example.com&quot; ```</p>  <p>You can also export to a zone file.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dns = gcloud.dns zone = dns.zone &quot;example-com&quot;</p>  <p>zone.export &quot;path/to/db.example.com&quot; ```</p>",
        "source": "lib/gcloud/dns.rb#L296",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "zone",
          "metadata": {
            "name": "Zone",
            "description": "<h1>DNS Zone</h1>  <p>The managed zone is the container for DNS records for the same DNS name suffix and has a set of name servers that accept and responds to queries. A project can have multiple managed zones, but they must each have a unique name.</p>",
            "source": "lib/gcloud/dns/zone.rb#L45",
            "resources": [
              {
                "href": "https://cloud.google.com/dns/zones/",
                "title": "Managing Zones"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.records.each do |record|\n  puts record.name\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "id",
                "description": "<p>Unique identifier for the resource; defined by the server.</p>",
                "source": "lib/gcloud/dns/zone.rb#L64",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>User assigned name for this resource. Must be unique within the project. The name must be 1-32 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.</p>",
                "source": "lib/gcloud/dns/zone.rb#L74",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "dns",
                "description": "<p>The DNS name of this managed zone, for instance &quot;example.com.&quot;.</p>",
                "source": "lib/gcloud/dns/zone.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description",
                "description": "<p>A string of at most 1024 characters associated with this resource for the user&#39;s convenience. Has no effect on the managed zone&#39;s function.</p>",
                "source": "lib/gcloud/dns/zone.rb#L89",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name_servers",
                "description": "<p>Delegate your managed_zone to these virtual name servers; defined by the server.</p>",
                "source": "lib/gcloud/dns/zone.rb#L97",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name_server_set",
                "description": "<p>Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users will leave this field unset.</p>",
                "source": "lib/gcloud/dns/zone.rb#L106",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time that this resource was created on the server.</p>",
                "source": "lib/gcloud/dns/zone.rb#L113",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the zone.</p>",
                "source": "lib/gcloud/dns/zone.rb#L144",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.delete"
                  },
                  {
                    "caption": "The zone can be forcefully deleted with the <code>force</code> option:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.delete force: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, ensures the deletion of the zone by first deleting all records. If <code>false</code> and the zone contains non-essential records, the request will fail. Default is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the zone was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "clear!",
                "description": "<p>Removes non-essential records from the zone. Only NS and SOA records will be kept.</p>",
                "source": "lib/gcloud/dns/zone.rb#L168",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.clear!"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "change",
                "description": "<p>Retrieves an existing change by id.</p>",
                "source": "lib/gcloud/dns/zone.rb#L193",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.change \"2\"\nif change\n  puts \"#{change.id} - #{change.started_at} - #{change.status}\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "change_id",
                  "types": ["String"],
                  "description": "The id of a change.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Dns::Change",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the change does not exist."
                }
              ]
            },
            {
              "metadata": {
                "name": "changes",
                "description": "<p>Retrieves the list of changes belonging to the zone.</p>",
                "source": "lib/gcloud/dns/zone.rb#L253",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchanges = zone.changes\nchanges.each do |change|\n  puts \"#{change.id} - #{change.started_at} - #{change.status}\"\nend"
                  },
                  {
                    "caption": "The changes can be sorted by change sequence:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchanges = zone.changes order: :desc"
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::Dns::Change::List})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchanges = zone.changes\nloop do\n  changes.each do |change|\n    puts \"#{change.name} - #{change.status}\"\n  end\n  break unless changes.next?\n  changes = changes.next\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of changes to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "order",
                  "types": [
                    "Symbol",
                    "String"
                  ],
                  "description": "Sort the changes by change sequence.</p>  <p>Acceptable values are: * <code>asc</code> - Sort by ascending change sequence * <code>desc</code> - Sort by descending change sequence",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Dns::Change>"],
                  "description": "(See {Gcloud::Dns::Change::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "records",
                "description": "<p>Retrieves the list of records belonging to the zone. Records can be filtered by name and type. The name argument can be a subdomain (e.g., <code>www</code>) fragment for convenience, but notice that the retrieved record&#39;s domain name is always fully-qualified.</p>",
                "source": "lib/gcloud/dns/zone.rb#L329",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records\nrecords.each do |record|\n  puts record.name\nend"
                  },
                  {
                    "caption": "Records can be filtered by name and type:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records \"www\", \"A\"\nrecords.first.name #=> \"www.example.com.\""
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::Dns::Record::List})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records \"example.com.\"\nloop do\n  records.each do |record|\n    puts record.name\n  end\n  break unless records.next?\n  records = records.next\nend"
                  },
                  {
                    "caption": "Retrieve all pages: (See {Gcloud::Dns::Record::List#all})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecords = zone.records.all"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "Return only records with this domain or subdomain name.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "Return only records with this <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">record type</a>. If present, the <code>name</code> parameter must also be present.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of records to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Dns::Record>"],
                  "description": "(See {Gcloud::Dns::Record::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "record",
                "description": "<p>Creates a new, unsaved Record that can be added to a Zone.</p>",
                "source": "lib/gcloud/dns/zone.rb#L357",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nrecord = zone.record \"example.com.\", \"A\", 86400, [\"1.2.3.4\"]\nzone.add record"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Record"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "export",
                "description": "<p>Exports the zone to a local <a href=\"https://en.wikipedia.org/wiki/Zone_file\">DNS zone file</a>.</p>",
                "source": "lib/gcloud/dns/zone.rb#L380",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\n\nzone.export \"path/to/db.example.com\""
                  }
                ]
              },
              "params": [
                {
                  "name": "path",
                  "types": ["String"],
                  "description": "The path on the local file system to write the data to.The path provided must be writable.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["File"],
                  "description": "An object on the local file system."
                }
              ]
            },
            {
              "metadata": {
                "name": "import",
                "description": "<p>Imports resource records from a <a href=\"https://en.wikipedia.org/wiki/Zone_file\">DNS zone file</a>, adding the new records to the zone, without removing any existing records from the zone.</p>  <p>Because the Google Cloud DNS API only accepts a single resource record for each <code>name</code> and <code>type</code> combination (with multiple <code>data</code> elements), the zone file&#39;s records are merged as necessary. During this merge, the lowest <code>ttl</code> of the merged records is used. If none of the merged records have a <code>ttl</code> value, the zone file&#39;s global TTL is used for the record.</p>  <p>The zone file&#39;s SOA and NS records are not imported, because the zone was given SOA and NS records when it was created. These generated records point to Cloud DNS name servers.</p>  <p>This operation automatically updates the SOA record serial number unless prevented with the <code>skip_soa</code> option. See {#update} for details.</p>  <p>The Google Cloud DNS service requires that record names and data use fully-qualified addresses. The @ symbol is not accepted, nor are unqualified subdomain addresses like www. If your zone file contains such values, you may need to pre-process it in order for the import operation to succeed.</p>",
                "source": "lib/gcloud/dns/zone.rb#L434",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.import \"path/to/db.example.com\""
                  }
                ]
              },
              "params": [
                {
                  "name": "path_or_io",
                  "types": [
                    "String",
                    "IO"
                  ],
                  "description": "The path to a zone file on the filesystem, or an IO instance from which zone file data can be read.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "only",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "Include only records of this type or types.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "except",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "Exclude records of this type or types.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": "A new change adding the imported Record instances."
                }
              ]
            },
            {
              "metadata": {
                "name": "update",
                "description": "<p>Adds and removes Records from the zone. All changes are made in a single API request.</p>  <p>The best way to add, remove, and update multiple records in a single <a href=\"https://cloud.google.com/dns/records\">transaction</a> is with a block. See {Zone::Transaction}.</p>  <p>If the SOA record for the zone is not present in <code>additions</code> or <code>deletions</code> (and if present in one, it should be present in the other), it will be added to both, and its serial number will be incremented by adding <code>1</code>. This update to the SOA record can be prevented with the <code>skip_soa</code> option. To provide your own value or behavior for the new serial number, use the <code>soa_serial</code> option.</p>",
                "source": "lib/gcloud/dns/zone.rb#L506",
                "resources": [],
                "examples": [
                  {
                    "caption": "Using a block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.update do |tx|\n  tx.add     \"example.com.\", \"A\",  86400, \"1.2.3.4\"\n  tx.remove  \"example.com.\", \"TXT\"\n  tx.replace \"example.com.\", \"MX\", 86400, [\"10 mail1.example.com.\",\n                                           \"20 mail2.example.com.\"]\n  tx.modify \"www.example.com.\", \"CNAME\" do |cname|\n    cname.ttl = 86400 # only change the TTL\n  end\nend"
                  },
                  {
                    "caption": "Or you can provide the record objects to add and remove:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nnew_record = zone.record \"example.com.\", \"A\", 86400, [\"1.2.3.4\"]\nold_record = zone.record \"example.com.\", \"A\", 18600, [\"1.2.3.4\"]\nchange = zone.update [new_record], [old_record]"
                  },
                  {
                    "caption": "Using a lambda or Proc to update the current SOA serial number:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nnew_record = zone.record \"example.com.\", \"A\", 86400, [\"1.2.3.4\"]\nchange = zone.update new_record, soa_serial: lambda { |sn| sn + 10 }"
                  }
                ]
              },
              "params": [
                {
                  "name": "additions",
                  "types": [
                    "Record",
                    "Array<Record>"
                  ],
                  "description": "The Record or array of records to add.",
                  "optional": true,
                  "default": "[]",
                  "nullable": false
                },
                {
                  "name": "deletions",
                  "types": [
                    "Record",
                    "Array<Record>"
                  ],
                  "description": "The Record or array of records to remove.",
                  "optional": true,
                  "default": "[]",
                  "nullable": false
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "add",
                "description": "<p>Adds a record to the Zone. In order to update existing records, or add and delete records in the same transaction, use #update.</p>  <p>This operation automatically updates the SOA record serial number unless prevented with the <code>skip_soa</code> option. See {#update} for details.</p>",
                "source": "lib/gcloud/dns/zone.rb#L573",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.add \"example.com.\", \"A\", 86400, [\"1.2.3.4\"]"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The owner of the record. For example: <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">supported record type</a>. For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "ttl",
                  "types": ["Integer"],
                  "description": "The number of seconds that the record can be cached by resolvers.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "data",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The resource record data, as determined by <code>type</code> and defined in <a href=\"http://tools.ietf.org/html/rfc1035#section-5\">RFC 1035 (section 5)</a> and <a href=\"http://tools.ietf.org/html/rfc1034#section-3.6.1\">RFC 1034 (section 3.6.1)</a>. For example: <code>192.0.2.1</code> or <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer+",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "remove",
                "description": "<p>Removes records from the Zone. The records are looked up before they are removed. In order to update existing records, or add and remove records in the same transaction, use #update.</p>  <p>This operation automatically updates the SOA record serial number unless prevented with the <code>skip_soa</code> option. See {#update} for details.</p>",
                "source": "lib/gcloud/dns/zone.rb#L607",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.remove \"example.com.\", \"A\""
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The owner of the record. For example: <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">supported record type</a>. For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer+",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "replace",
                "description": "<p>Replaces existing records on the Zone. Records matching the <code>name</code> and <code>type</code> are replaced. In order to update existing records, or add and delete records in the same transaction, use #update.</p>  <p>This operation automatically updates the SOA record serial number unless prevented with the <code>skip_soa</code> option. See {#update} for details.</p>",
                "source": "lib/gcloud/dns/zone.rb#L649",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.replace \"example.com.\", \"A\", 86400, [\"5.6.7.8\"]"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The owner of the record. For example: <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">supported record type</a>. For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "ttl",
                  "types": ["Integer"],
                  "description": "The number of seconds that the record can be cached by resolvers.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "data",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The resource record data, as determined by <code>type</code> and defined in <a href=\"http://tools.ietf.org/html/rfc1035#section-5\">RFC 1035 (section 5)</a> and <a href=\"http://tools.ietf.org/html/rfc1034#section-3.6.1\">RFC 1034 (section 3.6.1)</a>. For example: <code>192.0.2.1</code> or <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer+",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "modify",
                "description": "<p>Modifies records on the Zone. Records matching the <code>name</code> and <code>type</code> are yielded to the block where they can be modified.</p>  <p>This operation automatically updates the SOA record serial number unless prevented with the <code>skip_soa</code> option. See {#update} for details.</p>",
                "source": "lib/gcloud/dns/zone.rb#L690",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.modify \"example.com.\", \"MX\" do |mx|\n  mx.ttl = 3600 # change only the TTL\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The owner of the record. For example: <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">supported record type</a>. For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_soa",
                  "types": ["Boolean"],
                  "description": "Do not automatically update the SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "soa_serial",
                  "types": [
                    "Integer+",
                    "lambda",
                    "Proc"
                  ],
                  "description": "A value (or a lambda or Proc returning a value) for the new SOA record serial number. See {#update} for details.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Change"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "fqdn",
                "description": "<p>This helper converts the given domain name or subdomain (e.g., <code>www</code>) fragment to a <a href=\"https://en.wikipedia.org/wiki/Fully_qualified_domain_name\">fully qualified domain name (FQDN)</a> for the zone&#39;s #dns. If the argument is already a FQDN, it is returned unchanged.</p>",
                "source": "lib/gcloud/dns/zone.rb#L719",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.fqdn \"www\" #=> \"www.example.com.\"\nzone.fqdn \"@\" #=> \"example.com.\"\nzone.fqdn \"mail.example.com.\" #=> \"mail.example.com.\""
                  }
                ]
              },
              "params": [
                {
                  "name": "domain_name",
                  "types": ["String"],
                  "description": "The name to convert to a fully qualified domain name.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": "A fully qualified domain name."
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/dns/zone.rb#L736",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_change",
                "description": "",
                "source": "lib/gcloud/dns/zone.rb#L740",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "increment_soa",
                "description": "",
                "source": "lib/gcloud/dns/zone.rb#L752",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "detect_soa",
                "description": "",
                "source": "lib/gcloud/dns/zone.rb#L761",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "replace_soa_serial",
                "description": "",
                "source": "lib/gcloud/dns/zone.rb#L765",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "adjust_change_sort_order",
                "description": "",
                "source": "lib/gcloud/dns/zone.rb#L778",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "record",
          "metadata": {
            "name": "Record",
            "description": "<h1>DNS Record</h1>  <p>Represents a set of DNS resource records (RRs) for a given {#name} and {#type} in a {Zone}. Since it is a value object, a newly created Record instance is transient until it is added to a Zone with {Zone#update}. Note that {Zone#add} and the {Zone#update} block parameter can be used instead of {Zone#record} or <code>Record.new</code> to create new records.</p>",
            "source": "lib/gcloud/dns/record.rb#L42",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\n\nzone.records.count #=> 2\nrecord = zone.record \"example.com.\", \"A\", 86400, \"1.2.3.4\"\nzone.records.count #=> 2\nchange = zone.update record\nzone.records.count #=> 3"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "name",
                "description": "<p>The owner of the record. For example: <code>example.com.</code>.</p>",
                "source": "lib/gcloud/dns/record.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "name=",
                "description": "<p>The owner of the record. For example: <code>example.com.</code>.</p>",
                "source": "lib/gcloud/dns/record.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "type",
                "description": "<p>The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns#supported_record_types\">supported record type </a> . For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.</p>",
                "source": "lib/gcloud/dns/record.rb#L57",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "type=",
                "description": "<p>The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns#supported_record_types\">supported record type </a> . For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.</p>",
                "source": "lib/gcloud/dns/record.rb#L57",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "ttl",
                "description": "<p>The number of seconds that the record can be cached by resolvers.</p>",
                "source": "lib/gcloud/dns/record.rb#L64",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Integer"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "ttl=",
                "description": "<p>The number of seconds that the record can be cached by resolvers.</p>",
                "source": "lib/gcloud/dns/record.rb#L64",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Integer"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "data",
                "description": "<p>The array of resource record data, as determined by <code>type</code> and defined in <a href=\"http://tools.ietf.org/html/rfc1035#section-5\">RFC 1035 (section 5)</a> and <a href=\"http://tools.ietf.org/html/rfc1034#section-3.6.1\">RFC 1034 (section 3.6.1)</a>. For example: [&quot;10 mail.example.com.&quot;, &quot;20 mail2.example.com.&quot;].</p>",
                "source": "lib/gcloud/dns/record.rb#L75",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<String>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "data=",
                "description": "<p>The array of resource record data, as determined by <code>type</code> and defined in <a href=\"http://tools.ietf.org/html/rfc1035#section-5\">RFC 1035 (section 5)</a> and <a href=\"http://tools.ietf.org/html/rfc1034#section-3.6.1\">RFC 1034 (section 3.6.1)</a>. For example: [&quot;10 mail.example.com.&quot;, &quot;20 mail2.example.com.&quot;].</p>",
                "source": "lib/gcloud/dns/record.rb#L75",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<String>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a Record value object.</p>",
                "source": "lib/gcloud/dns/record.rb#L94",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The owner of the record. For example: <code>example.com.</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["String"],
                  "description": "The identifier of a <a href=\"https://cloud.google.com/dns/what-is-cloud-dns\">supported record type</a>. For example: <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, <code>MX</code>, or <code>TXT</code>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "ttl",
                  "types": ["Integer"],
                  "description": "The number of seconds that the record can be cached by resolvers.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "data",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The resource record data, as determined by <code>type</code> and defined in <a href=\"http://tools.ietf.org/html/rfc1035#section-5\">RFC 1035 (section 5)</a> and <a href=\"http://tools.ietf.org/html/rfc1034#section-3.6.1\">RFC 1034 (section 3.6.1)</a>. For example: [&quot;10 mail.example.com.&quot;, &quot;20 mail2.example.com.&quot;].",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Record"],
                  "description": "a new instance of Record"
                }
              ]
            },
            {
              "metadata": {
                "name": "dup",
                "description": "<p>Returns a deep copy of the record. Useful for updating records, since the original, unmodified record must be passed for deletion when using {Zone#update}.</p>",
                "source": "lib/gcloud/dns/record.rb#L119",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "change",
          "metadata": {
            "name": "Change",
            "description": "<h1>DNS Change</h1>  <p>Represents a request containing additions or deletions or records. Additions and deletions can be done in bulk, in a single atomic transaction, and take effect at the same time in each authoritative DNS server.</p>",
            "source": "lib/gcloud/dns/change.rb#L40",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.changes.each do |change|\n  puts \"Change includes #{change.additions.count} additions \" \\\n       \"and #{change.additions.count} deletions.\"\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "id",
                "description": "<p>Unique identifier for the resource; defined by the server.</p>",
                "source": "lib/gcloud/dns/change.rb#L59",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "additions",
                "description": "<p>The records added in this change request.</p>",
                "source": "lib/gcloud/dns/change.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "deletions",
                "description": "<p>The records removed in this change request.</p>",
                "source": "lib/gcloud/dns/change.rb#L73",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "status",
                "description": "<p>Status of the operation. Values are <code>&quot;done&quot;</code> and <code>&quot;pending&quot;</code>.</p>",
                "source": "lib/gcloud/dns/change.rb#L80",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "done?",
                "description": "<p>Checks if the status is <code>&quot;done&quot;</code>.</p>",
                "source": "lib/gcloud/dns/change.rb#L86",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "pending?",
                "description": "<p>Checks if the status is <code>&quot;pending&quot;</code>.</p>",
                "source": "lib/gcloud/dns/change.rb#L93",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "started_at",
                "description": "<p>The time that this operation was started by the server.</p>",
                "source": "lib/gcloud/dns/change.rb#L101",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the change with updated status from the DNS service.</p>",
                "source": "lib/gcloud/dns/change.rb#L109",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "wait_until_done!",
                "description": "<p>Refreshes the change until the status is <code>done</code>. The delay between refreshes will incrementally increase.</p>",
                "source": "lib/gcloud/dns/change.rb#L135",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nchange = zone.change 1234567890\nchange.done? #=> false\nchange.wait_until_done!\nchange.done? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/dns/change.rb#L158",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<p>Base DNS exception class.</p>",
            "source": "lib/gcloud/dns/errors.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/dns/errors.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/dns/errors.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/dns/errors.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>The project is a top level container for resources including Cloud DNS ManagedZones. Projects can be created only in the <a href=\"https://console.developers.google.com\">Google Developers Console</a>.</p>  <p>See {Gcloud#dns}</p>",
            "source": "lib/gcloud/dns/project.rb#L42",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nzone.records.each do |record|\n  puts record.name\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>The unique ID string for the current project.</p>",
                "source": "lib/gcloud/dns/project.rb#L73",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\", \"/path/to/keyfile.json\"\ndns = gcloud.dns\n\ndns.project #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "number",
                "description": "<p>The project number.</p>",
                "source": "lib/gcloud/dns/project.rb#L80",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "zones_quota",
                "description": "<p>Maximum allowed number of zones in the project.</p>",
                "source": "lib/gcloud/dns/project.rb#L87",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data_per_record",
                "description": "<p>Maximum allowed number of data entries per record.</p>",
                "source": "lib/gcloud/dns/project.rb#L94",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "additions_per_change",
                "description": "<p>Maximum allowed number of records to add per change.</p>",
                "source": "lib/gcloud/dns/project.rb#L101",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "deletions_per_change",
                "description": "<p>Maximum allowed number of records to delete per change.</p>",
                "source": "lib/gcloud/dns/project.rb#L108",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "records_per_zone",
                "description": "<p>Maximum allowed number of records per zone in the project.</p>",
                "source": "lib/gcloud/dns/project.rb#L115",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "total_data_per_change",
                "description": "<p>Maximum allowed total bytes size for all the data in one change.</p>",
                "source": "lib/gcloud/dns/project.rb#L122",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "zone",
                "description": "<p>Retrieves an existing zone by name or id.</p>",
                "source": "lib/gcloud/dns/project.rb#L152",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.zone \"example-com\"\nputs zone.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "zone_id",
                  "types": [
                    "String",
                    "Integer"
                  ],
                  "description": "The name or id of a zone.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Dns::Zone",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the zone does not exist."
                }
              ]
            },
            {
              "metadata": {
                "name": "zones",
                "description": "<p>Retrieves the list of zones belonging to the project.</p>",
                "source": "lib/gcloud/dns/project.rb#L197",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzones = dns.zones\nzones.each do |zone|\n  puts zone.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::Dns::Zone::List})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzones = dns.zones\nloop do\n  zones.each do |zone|\n    puts zone.name\n  end\n  break unless zones.next?\n  zones = zones.next\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of zones to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Dns::Zone>"],
                  "description": "(See {Gcloud::Dns::Zone::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "create_zone",
                "description": "<p>Creates a new zone.</p>",
                "source": "lib/gcloud/dns/project.rb#L233",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndns = gcloud.dns\nzone = dns.create_zone \"example-com\", \"example.com.\""
                  }
                ]
              },
              "params": [
                {
                  "name": "zone_name",
                  "types": ["String"],
                  "description": "User assigned name for this resource. Must be unique within the project. The name must be 1-32 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "zone_dns",
                  "types": ["String"],
                  "description": "The DNS name of this managed zone, for instance &quot;example.com.&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "description",
                  "types": ["String"],
                  "description": "A string of at most 1024 characters associated with this resource for the user&#39;s convenience. Has no effect on the managed zone&#39;s function.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "name_server_set",
                  "types": ["String"],
                  "description": "A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users will leave this field unset.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Dns::Zone"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the change with updated status from the DNS service.</p>",
                "source": "lib/gcloud/dns/project.rb#L248",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/dns/project.rb#L263",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "importer",
          "metadata": {
            "name": "Importer",
            "description": "<h1>DNS Importer</h1>  <p>Reads a <a href=\"https://en.wikipedia.org/wiki/Zone_file\">DNS zone file</a> and parses it, creating a collection of Record instances. The returned records are unsaved, as they are not yet associated with a Zone. Use {Zone#import} to add zone file records to a Zone.</p>  <p>Because the Google Cloud DNS API only accepts a single resource record for each <code>name</code> and <code>type</code> combination (with multiple <code>data</code> elements), the zone file&#39;s records are merged as necessary. During this merge, the lowest <code>ttl</code> of the merged records is used. If none of the merged records have a <code>ttl</code> value, the zone file&#39;s global TTL is used for the record.</p>  <p>The following record types are supported: A, AAAA, CNAME, MX, NAPTR, NS, PTR, SOA, SPF, SRV, and TXT.</p>",
            "source": "lib/gcloud/dns/importer.rb#L39",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Importer that immediately parses the provided zone file data and creates Record instances.</p>",
                "source": "lib/gcloud/dns/importer.rb#L47",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "path_or_io",
                  "types": [
                    "String",
                    "IO"
                  ],
                  "description": "The path to a zone file on the filesystem, or an IO instance from which zone file data can be read.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Importer"],
                  "description": "a new instance of Importer"
                }
              ]
            },
            {
              "metadata": {
                "name": "records",
                "description": "<p>Returns the Record instances created from the zone file.</p>",
                "source": "lib/gcloud/dns/importer.rb#L67",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "only",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "Include only records of this type or types.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "except",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "Exclude records of this type or types.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Record>"],
                  "description": "An array of unsaved {Record} instances"
                }
              ]
            },
            {
              "metadata": {
                "name": "merge_zonefile_records",
                "description": "<p>The zonefile library returns a two-element array in which the first element is a symbol type (:a, :mx, and so on), and the second element is an array containing the records of that type. Group the records by name and type instead.</p>",
                "source": "lib/gcloud/dns/importer.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "from_zonefile_records",
                "description": "<p>Convert the grouped records to single array of records, merging records of the same name and type into a single record with an array of rrdatas.</p>",
                "source": "lib/gcloud/dns/importer.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "soa_record",
                "description": "",
                "source": "lib/gcloud/dns/importer.rb#L106",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ttl_from_zonefile_records",
                "description": "<p>From a collection of records, take the lowest ttl</p>",
                "source": "lib/gcloud/dns/importer.rb#L115",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data_from_zonefile_record",
                "description": "<p>rubocop:disable all Rubocop&#39;s line-length and branch condition restrictions prevent the most straightforward approach to converting zonefile&#39;s records to our own. So disable rubocop for this operation.</p>",
                "source": "lib/gcloud/dns/importer.rb#L128",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ttl_to_i",
                "description": "",
                "source": "lib/gcloud/dns/importer.rb#L165",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_zonefile",
                "description": "<p>:nodoc:</p>",
                "source": "lib/gcloud/dns/importer.rb#L174",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "",
            "source": "lib/gcloud/dns/connection.rb#L23",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>Returns the value of attribute project</p>",
                "source": "lib/gcloud/dns/connection.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project=",
                "description": "<p>Sets the attribute project</p>",
                "source": "lib/gcloud/dns/connection.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute project to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>Returns the value of attribute credentials</p>",
                "source": "lib/gcloud/dns/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>Sets the attribute credentials</p>",
                "source": "lib/gcloud/dns/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute credentials to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/dns/connection.rb#L31",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "get_project",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_zone",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L47",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_zones",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L54",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_zone",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_zone",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_change",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L88",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_changes",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_change",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L110",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_records",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L122",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fqdn",
                "description": "<p>Fully Qualified Domain Name</p>",
                "source": "lib/gcloud/dns/connection.rb#L138",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ip_addr?",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L152",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/dns/connection.rb#L159",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/dns/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        }
      ]
    },
    {
      "id": "search",
      "metadata": {
        "name": "Search",
        "description": "<h1>Google Cloud Search</h1>  <p>Google Cloud Search allows an application to quickly perform full-text and geo-spatial searches without having to spin up instances and without the hassle of managing and maintaining a search service.</p>  <p>Cloud Search provides a model for indexing documents containing structured data, with documents and indexes saved to a separate persistent store optimized for search operations. The API supports full text matching on string fields and allows indexing any number of documents in any number of indexes.</p>  <p>The Cloud Search API is an Alpha release, and might be changed in backward-incompatible ways. It is not currently recommended for production use. It is not subject to any SLA or deprecation policy.</p>  <h2>Accessing the Service</h2>  <p>Currently, the Cloud Search API is available only to white-listed users. Contact your account manager or a member of the Google Cloud sales team if you are interested in access.</p>  <h2>Authentication</h2>  <p>Authentication is handled by Gcloud#search. You can provide the project and credential information to connect to the Cloud Search service, or if you are running on Google Compute Engine this configuration is taken care of for you. You can read more about the options for connecting in the <a href=\"../AUTHENTICATION\">Authentication Guide</a>.</p>  <h2>Managing Indexes</h2>  <p>An Index is a searchable collection of documents that belongs to a Project.</p>  <p>You can list the indexes in your current project:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search</p>  <p>indexes = search.indexes  # API call indexes.each do |index|   puts index.index_id end ```</p>  <p>And you can use the project to create new indexes:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search</p>  <p>index = search.index &quot;products&quot;, skip_lookup: true ```</p>  <p>A new index is an unsaved value object. Indexes cannot be created, updated, or deleted directly in the service: They are derived from the documents which are created &quot;within&quot; them. A new index will exist in the service once you save a document that references it.</p>  <h2>Managing Documents</h2>  <p>Using an index, create a new, unsaved Document instance, providing your own unique document ID, as shown below, or omitting this argument to let the service assign the ID.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search</p>  <p>index = search.index &quot;products&quot; document = index.document &quot;product-sku-000001&quot; index.find document # API call</p>  <h1>=&gt; nil</h1>  <p>document.rank #=&gt; nil ```</p>  <p>Add one or more fields to the document. (See <a href=\"#module-Gcloud::Search-label-Adding%60document%60fields\">Adding document fields</a>, below.)</p>  <p><code>ruby document.add &quot;price&quot;, 24.95 </code></p>  <p>When your document is complete, save it:</p>  <p>```ruby index.save document # API call document.rank # set by the server</p>  <h1>=&gt; 1443648166</h1>  <p>```</p>  <p>You can list the documents in an index:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;products&quot;</p>  <p>documents = index.documents # API call documents.map &amp;:doc_id #=&gt; [&quot;product-sku-000001&quot;] ```</p>  <p>And you can delete documents:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;products&quot;</p>  <p>document = index.find &quot;product-sku-000001&quot;</p>  <p>document.delete  # API call index.find document # API call</p>  <h1>=&gt; nil</h1>  <p>```</p>  <p>To update a document after manipulating its fields or rank, just re-save it:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;products&quot;</p>  <p>document = index.find &quot;product-sku-000001&quot;</p>  <p>document.rank = 12345 document.add &quot;price&quot;, 9.95 # replace existing number value index.save document # API call ```</p>  <h2>Adding document fields</h2>  <p>Fields belong to documents and are the data that actually gets searched. Each field has a FieldValues collection, which facilitates access to FieldValue objects. Each FieldValue object will be saved as one of the <a href=\"https://cloud.google.com/search/documents_indexes#document_fields_field_names_and_multi-valued_fields\">Cloud Search types</a>. The type will be inferred from the value when possible, or you can explicitly specify it by passing a symbol with the <code>type</code> option to Document#add.</p>  <ul> <li>String (<code>:atom</code>, <code>:html</code>, <code>:text</code>, or <code>:default</code>)</li> <li>Number (<code>:number</code>)</li> <li>Timestamp (<code>:datetime</code>)</li> <li>Geovalue (<code>:geo</code>)</li> </ul>  <p>String values can be tokenized using one of three different types of tokenization, which can be passed with the <code>type</code> option when the value is added:</p>  <ul> <li><p><code>:atom</code> means &quot;don&#39;t tokenize this string&quot;, treat it as one thing to compare against</p></li> <li><p><code>:html</code> means &quot;treat this string as HTML&quot;, not comparing against the tags, and treating the rest of the content like <code>:text</code></p></li> <li><p><code>:text</code> means &quot;treat this string as normal text&quot; and split words apart to be compared against</p></li> </ul>  <p>Again, you can add more than one value to a field, and the values may be of different types.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search</p>  <p>index = search.index &quot;products&quot; document = index.find &quot;product-sku-000001&quot; document.add &quot;description&quot;, &quot;The best T-shirt ever.&quot;, type: :text, lang: &quot;en&quot; document.add &quot;description&quot;, &quot;<p>The best T-shirt ever.</p>&quot;, type: :html, lang: &quot;en&quot; document[&quot;description&quot;].size #=&gt; 2 ```</p>  <h2>Searching</h2>  <p>After populating an index with documents, you can request search results with a query:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;books&quot;</p>  <p>results = index.search &quot;dark stormy&quot; results.each do |result|   puts result.doc_id end ```</p>  <p>By default, Result objects are sorted by document rank. For more information see the <a href=\"https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents#resource_representation.google.cloudsearch.v1.Document.rank\">REST API documentation for Document.rank</a>.</p>  <p>You can specify how to sort results with the <code>order</code> option:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;books&quot;</p>  <p>results = index.search &quot;dark stormy&quot;, order: &quot;published, avg_review desc&quot; documents = index.search query # API call ```</p>  <p>You can add computed fields with the <code>expressions</code> option, and specify the fields that are returned with the <code>fields</code> option. No document data will be returned if you omit the <code>fields</code> option, only <code>doc_id</code> references to any matched documents.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;products&quot;</p>  <p>results = index.search &quot;cotton T-shirt&quot;,                        expressions: { total<em>price: &quot;(price + tax)&quot; },                        fields: [&quot;name&quot;, &quot;total</em>price&quot;, &quot;highlight&quot;] ```</p>  <p>Just as in documents, Result data is accessible via Fields methods:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new search = gcloud.search index = search.index &quot;products&quot; document = index.find &quot;product-sku-000001&quot; results = index.search &quot;cotton T-shirt&quot; values = results[0][&quot;description&quot;]</p>  <p>values[0] #=&gt; &quot;100% organic cotton ruby gem T-shirt&quot; values[0].type #=&gt; :text values[0].lang #=&gt; &quot;en&quot; values[1] #=&gt; &quot;<p>100% organic cotton ruby gem T-shirt</p>&quot; values[1].type #=&gt; :html values[1].lang #=&gt; &quot;en&quot; ```</p>",
        "source": "lib/gcloud/search.rb#L311",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "index",
          "metadata": {
            "name": "Index",
            "description": "<h1>Index</h1>  <p>An index manages {Document} instances for retrieval. Indexes cannot be created, updated, or deleted directly on the server: They are derived from the documents that reference them. You can manage groups of documents by putting them into separate indexes.</p>  <p>With an index, you can retrieve documents with {#find} and {#documents}; manage them with {#document}, {#save}, and {#remove}; and perform searches over their fields with {#search}.</p>",
            "source": "lib/gcloud/search/index.rb#L49",
            "resources": [
              {
                "href": "https://cloud.google.com/search/documents_indexes",
                "title": "Documents and Indexes"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.search \"dark stormy\"\nresults.each do |result|\n  puts result.doc_id\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "index_id",
                "description": "<p>The index identifier. May be defined by the server or by the client. Must be unique within the project. It cannot be an empty string. It must contain only visible, printable ASCII characters (ASCII codes 33 through 126 inclusive) and be no longer than 100 characters. It cannot begin with an exclamation point (<code>!</code>), and it cannot begin and end with double underscores (<code>__</code>).</p>",
                "source": "lib/gcloud/search/index.rb#L73",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "text_fields",
                "description": "<p>The names of fields in which TEXT values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L81",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "html_fields",
                "description": "<p>The names of fields in which HTML values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L90",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "atom_fields",
                "description": "<p>The names of fields in which ATOM values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L99",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "datetime_fields",
                "description": "<p>The names of fields in which DATE values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L108",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "number_fields",
                "description": "<p>The names of fields in which NUMBER values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L117",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "geo_fields",
                "description": "<p>The names of fields in which GEO values are stored.</p>",
                "source": "lib/gcloud/search/index.rb#L126",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/documents_indexes#index_schemas",
                    "title": "Index schemas"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "field_names",
                "description": "<p>The names of all the fields that are stored on the index.</p>",
                "source": "lib/gcloud/search/index.rb#L133",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "field_types_for",
                "description": "<p>The field value types that are stored on the field name.</p>",
                "source": "lib/gcloud/search/index.rb#L140",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "find",
                "description": "<p>Retrieves an existing document by id.</p>",
                "source": "lib/gcloud/search/index.rb#L169",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.find \"product-sku-000001\"\nputs document.doc_id"
                  }
                ]
              },
              "params": [
                {
                  "name": "doc_id",
                  "types": [
                    "String",
                    "Gcloud::Search::Document"
                  ],
                  "description": "The id of a document or a Document instance.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Search::Document",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the document does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "document",
                "description": "<p>Helper for creating a new Document instance. The returned instance is local: It is either not yet saved to the service (see {#save}), or if it has been given the id of an existing document, it is not yet populated with the document&#39;s data (see {#find}).</p>",
                "source": "lib/gcloud/search/index.rb#L228",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.doc_id #=> nil\ndocument.rank #=> nil"
                  },
                  {
                    "caption": "To check if an index already contains a document:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument = index.find document # returns nil if not present"
                  }
                ]
              },
              "params": [
                {
                  "name": "doc_id",
                  "types": [
                    "String",
                    "nil"
                  ],
                  "description": "An optional unique ID for the new document. When the document is saved, this value must contain only visible, printable ASCII characters (ASCII codes 33 through 126 inclusive) and be no longer than 500 characters. It cannot begin with an exclamation point (<code>!</code>), and it cannot begin and end with double underscores (<code>__</code>).",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "rank",
                  "types": [
                    "Integer",
                    "nil"
                  ],
                  "description": "An optional rank for the new document. An integer which determines the default ordering of documents returned from a search. It is a bad idea to assign the same rank to many documents, and the same rank should never be assigned to more than 10,000 documents. By default (when it is not specified or set to 0), it is set at the time the document is saved to the number of seconds since January 1, 2011. The rank can be used in the <code>expressions</code>, <code>order</code>, and <code>fields</code> options in {#search}, where it should referenced as <code>rank</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Search::Document"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "documents",
                "description": "<p>Retrieves the list of documents belonging to the index.</p>",
                "source": "lib/gcloud/search/index.rb#L274",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.documents\ndocuments.each do |index|\n  puts index.index_id\nend"
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::Search::Document::List})",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.documents\nloop do\n  documents.each do |index|\n    puts index.index_id\n  end\n  break unless documents.next?\n  documents = documents.next\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of documents to return. The default is <code>100</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Search::Document>"],
                  "description": "See {Gcloud::Search::Document::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "save",
                "description": "<p>Saves a new or existing document to the index. If the document instance is new and has been given an id (see {#document}), it will replace an existing document in the index that has the same unique id.</p>",
                "source": "lib/gcloud/search/index.rb#L307",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.doc_id #=> nil\ndocument.rank #=> nil\n\ndocument = index.save document\ndocument.doc_id #=> \"-2486020449015432113\"\ndocument.rank #=> 154223228"
                  }
                ]
              },
              "params": [
                {
                  "name": "document",
                  "types": ["Gcloud::Search::Document"],
                  "description": "A Document instance, either new (see {#document}) or existing (see {#find}).",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Search::Document"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "remove",
                "description": "<p>Permanently deletes the document from the index.</p>",
                "source": "lib/gcloud/search/index.rb#L335",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\nindex.remove \"product-sku-000001\""
                  }
                ]
              },
              "params": [
                {
                  "name": "doc_id",
                  "types": ["String"],
                  "description": "The id of the document.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "<code>true</code> if successful"
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the index by deleting its documents. (Indexes cannot be created, updated, or deleted directly on the server: They are derived from the documents that reference them.)</p>",
                "source": "lib/gcloud/search/index.rb#L369",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\nindex.delete"
                  },
                  {
                    "caption": "Deleting an index containing documents with the <code>force</code> option:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\nindex.delete force: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, ensures the deletion of the index by first deleting all documents. If <code>false</code> and the index contains documents, the request will fail. Default is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "search",
                "description": "<p>Runs a search against the documents in the index using the provided query.</p>  <p>By default, Result objects are sorted by document rank. For more information see the <a href=\"https://cloud.google.com/search/reference/rest/v1/projects/indexes/documents#resource_representation.google.cloudsearch.v1.Document.rank\">REST API documentation for Document.rank</a>.</p>  <p>You can specify how to sort results with the <code>order</code> option. In the example below, the <code>-</code> character before <code>avg_review</code> means that results will be sorted in ascending order by <code>published</code> and then in descending order by <code>avg_review</code>. You can add computed fields with the <code>expressions</code> option, and limit the fields that are returned with the <code>fields</code> option.</p>",
                "source": "lib/gcloud/search/index.rb#L539",
                "resources": [
                  {
                    "href": "https://cloud.google.com/search/reference/rest/v1/projects/indexes/search",
                    "title": "The REST API documentation for indexes.search"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.search \"dark stormy\"\nresults.each do |result|\n  puts result.doc_id\nend"
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::Search::Result::List})",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.results\nloop do\n  results.each do |result|\n    puts result.doc_id\n  end\n  break unless results.next?\n  results = results.next\nend"
                  },
                  {
                    "caption": "With the <code>order</code> option:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\"\n\nresults = index.search \"dark stormy\", order: \"published, avg_review desc\"\ndocuments = index.search query # API call"
                  },
                  {
                    "caption": "With the <code>fields</code> option:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\nresults = index.search \"cotton T-shirt\",\n                       expressions: { total_price: \"(price + tax)\" },\n                       fields: [\"name\", \"total_price\", \"highlight\"]"
                  },
                  {
                    "caption": "Just as in documents, data is accessible via {Fields} methods:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\ndocument = index.find \"product-sku-000001\"\nresults = index.search \"cotton T-shirt\"\nvalues = results[0][\"description\"]\n\nvalues[0] #=> \"100% organic cotton ruby gem T-shirt\"\nvalues[0].type #=> :text\nvalues[0].lang #=> \"en\"\nvalues[1] #=> \"<p>100% organic cotton ruby gem T-shirt</p>\"\nvalues[1].type #=> :html\nvalues[1].lang #=> \"en\""
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "The query string in search query syntax. If the query is <code>nil</code> or empty, all documents are returned. For more information see <a href=\"https://cloud.google.com/search/query\">Query Strings</a>.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "expressions",
                  "types": ["Hash"],
                  "description": "Customized expressions used in <code>order</code> or <code>fields</code>. The expression can contain fields in Document, the built-in fields ( <code>rank</code>, the document <code>rank</code>, and <code>score</code> if scoring is enabled) and fields defined in <code>expressions</code>. All field expressions expressed as a <code>Hash</code> with the keys as the <code>name</code> and the values as the <code>expression</code>. The expression value can be a combination of supported functions encoded in the string. Expressions involving number fields can use the arithmetical operators (+, -, *, /) and the built-in numeric functions (<code>max</code>, <code>min</code>, <code>pow</code>, <code>count</code>, <code>log</code>, <code>abs</code>). Expressions involving geopoint fields can use the <code>geopoint</code> and <code>distance</code> functions. Expressions for text and html fields can use the <code>snippet</code> function.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "matched_count_accuracy",
                  "types": ["Integer"],
                  "description": "Minimum accuracy requirement for {Result::List#matched<em>count}. If specified, `matched</em>count<code>will be accurate to at least that number. For example, when set to 100, any &lt;code&gt;matched_count &lt;= 100&lt;/code&gt; is accurate. This option may add considerable latency/expense. By default (when it is not specified or set to 0), the accuracy is the same as</code>max`.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "offset",
                  "types": ["Integer"],
                  "description": "Used to advance pagination to an arbitrary result, independent of the previous results. Offsets are an inefficient alternative to using <code>token</code>. (Both cannot be both set.) The default is 0.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "order",
                  "types": ["String"],
                  "description": "A comma-separated list of fields for sorting on the search result, including fields from Document, the built-in fields (<code>rank</code> and <code>score</code>), and fields defined in expressions. The default sorting order is ascending. To specify descending order for a field, a suffix <code>&quot; desc&quot;</code> should be appended to the field name. For example: <code>orderBy=&quot;foo desc,bar&quot;</code>. The default value for text sort is the empty string, and the default value for numeric sort is 0. If not specified, the search results are automatically sorted by descending <code>rank</code>. Sorting by ascending <code>rank</code> is not allowed.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "fields",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The fields to return in the {Search::Result} objects. These can be fields from {Document}, the built-in fields <code>rank</code> and <code>score</code>, and fields defined in expressions. The default is to return all fields.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "scorer",
                  "types": [
                    "String",
                    "Symbol"
                  ],
                  "description": "The scoring function to invoke on a search result for this query. If scorer is not set, scoring is disabled and <code>score</code> is 0 for all documents in the search result. To enable document relevancy score based on term frequency, set <code>scorer</code> to <code>:generic</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "scorer_size",
                  "types": ["Integer"],
                  "description": "Maximum number of top retrieved results to score. It is valid only when <code>scorer</code> is set. The default is 100.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of results to return per page.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Search::Result>"],
                  "description": "(See {Gcloud::Search::Result::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/search/index.rb#L562",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "format_expressions",
                "description": "",
                "source": "lib/gcloud/search/index.rb#L566",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<p>Base Search exception class.</p>",
            "source": "lib/gcloud/search/errors.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/search/errors.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/search/errors.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/search/errors.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "fields",
          "metadata": {
            "name": "Fields",
            "description": "<h1>Fields</h1>  <p>Fields is the object that provides access to a document&#39;s fields.</p>  <p>Each field has a name (String) and a list of values. Each field name consists of only ASCII characters, must be unique within the document and is case sensitive. A field name must start with a letter and can contain letters, digits, or underscore, with a maximum of 500 characters.</p>  <p>A field can have multiple values with same or different types; however, it cannot have multiple datetime (DateTime) or number (Float) values. (See {FieldValues} and {FieldValue})</p>",
            "source": "lib/gcloud/search/fields.rb#L54",
            "resources": [
              {
                "href": "https://cloud.google.com/search/documents_indexes",
                "title": "Documents and fields"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document #{document.doc_id} has the following fields:\"\ndocument.names.each do |name|\n  puts \"* #{name}:\"\n  document[name].each do |value|\n    puts \"  * #{value} (#{value.type})\"\n  end\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "[]",
                "description": "<p>Retrieve the field values associated to a field name.</p>",
                "source": "lib/gcloud/search/fields.rb#L84",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document description is:\"\ndocument.fields[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field. New values will be configured with this name.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["FieldValues"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "add",
                "description": "<p>Add a new value. If the field name does not exist it will be added. If the field value is a DateTime or Numeric, or the type is set to <code>:datetime</code> or <code>:number</code>, then the added value will replace any existing values of the same type (since there can be only one).</p>",
                "source": "lib/gcloud/search/fields.rb#L135",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.fields.add \"sku\", \"product-sku-000001\", type: :atom\ndocument.fields.add \"description\", \"The best T-shirt ever.\",\n                    type: :text, lang: \"en\"\ndocument.fields.add \"description\", \"<p>The best T-shirt ever.</p>\",\n                    type: :html, lang: \"en\"\ndocument.fields.add \"price\", 24.95"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "value",
                  "types": [
                    "String",
                    "Datetime",
                    "Float"
                  ],
                  "description": "The value to add to the field.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["Symbol"],
                  "description": "The type of the field value. An attempt is made to set the correct type when this option is missing, although it must be provided for <code>:geo</code> values. A field can have multiple values with same or different types; however, it cannot have multiple <code>:datetime</code> or <code>:number</code> values.</p>  <p>The following values are supported: * <code>:default</code> - The value is a string. The format will be automatically   detected. This is the default value for strings. * <code>:text</code> - The value is a string with maximum length 1024<strong>2   characters. * <code>:html</code> - The value is an HTML-formatted string with maximum length   1024</strong>2 characters. * <code>:atom</code> - The value is a string with maximum length 500 characters. * <code>:geo</code> - The value is a point on earth described by latitude and   longitude coordinates, represented in string with any of the listed   <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_conversion\">ways of writing coordinates</a>. * <code>:datetime</code> - The value is a <code>DateTime</code>. * <code>:number</code> - The value is a <code>Numeric</code> between -2,147,483,647 and   2,147,483,647. The value will be stored as a double precision   floating point value in Cloud Search.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "lang",
                  "types": ["String"],
                  "description": "The language of a string value. Must be a valid <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO 639-1 code</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Deletes a field and all values.</p>",
                "source": "lib/gcloud/search/fields.rb#L155",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.fields.delete \"description\""
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "each",
                "description": "<p>Calls block once for each field, passing the field name and values pair as parameters. If no block is given an enumerator is returned instead.</p>",
                "source": "lib/gcloud/search/fields.rb#L179",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document #{document.doc_id} has the following fields:\"\ndocument.fields.each do |name, values|\n  puts \"* #{name}:\"\n  values.each do |value|\n    puts \"  * #{value} (#{value.type})\"\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "names",
                "description": "<p>Returns a new array populated with all the field names.</p>",
                "source": "lib/gcloud/search/fields.rb#L200",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document #{document.doc_id} has the following fields:\"\ndocument.fields.names.each do |name|\n  puts \"* #{name}:\"\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "result",
          "metadata": {
            "name": "Result",
            "description": "<h1>Result</h1>  <p>See {Gcloud#search}</p>",
            "source": "lib/gcloud/search/result.rb#L25",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "doc_id",
                "description": "<p>The unique identifier of the document referenced in the search result.</p>",
                "source": "lib/gcloud/search/result.rb#L37",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "token",
                "description": "<p>The token for the next page of results.</p>",
                "source": "lib/gcloud/search/result.rb#L45",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "[]",
                "description": "<p>Retrieve the field values associated to a field name.</p>",
                "source": "lib/gcloud/search/result.rb#L71",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.search \"best T-shirt ever\"\ndocument = documents.first\nputs \"The best match for your search is:\"\ndocument[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field. New values will be configured with this name.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["FieldValue"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "fields",
                "description": "<p>The fields in the search result. Each field has a name (String) and a list of values ({FieldValues}). (See {Fields})</p>",
                "source": "lib/gcloud/search/result.rb#L82",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "each",
                "description": "<p>Calls block once for each field, passing the field name and values pair as parameters. If no block is given an enumerator is returned instead. (See {Fields#each})</p>",
                "source": "lib/gcloud/search/result.rb#L110",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.search \"best T-shirt ever\"\ndocument = documents.first\nputs \"The best match for your search is:\"\ndocument.each do |name, values|\n  puts \"* #{name}:\"\n  values.each do |value|\n    puts \"  * #{value} (#{value.type})\"\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "names",
                "description": "<p>Returns a new array populated with all the field names. (See {Fields#names})</p>",
                "source": "lib/gcloud/search/result.rb#L134",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocuments = index.search \"best T-shirt ever\"\ndocument = documents.first\nputs \"The best match has the following fields:\"\ndocument.names.each do |name|\n  puts \"* #{name}:\"\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<String>"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>Projects are top-level containers in Google Cloud Platform. They store information about billing and authorized users, and they control access to Google Cloud Search resources. Each project has a friendly name and a unique ID. Projects can be created only in the <a href=\"https://console.developers.google.com\">Google Developers Console</a>. See {Gcloud#search}.</p>",
            "source": "lib/gcloud/search/project.rb#L40",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"books\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>The ID of the current project.</p>",
                "source": "lib/gcloud/search/project.rb#L68",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-project\", \"/path/to/keyfile.json\"\nsearch = gcloud.search\n\nsearch.project #=> \"my-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "index",
                "description": "<p>Retrieves an existing index by ID.</p>",
                "source": "lib/gcloud/search/project.rb#L112",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindex = search.index \"books\"\nindex.index_id #=> \"books\""
                  },
                  {
                    "caption": "A new index can be created with <code>index_id</code> and <code>skip_lookup</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindex = search.index \"more-books\"\nindex #=> nil\nindex = search.index \"more-books\", skip_lookup: true\nindex.index_id #=> \"more-books\""
                  }
                ]
              },
              "params": [
                {
                  "name": "index_id",
                  "types": ["String"],
                  "description": "The ID of an index.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_lookup",
                  "types": ["Boolean"],
                  "description": "Optionally create an Index object without verifying the index resource exists on the Search service. Documents saved on this object will create the index resource if the resource does not yet exist. Default is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Search::Index",
                    "nil"
                  ],
                  "description": "nil if the index does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "indexes",
                "description": "<p>Retrieves the list of indexes belonging to the project.</p>",
                "source": "lib/gcloud/search/project.rb#L161",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindexes = search.indexes\nindexes.each do |index|\n  puts index.index_id\nend"
                  },
                  {
                    "caption": "Using pagination: (See {Gcloud::Search::Index::List})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\n\nindexes = search.indexes\nloop do\n  indexes.each do |index|\n    puts index.index_id\n  end\n  break unless indexes.next?\n  indexes = indexes.next\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "prefix",
                  "types": ["String"],
                  "description": "The prefix of the index name. It is used to list all indexes with names that have this prefix.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of indexes to return. The default is <code>100</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Search::Index>"],
                  "description": "(See {Gcloud::Search::Index::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/search/project.rb#L176",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "document",
          "metadata": {
            "name": "Document",
            "description": "<h1>Document</h1>  <p>A document is an object that stores data that can be searched. Each document has a {#doc_id} that is unique within its index, a {#rank}, and a list of {#fields} that contain typed data. Its field values can be accessed through hash-like methods such as {#[]} and {#each}.</p>",
            "source": "lib/gcloud/search/document.rb#L46",
            "resources": [
              {
                "href": "https://cloud.google.com/search/documents_indexes",
                "title": "Documents and Indexes"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.add \"price\", 24.95\nindex.save document\ndocument.rank #=> 1443648166\ndocument[\"price\"] #=> 24.95"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "doc_id",
                "description": "<p>The unique identifier for the document. Can be set explicitly when the document is saved. (See {Index#document} and {#doc_id=}.) If missing, it is automatically assigned to the document when saved.</p>",
                "source": "lib/gcloud/search/document.rb#L59",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "doc_id=",
                "description": "<p>Sets the unique identifier for the document.</p>  <p>Must contain only visible, printable ASCII characters (ASCII codes 33 through 126 inclusive) and be no longer than 500 characters. It cannot begin with an exclamation point (<code>!</code>), and it cannot begin and end with double underscores (<code>__</code>).</p>",
                "source": "lib/gcloud/search/document.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rank",
                "description": "<p>A positive integer which determines the default ordering of documents returned from a search. The rank can be set explicitly when the document is saved. (See {Index#document} and {#rank=}.)  If missing, it is automatically assigned to the document when saved.</p>",
                "source": "lib/gcloud/search/document.rb#L79",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rank=",
                "description": "<p>Sets the rank of the document.</p>  <p>The same rank should not be assigned to many documents, and should never be assigned to more than 10,000 documents. By default (when it is not specified or set to 0), it is set at the time the document is created to the number of seconds since January 1, 2011. The rank can be used in {Index#search} options <code>expressions</code>, <code>order</code>, and <code>fields</code>, where it is referenced as <code>rank</code>.</p>",
                "source": "lib/gcloud/search/document.rb#L92",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "[]",
                "description": "<p>Retrieve the field values associated to a field name.</p>",
                "source": "lib/gcloud/search/document.rb#L117",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document description is:\"\ndocument[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field. New values will be configured with this name.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["FieldValues"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "fields",
                "description": "<p>The fields in the document. Each field has a name (String) and a list of values ({FieldValues}). (See {Fields})</p>",
                "source": "lib/gcloud/search/document.rb#L128",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "add",
                "description": "<p>Add a new value. If the field name does not exist it will be added. If the field value is a DateTime or Numeric, or the type is set to <code>:datetime</code> or <code>:number</code>, then the added value will replace any existing values of the same type (since there can be only one).</p>",
                "source": "lib/gcloud/search/document.rb#L181",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.add \"sku\", \"product-sku-000001\", type: :atom\ndocument.add \"description\", \"The best T-shirt ever.\",\n             type: :text, lang: \"en\"\ndocument.add \"description\", \"<p>The best T-shirt ever.</p>\",\n             type: :html, lang: \"en\"\ndocument.add \"price\", 24.95"
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "value",
                  "types": [
                    "String",
                    "Datetime",
                    "Float"
                  ],
                  "description": "The value to add to the field.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["Symbol"],
                  "description": "The type of the field value. An attempt is made to set the correct type when this option is missing, although it must be provided for <code>:geo</code> values. A field can have multiple values with same or different types; however, it cannot have multiple <code>:datetime</code> or <code>:number</code> values.</p>  <p>The following values are supported: * <code>:default</code> - The value is a string. The format will be automatically   detected. This is the default value for strings. * <code>:text</code> - The value is a string with maximum length 1024<strong>2   characters. * <code>:html</code> - The value is an HTML-formatted string with maximum length   1024</strong>2 characters. * <code>:atom</code> - The value is a string with maximum length 500 characters. * <code>:geo</code> - The value is a point on earth described by latitude and   longitude coordinates, represented in string with any of the listed   <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_conversion\">ways of writing coordinates</a>. * <code>:datetime</code> - The value is a <code>DateTime</code>. * <code>:number</code> - The value is a <code>Numeric</code> between -2,147,483,647 and   2,147,483,647. The value will be stored as a double precision   floating point value in Cloud Search.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "lang",
                  "types": ["String"],
                  "description": "The language of a string value. Must be a valid <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO 639-1 code</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Deletes a field and all values. (See {Fields#delete})</p>",
                "source": "lib/gcloud/search/document.rb#L200",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument.delete \"description\""
                  }
                ]
              },
              "params": [
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The name of the field.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "each",
                "description": "<p>Calls block once for each field, passing the field name and values pair as parameters. If no block is given an enumerator is returned instead. (See {Fields#each})</p>",
                "source": "lib/gcloud/search/document.rb#L225",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document #{document.doc_id} has the following fields:\"\ndocument.each do |name, values|\n  puts \"* #{name}:\"\n  values.each do |value|\n    puts \"  * #{value} (#{value.type})\"\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "names",
                "description": "<p>Returns a new array populated with all the field names. (See {Fields#names})</p>",
                "source": "lib/gcloud/search/document.rb#L246",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document #{document.doc_id} has the following fields:\"\ndocument.names.each do |name|\n  puts \"* #{name}:\"\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>as well as expose the API calls.</p>",
            "source": "lib/gcloud/search/connection.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>Returns the value of attribute project</p>",
                "source": "lib/gcloud/search/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project=",
                "description": "<p>Sets the attribute project</p>",
                "source": "lib/gcloud/search/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute project to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>Returns the value of attribute credentials</p>",
                "source": "lib/gcloud/search/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>Sets the attribute credentials</p>",
                "source": "lib/gcloud/search/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute credentials to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "client",
                "description": "<p>Returns the value of attribute client</p>",
                "source": "lib/gcloud/search/connection.rb#L29",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "client=",
                "description": "<p>Sets the attribute client</p>",
                "source": "lib/gcloud/search/connection.rb#L29",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute client to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "connection",
                "description": "<p>Returns the value of attribute connection</p>",
                "source": "lib/gcloud/search/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "connection=",
                "description": "<p>Sets the attribute connection</p>",
                "source": "lib/gcloud/search/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute connection to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/search/connection.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "list_indexes",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L46",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_index",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L60",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_doc",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L68",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_docs",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_doc",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L91",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_doc",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L100",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "search",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L109",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L123",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "search_request",
                "description": "",
                "source": "lib/gcloud/search/connection.rb#L129",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "apiclient",
          "metadata": {
            "name": "APIClient",
            "description": "<p>is discoverable, initialization of this class in Connection should be replaced with the Google API Client.</p>",
            "source": "lib/gcloud/search/api_client.rb#L25",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "authorization",
                "description": "<p>Returns the value of attribute authorization</p>",
                "source": "lib/gcloud/search/api_client.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "authorization=",
                "description": "<p>Sets the attribute authorization</p>",
                "source": "lib/gcloud/search/api_client.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute authorization to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "connection",
                "description": "<p>Returns the value of attribute connection</p>",
                "source": "lib/gcloud/search/api_client.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "connection=",
                "description": "<p>Sets the attribute connection</p>",
                "source": "lib/gcloud/search/api_client.rb#L26",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute connection to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new APIClient instance.</p>",
                "source": "lib/gcloud/search/api_client.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["APIClient"],
                  "description": "a new instance of APIClient"
                }
              ]
            },
            {
              "metadata": {
                "name": "discovered_api",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "execute",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L39",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L45",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "run",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L109",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "generate_search_uri",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L125",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fix_serialization!",
                "description": "",
                "source": "lib/gcloud/search/api_client.rb#L137",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/search/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "fieldvalue",
          "metadata": {
            "name": "FieldValue",
            "description": "<h1>FieldValue</h1>  <p>FieldValue is used to represent a value that belongs to a field. (See {Fields} and {FieldValues})</p>  <p>A field value must have a type. A value that is a Numeric will default to <code>:number</code>, while a DateTime will default to <code>:datetime</code>. If a type is not provided it will be determined by looking at the value.</p>  <p>String values (text, html, atom) can also specify a lang value, which is an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO 639-1 code</a>.</p>",
            "source": "lib/gcloud/search/field_value.rb#L48",
            "resources": [
              {
                "href": "https://cloud.google.com/search/documents_indexes",
                "title": "Documents and fields"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document description is:\"\ndocument[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "type",
                "description": "<p>Returns the value of attribute type</p>",
                "source": "lib/gcloud/search/field_value.rb#L49",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "lang",
                "description": "<p>Returns the value of attribute lang</p>",
                "source": "lib/gcloud/search/field_value.rb#L49",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>Returns the value of attribute name</p>",
                "source": "lib/gcloud/search/field_value.rb#L49",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "string_type?",
                "description": "<p>Determines if the value a string type. The value is text or html or atom (or default).</p>",
                "source": "lib/gcloud/search/field_value.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "infer_type",
                "description": "",
                "source": "lib/gcloud/search/field_value.rb#L146",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "fieldvalues",
          "metadata": {
            "name": "FieldValues",
            "description": "<h1>FieldValues</h1>  <p>The list of values for a field.</p>  <p>Each field has a name (String) and a list of values. Each field name consists of only ASCII characters, must be unique within the document and is case sensitive. A field name must start with a letter and can contain letters, digits, or underscore, with a maximum of 500 characters.</p>  <p>Each field on a document can have multiple values. FieldValues is the object that manages the multiple values. Values can be the same or different types; however, it cannot have multiple datetime (DateTime) or number (Float) values. (See {FieldValue})</p>",
            "source": "lib/gcloud/search/field_values.rb#L51",
            "resources": [
              {
                "href": "https://cloud.google.com/search/documents_indexes",
                "title": "Documents and Indexes"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document description is:\"\ndocument[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "[]",
                "description": "<p>Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices.</p>  <p>Negative indices count backward from the end of the array (-1 is the last element). For start and range cases the starting index is just before an element. Additionally, an empty array is returned when the starting index for an element range is at the end of the array.</p>",
                "source": "lib/gcloud/search/field_values.rb#L78",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "FieldValue",
                    "nil"
                  ],
                  "description": "Returns nil if the index (or starting index) are out of range."
                }
              ]
            },
            {
              "metadata": {
                "name": "add",
                "description": "<p>Add a new value. If the field name does not exist it will be added. If the field value is a DateTime or Numeric, or the type is set to <code>:datetime</code> or <code>:number</code>, then the added value will replace any existing values of the same type (since there can be only one).</p>",
                "source": "lib/gcloud/search/field_values.rb#L130",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument[\"sku\"].add \"product-sku-000001\", type: :atom\ndocument[\"description\"].add \"The best T-shirt ever.\",\n                            type: :text, lang: \"en\"\ndocument[\"description\"].add \"<p>The best T-shirt ever.</p>\",\n                            type: :html, lang: \"en\"\ndocument[\"price\"].add 24.95"
                  }
                ]
              },
              "params": [
                {
                  "name": "value",
                  "types": [
                    "String",
                    "Datetime",
                    "Float"
                  ],
                  "description": "The value to add to the field.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "type",
                  "types": ["Symbol"],
                  "description": "The type of the field value. An attempt is made to set the correct type when this option is missing, although it must be provided for <code>:geo</code> values. A field can have multiple values with same or different types; however, it cannot have multiple <code>:datetime</code> or <code>:number</code> values.</p>  <p>The following values are supported: * <code>:default</code> - The value is a string. The format will be automatically   detected. This is the default value for strings. * <code>:text</code> - The value is a string with maximum length 1024<strong>2   characters. * <code>:html</code> - The value is an HTML-formatted string with maximum length   1024</strong>2 characters. * <code>:atom</code> - The value is a string with maximum length 500 characters. * <code>:geo</code> - The value is a point on earth described by latitude and   longitude coordinates, represented in string with any of the listed   <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_conversion\">ways of writing coordinates</a>. * <code>:datetime</code> - The value is a <code>DateTime</code>. * <code>:number</code> - The value is a <code>Numeric</code> between -2,147,483,647 and   2,147,483,647. The value will be stored as a double precision   floating point value in Cloud Search.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "lang",
                  "types": ["String"],
                  "description": "The language of a string value. Must be a valid <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO 639-1 code</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["FieldValue"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Deletes all values that are equal to value.</p>",
                "source": "lib/gcloud/search/field_values.rb#L158",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument[\"description\"].count #=> 2\ndocument[\"description\"].delete \"The best T-shirt ever.\"\ndocument[\"description\"].count #=> 1"
                  }
                ]
              },
              "params": [
                {
                  "name": "value",
                  "types": ["String"],
                  "description": "The value to remove from the list of values.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "FieldValue",
                    "nil"
                  ],
                  "description": "The last deleted <code>FieldValue</code>, or <code>nil</code> if no matching value is found."
                }
              ]
            },
            {
              "metadata": {
                "name": "delete_at",
                "description": "<p>Deletes the value at the specified index, returning that FieldValue, or <code>nil</code> if the index is out of range.</p>",
                "source": "lib/gcloud/search/field_values.rb#L185",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\ndocument[\"description\"].count #=> 2\ndocument[\"description\"].delete_at 0\ndocument[\"description\"].count #=> 1"
                  }
                ]
              },
              "params": [
                {
                  "name": "index",
                  "types": ["String"],
                  "description": "The index of the value to be removed from the list of values.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["FieldValue"],
                  "description": "The deleted <code>FieldValue</code> found at the specified index, or # <code>nil</code> if the index is out of range."
                }
              ]
            },
            {
              "metadata": {
                "name": "each",
                "description": "<p>Calls the given block once for each field value, passing the field value as a parameter.</p>  <p>An Enumerator is returned if no block is given.</p>",
                "source": "lib/gcloud/search/field_values.rb#L208",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nsearch = gcloud.search\nindex = search.index \"products\"\n\ndocument = index.document \"product-sku-000001\"\nputs \"The document description is:\"\ndocument[\"description\"].each do |value|\n  puts \"* #{value} (#{value.type}) [#{value.lang}]\"\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "empty?",
                "description": "<p>Returns <code>true</code> if there are no values.</p>",
                "source": "lib/gcloud/search/field_values.rb#L214",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "pubsub",
      "metadata": {
        "name": "Pubsub",
        "description": "<h1>Google Cloud Pub/Sub</h1>  <p>Google Cloud Pub/Sub is designed to provide reliable, many-to-many, asynchronous messaging between applications. Publisher applications can send messages to a &quot;topic&quot; and other applications can subscribe to that topic to receive the messages. By decoupling senders and receivers, Google Cloud Pub/Sub allows developers to communicate between independently written applications.</p>  <p>Gcloud&#39;s goal is to provide a API that is familiar and comfortable to Rubyists. Authentication is handled by Gcloud#pubsub. You can provide the project and credential information to connect to the Pub/Sub service, or if you are running on Google Compute Engine this configuration is taken care of for you.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; topic.publish &quot;task completed&quot; ```</p>  <p>To learn more about Pub/Sub, read the <a href=\"https://cloud.google.com/pubsub/overview\">Google Cloud Pub/Sub Overview </a>.</p>  <h2>Retrieving Topics</h2>  <p>A Topic is a named resource to which messages are sent by publishers. A Topic is found by its name. (See Project#topic)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub topic = pubsub.topic &quot;my-topic&quot; ```</p>  <h2>Creating a Topic</h2>  <p>A Topic is created from a Project. (See Project#create_topic)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub topic = pubsub.create_topic &quot;my-topic&quot; ```</p>  <h2>Retrieving Subscriptions</h2>  <p>A Subscription is a named resource representing the stream of messages from a single, specific Topic, to be delivered to the subscribing application. A Subscription is found by its name. (See Topic#subscription)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; subscription = topic.subscription &quot;my-topic-subscription&quot; puts subscription.name ```</p>  <h2>Creating a Subscription</h2>  <p>A Subscription is created from a Topic. (See Topic#subscribe and Project#subscribe)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; sub = topic.subscribe &quot;my-topic-sub&quot; puts sub.name # =&gt; &quot;my-topic-sub&quot; ```</p>  <p>The subscription can be created that specifies the number of seconds to wait to be acknowledged as well as an endpoint URL to push the messages to:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; sub = topic.subscribe &quot;my-topic-sub&quot;,                       deadline: 120,                       endpoint: &quot;https://example.com/push&quot; ```</p>  <h2>Publishing Messages</h2>  <p>Messages are published to a topic. Any message published to a topic without a subscription will be lost. Ensure the topic has a subscription before publishing. (See Topic#publish and Project#publish)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; msg = topic.publish &quot;new-message&quot; ```</p>  <p>Messages can also be published with attributes:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; msg = topic.publish &quot;new-message&quot;,                     foo: :bar,                     this: :that ```</p>  <p>Multiple messages can be published at the same time by passing a block:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>topic = pubsub.topic &quot;my-topic&quot; msgs = topic.publish do |batch|   batch.publish &quot;new-message-1&quot;, foo: :bar   batch.publish &quot;new-message-2&quot;, foo: :baz   batch.publish &quot;new-message-3&quot;, foo: :bif end ```</p>  <h2>Pulling Messages</h2>  <p>Messages are pulled from a Subscription. (See Subscription#pull)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; msgs = sub.pull ```</p>  <p>A maximum number of messages returned can also be specified:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot;, max: 10 msgs = sub.pull ```</p>  <p>The request for messages can also block until messages are available. (See Subscription#wait<em>for</em>messages)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; msgs = sub.wait<em>for</em>messages ```</p>  <h2>Acknowledging a Message</h2>  <p>Messages that are received can be acknowledged in Pub/Sub, marking the message to be removed so it cannot be pulled again.</p>  <p>A Message that can be acknowledged is called a ReceivedMessage. ReceivedMessages can be acknowledged one at a time: (See ReceivedMessage#acknowledge!)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; sub.pull.each { |msg| msg.acknowledge! } ```</p>  <p>Or, multiple messages can be acknowledged in a single API call: (See Subscription#acknowledge)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; received<em>messages = sub.pull sub.acknowledge received</em>messages ```</p>  <h2>Modifying a Deadline</h2>  <p>A message must be acknowledged after it is pulled, or Pub/Sub will mark the message for redelivery. The message acknowledgement deadline can delayed if more time is needed. This will allow more time to process the message before the message is marked for redelivery. (See ReceivedMessage#delay!)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; received<em>message = sub.pull.first if received</em>message   puts received<em>message.message.data   # Delay for 2 minutes   received</em>message.delay! 120 end ```</p>  <p>The message can also be made available for immediate redelivery:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; received<em>message = sub.pull.first if received</em>message   puts received<em>message.message.data   # Mark for redelivery by setting the deadline to now   received</em>message.delay! 0 end ```</p>  <p>Multiple messages can be delayed or made available for immediate redelivery: (See Subscription#delay)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; received<em>messages = sub.pull sub.delay 120, received</em>messages ```</p>  <h2>Listening for Messages</h2>  <p>Long running workers are easy to create with <code>listen</code>, which runs an infinitely blocking loop to process messages as they are received. (See Subscription#listen)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; sub.listen do |msg|   # process msg end ```</p>  <p>Messages are retrieved in batches for efficiency. The number of messages pulled per batch can be limited with the <code>max</code> option:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; sub.listen max: 20 do |msg|   # process msg end ```</p>  <p>When processing time and the acknowledgement deadline are a concern, messages can be automatically acknowledged as they are pulled with the <code>autoack</code> option:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new pubsub = gcloud.pubsub</p>  <p>sub = pubsub.subscription &quot;my-topic-sub&quot; sub.listen autoack: true do |msg|   # process msg end ```</p>  <h2>Working Across Projects</h2>  <p>All calls to the Pub/Sub service use the same project and credentials provided to the Gcloud#pubsub method. However, it is common to reference topics or subscriptions in other projects, which can be achieved by using the <code>project</code> option. The main credentials must have permissions to the topics and subscriptions in other projects.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new # my-project-id pubsub = gcloud.pubsub</p>  <h1>Get a topic in the current project</h1>  <p>my<em>topic = pubsub.topic &quot;my-topic&quot; my</em>topic.name #=&gt; &quot;projects/my-project-id/topics/my-topic&quot;</p>  <h1>Get a topic in another project</h1>  <p>other<em>topic = pubsub.topic &quot;other-topic&quot;, project: &quot;other-project-id&quot; other</em>topic.name #=&gt; &quot;projects/other-project-id/topics/other-topic&quot; ```</p>  <p>It is possible to create a subscription in the current project that pulls from a topic in another project:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new # my-project-id pubsub = gcloud.pubsub</p>  <h1>Get a topic in another project</h1>  <p>topic = pubsub.topic &quot;other-topic&quot;, project: &quot;other-project-id&quot;</p>  <h1>Create a subscription in the current project that pulls from</h1>  <h1>the topic in another project</h1>  <p>sub = topic.subscribe &quot;my-sub&quot; sub.name #=&gt; &quot;projects/my-project-id/subscriptions/my-sub&quot; sub.topic.name #=&gt; &quot;projects/other-project-id/topics/other-topic&quot; ```</p>",
        "source": "lib/gcloud/pubsub.rb#L419",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "topic",
          "metadata": {
            "name": "Topic",
            "description": "<h1>Topic</h1>  <p>A named resource to which messages are published.</p>",
            "source": "lib/gcloud/pubsub/topic.rb#L37",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the topic in the form of &quot;/projects/project-identifier/topics/topic-name&quot;.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the topic.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L88",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.delete"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the topic was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "subscribe",
                "description": "<p>Creates a new {Subscription} object on the current Topic.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L147",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\"\nputs sub.name # => \"my-topic-sub\""
                  },
                  {
                    "caption": "The name is optional, and will be generated if not given:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\"\nputs sub.name # => \"generated-sub-name\""
                  },
                  {
                    "caption": "Wait 2 minutes for acknowledgement and push all to an endpoint:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsub = topic.subscribe \"my-topic-sub\",\n                      deadline: 120,\n                      endpoint: \"https://example.com/push\""
                  }
                ]
              },
              "params": [
                {
                  "name": "subscription_name",
                  "types": ["String"],
                  "description": "Name of the new subscription. Must start with a letter, and contain only letters ([A-Za-z]), numbers ([0-9], dashes (-), underscores (_), periods (.), tildes (~), plus (+) or percent signs (%). It must be between 3 and 255 characters in length, and it must not start with &quot;goog&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "deadline",
                  "types": ["Integer"],
                  "description": "The maximum number of seconds after a subscriber receives a message before the subscriber should acknowledge the message.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "endpoint",
                  "types": ["String"],
                  "description": "A URL locating the endpoint to which messages should be pushed.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Pubsub::Subscription"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "subscription",
                "description": "<p>Retrieves subscription by name.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L192",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsubscription = topic.subscription \"my-topic-subscription\"\nputs subscription.name"
                  },
                  {
                    "caption": "Skip the lookup against the service with <code>skip_lookup</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\n# No API call is made to retrieve the subscription information.\nsubscription = pubsub.subscription \"my-sub\", skip_lookup: true\nputs subscription.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "subscription_name",
                  "types": ["String"],
                  "description": "Name of a subscription.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_lookup",
                  "types": ["Boolean"],
                  "description": "Optionally create a {Subscription} object without verifying the subscription resource exists on the Pub/Sub service. Calls made on this object will raise errors if the service resource does not exist. Default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Pubsub::Subscription",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the subscription does not exist."
                }
              ]
            },
            {
              "metadata": {
                "name": "subscriptions",
                "description": "<p>Retrieves a list of subscription names for the given project.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L247",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nsubscription = topic.subscriptions\nsubscriptions.each do |subscription|\n  puts subscription.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {Subscription::List#token})",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nall_subs = []\ntmp_subs = topic.subscriptions\nwhile tmp_subs.any? do\n  tmp_subs.each do |subscription|\n    all_subs << subscription\n  end\n  # break loop if no more subscriptions available\n  break if tmp_subs.token.nil?\n  # get the next group of subscriptions\n  tmp_subs = topic.subscriptions token: tmp_subs.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "The <code>token</code> value returned by the last call to <code>subscriptions</code>; indicates that this is a continuation of a call, and that the system should return the next page of data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of subscriptions to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Subscription>"],
                  "description": "(See {Subscription::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "publish",
                "description": "<p>Publishes one or more messages to the topic.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L304",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\""
                  },
                  {
                    "caption": "Additionally, a message can be published with attributes:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsg = topic.publish \"new-message\",\n                    foo: :bar,\n                    this: :that"
                  },
                  {
                    "caption": "Multiple messages can be sent at the same time using a block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nmsgs = topic.publish do |batch|\n  batch.publish \"new-message-1\", foo: :bar\n  batch.publish \"new-message-2\", foo: :baz\n  batch.publish \"new-message-3\", foo: :bif\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "data",
                  "types": ["String"],
                  "description": "The message data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "attributes",
                  "types": ["Hash"],
                  "description": "Optional attributes for the message.",
                  "optional": true,
                  "default": "{}",
                  "nullable": false
                },
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Message",
                    "Array<Message>"
                  ],
                  "description": "Returns the published message when called without a block, or an array of messages when called with a block."
                }
              ]
            },
            {
              "metadata": {
                "name": "policy",
                "description": "<p>Gets the access control policy.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L349",
                "resources": [],
                "examples": [
                  {
                    "caption": "Policy values are memoized to reduce the number of API calls:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\nputs topic.policy[\"bindings\"]\nputs topic.policy[\"rules\"]"
                  },
                  {
                    "caption": "Use <code>force</code> to retrieve the latest policy from the service:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\npolicy = topic.policy force: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "Force the latest policy to be retrieved from the Pub/Sub service when <code>true</code>. Otherwise the policy will be memoized to reduce the number of API calls made to the Pub/Sub service. The default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Hash"],
                  "description": "Returns a hash that conforms to the following structure:</p>  <p>{   &quot;etag&quot;=&gt;&quot;CAE=&quot;,   &quot;bindings&quot; =&gt; [{     &quot;role&quot; =&gt; &quot;roles/viewer&quot;,     &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]   }] }"
                }
              ]
            },
            {
              "metadata": {
                "name": "policy=",
                "description": "<p>Sets the access control policy.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L388",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nviewer_policy = {\n  \"bindings\" => [{\n    \"role\" => \"roles/viewer\",\n    \"members\" => [\"serviceAccount:your-service-account\"]\n  }]\n}\ntopic = pubsub.topic \"my-topic\"\ntopic.policy = viewer_policy"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_policy",
                  "types": ["String"],
                  "description": "A hash that conforms to the following structure:</p>  <p>{     &quot;bindings&quot; =&gt; [{       &quot;role&quot; =&gt; &quot;roles/viewer&quot;,       &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]     }]   }",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_permissions",
                "description": "<p>Tests the specified permissions against the <a href=\"https://cloud.google.com/iam/\">Cloud IAM</a> access control policy.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L423",
                "resources": [
                  {
                    "href": "https://cloud.google.com/iam/docs/managing-policies",
                    "title": "Managing Policies"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"my-topic\"\nperms = topic.test_permissions \"projects.topic.list\",\n                               \"projects.topic.publish\"\nperms.include? \"projects.topic.list\" #=> true\nperms.include? \"projects.topic.publish\" #=> false"
                  }
                ]
              },
              "params": [
                {
                  "name": "*permissions",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The set of permissions to check access for. Permissions with wildcards (such as <code>*</code> or <code>storage.*</code>) are not allowed.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Strings>"],
                  "description": "The permissions that have access."
                }
              ]
            },
            {
              "metadata": {
                "name": "exists?",
                "description": "<p>Determines whether the topic exists in the Pub/Sub service.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L446",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.exists? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L485",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_gapi!",
                "description": "<p>Ensures a Google API object exists.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L491",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "publish_batch_messages",
                "description": "<p>Call the publish API with arrays of data data and attrs.</p>",
                "source": "lib/gcloud/pubsub/topic.rb#L500",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<h1>Storage Error</h1>  <p>Base Pub/Sub exception class.</p>",
            "source": "lib/gcloud/pubsub/errors.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "response",
                "description": "<p>The response object of the failed HTTP request.</p>",
                "source": "lib/gcloud/pubsub/errors.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<h1>ApiError</h1>  <p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/pubsub/errors.rb#L41",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/pubsub/errors.rb#L44",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/pubsub/errors.rb#L52",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "",
                "source": "lib/gcloud/pubsub/errors.rb#L58",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["ApiError"],
                  "description": "a new instance of ApiError"
                }
              ]
            },
            {
              "metadata": {
                "name": "klass_for",
                "description": "",
                "source": "lib/gcloud/pubsub/errors.rb#L71",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "alreadyexistserror",
          "metadata": {
            "name": "AlreadyExistsError",
            "description": "<h1>AlreadyExistsError</h1>  <p>Raised when Pub/Sub returns an <code>ALREADY_EXISTS</code> error.</p>",
            "source": "lib/gcloud/pubsub/errors.rb#L85",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "notfounderror",
          "metadata": {
            "name": "NotFoundError",
            "description": "<h1>NotFoundError</h1>  <p>Raised when Pub/Sub returns a <code>NOT_FOUND</code> error.</p>",
            "source": "lib/gcloud/pubsub/errors.rb#L92",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>Represents the project that pubsub messages are pushed to and pulled from. {Topic} is a named resource to which messages are sent by publishers. {Subscription} is a named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. {Message} is a combination of data and attributes that a publisher sends to a topic and is eventually delivered to subscribers.</p>  <p>See {Gcloud#pubsub}</p>",
            "source": "lib/gcloud/pubsub/project.rb#L45",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopic = pubsub.topic \"my-topic\"\ntopic.publish \"task completed\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>The Pub/Sub project connected to.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L69",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\npubsub = gcloud.pubsub\n\npubsub.project #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "topic",
                "description": "<p>Retrieves topic by name.</p>  <p>The topic will be created if the topic does not exist and the <code>autocreate</code> option is set to true.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L139",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"existing-topic\""
                  },
                  {
                    "caption": "By default <code>nil</code> will be returned if the topic does not exist.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"non-existing-topic\" #=> nil"
                  },
                  {
                    "caption": "With the <code>autocreate</code> option set to <code>true</code>.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"non-existing-topic\", autocreate: true"
                  },
                  {
                    "caption": "Create a topic in a different project with the <code>project</code> flag.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"another-topic\", project: \"another-project\""
                  },
                  {
                    "caption": "Skip the lookup against the service with <code>skip_lookup</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.topic \"another-topic\", skip_lookup: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "topic_name",
                  "types": ["String"],
                  "description": "Name of a topic.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "autocreate",
                  "types": ["Boolean"],
                  "description": "Flag to control whether the requested topic will be created if it does not exist. Ignored if <code>skip_lookup</code> is <code>true</code>. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "project",
                  "types": ["String"],
                  "description": "If the topic belongs to a project other than the one currently connected to, the alternate project ID can be specified here.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "skip_lookup",
                  "types": ["Boolean"],
                  "description": "Optionally create a {Topic} object without verifying the topic resource exists on the Pub/Sub service. Calls made on this object will raise errors if the topic resource does not exist. Default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Pubsub::Topic",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if topic does not exist. Will return a newly created{ Gcloud::Pubsub::Topic} if the topic does not exist and <code>autocreate</code> is set to <code>true</code>."
                }
              ]
            },
            {
              "metadata": {
                "name": "create_topic",
                "description": "<p>Creates a new topic.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L168",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\ntopic = pubsub.create_topic \"my-topic\""
                  }
                ]
              },
              "params": [
                {
                  "name": "topic_name",
                  "types": ["String"],
                  "description": "Name of a topic.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Pubsub::Topic"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "topics",
                "description": "<p>Retrieves a list of topics for the given project.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L219",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\ntopics = pubsub.topics\ntopics.each do |topic|\n  puts topic.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {Topic::List#token})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nall_topics = []\ntmp_topics = pubsub.topics\nwhile tmp_topics.any? do\n  tmp_topics.each do |topic|\n    all_topics << topic\n  end\n  # break loop if no more topics available\n  break if tmp_topics.token.nil?\n  # get the next group of topics\n  tmp_topics = pubsub.topics token: tmp_topics.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "The <code>token</code> value returned by the last call to <code>topics</code>; indicates that this is a continuation of a call, and that the system should return the next page of data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of topics to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Pubsub::Topic>"],
                  "description": "(See {Gcloud::Pubsub::Topic::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "publish",
                "description": "<p>Publishes one or more messages to the given topic. The topic will be created if the topic does previously not exist and the <code>autocreate</code> option is provided.</p>  <p>A note about auto-creating the topic: Any message published to a topic without a subscription will be lost.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L287",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nmsg = pubsub.publish \"my-topic\", \"new-message\""
                  },
                  {
                    "caption": "Additionally, a message can be published with attributes:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nmsg = pubsub.publish \"my-topic\", \"new-message\", foo: :bar,\n                                                this: :that"
                  },
                  {
                    "caption": "Multiple messages can be sent at the same time using a block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nmsgs = pubsub.publish \"my-topic\" do |batch|\n  batch.publish \"new-message-1\", foo: :bar\n  batch.publish \"new-message-2\", foo: :baz\n  batch.publish \"new-message-3\", foo: :bif\nend"
                  },
                  {
                    "caption": "With <code>autocreate</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nmsg = pubsub.publish \"new-topic\", \"new-message\", autocreate: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "topic_name",
                  "types": ["String"],
                  "description": "Name of a topic.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "data",
                  "types": ["String"],
                  "description": "The message data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "attributes",
                  "types": ["Hash"],
                  "description": "Optional attributes for the message.",
                  "optional": true,
                  "default": "{}",
                  "nullable": false
                },
                {
                  "name": "attributes.autocreate",
                  "types": ["Boolean"],
                  "description": "Flag to control whether the provided topic will be created if it does not exist.",
                  "optional": true,
                  "nullable": false
                },
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Message",
                    "Array<Message>"
                  ],
                  "description": "Returns the published message when called without a block, or an array of messages when called with a block."
                }
              ]
            },
            {
              "metadata": {
                "name": "subscribe",
                "description": "<p>Creates a new {Subscription} object for the provided topic. The topic will be created if the topic does previously not exist and the <code>autocreate</code> option is provided.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L359",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscribe \"my-topic\", \"my-topic-sub\"\nputs sub.name # => \"my-topic-sub\""
                  },
                  {
                    "caption": "The name is optional, and will be generated if not given.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscribe \"my-topic\"\nputs sub.name # => \"generated-sub-name\""
                  },
                  {
                    "caption": "Wait 2 minutes for acknowledgement and push all to an endpoint:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscribe \"my-topic\", \"my-topic-sub\",\n                       deadline: 120,\n                       endpoint: \"https://example.com/push\""
                  },
                  {
                    "caption": "With <code>autocreate</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscribe \"new-topic\", \"new-topic-sub\", autocreate: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "topic_name",
                  "types": ["String"],
                  "description": "Name of a topic.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "subscription_name",
                  "types": ["String"],
                  "description": "Name of the new subscription. Must start with a letter, and contain only letters ([A-Za-z]), numbers ([0-9], dashes (-), underscores (_), periods (.), tildes (~), plus (+) or percent signs (%). It must be between 3 and 255 characters in length, and it must not start with &quot;goog&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "deadline",
                  "types": ["Integer"],
                  "description": "The maximum number of seconds after a subscriber receives a message before the subscriber should acknowledge the message.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "endpoint",
                  "types": ["String"],
                  "description": "A URL locating the endpoint to which messages should be pushed.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "autocreate",
                  "types": ["String"],
                  "description": "Flag to control whether the topic will be created if it does not exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Pubsub::Subscription"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "subscription",
                "description": "<p>Retrieves subscription by name.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L411",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsubscription = pubsub.subscription \"my-sub\"\nputs subscription.name"
                  },
                  {
                    "caption": "Skip the lookup against the service with <code>skip_lookup</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\n# No API call is made to retrieve the subscription information.\nsubscription = pubsub.subscription \"my-sub\", skip_lookup: true\nputs subscription.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "subscription_name",
                  "types": ["String"],
                  "description": "Name of a subscription.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "project",
                  "types": ["String"],
                  "description": "If the subscription belongs to a project other than the one currently connected to, the alternate project ID can be specified here.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "skip_lookup",
                  "types": ["Boolean"],
                  "description": "Optionally create a {Subscription} object without verifying the subscription resource exists on the Pub/Sub service. Calls made on this object will raise errors if the service resource does not exist. Default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Pubsub::Subscription",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the subscription does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "subscriptions",
                "description": "<p>Retrieves a list of subscriptions for the given project.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L467",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsubscriptions = pubsub.subscriptions\nsubscriptions.each do |subscription|\n  puts subscription.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {Subscription::List#token})",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nall_subs = []\ntmp_subs = pubsub.subscriptions\nwhile tmp_subs.any? do\n  tmp_subs.each do |subscription|\n    all_subs << subscription\n  end\n  # break loop if no more subscriptions available\n  break if tmp_subs.token.nil?\n  # get the next group of subscriptions\n  tmp_subs = pubsub.subscriptions token: tmp_subs.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "prefix",
                  "types": ["String"],
                  "description": "Filter results to subscriptions whose names begin with this prefix.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of subscriptions to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Pubsub::Subscription>"],
                  "description": "(See {Gcloud::Pubsub::Subscription::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L484",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "publish_batch_messages",
                "description": "<p>Call the publish API with arrays of data data and attrs.</p>",
                "source": "lib/gcloud/pubsub/project.rb#L490",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "message",
          "metadata": {
            "name": "Message",
            "description": "<h1>Message</h1>  <p>Represents a Pub/Sub Message.</p>  <p>Message objects are created by {Topic#publish}. {Subscription#pull} returns an array of {ReceivedMessage} objects, each of which contains a Message object. Each {ReceivedMessage} object can be acknowledged and/or delayed.</p>",
            "source": "lib/gcloud/pubsub/message.rb#L46",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\n# Publish a message\ntopic = pubsub.topic \"my-topic\"\nmessage = topic.publish \"new-message\"\nputs message.data #=>  \"new-message\"\n\n# Pull a message\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nputs received_message.message.data #=>  \"new-message\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Create an empty Message object. This can be used to publish several messages in bulk.</p>",
                "source": "lib/gcloud/pubsub/message.rb#L54",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Message"],
                  "description": "a new instance of Message"
                }
              ]
            },
            {
              "metadata": {
                "name": "data",
                "description": "<p>The received data.</p>",
                "source": "lib/gcloud/pubsub/message.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "attributes",
                "description": "<p>The received attributes.</p>",
                "source": "lib/gcloud/pubsub/message.rb#L68",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "message_id",
                "description": "<p>The ID of this message, assigned by the server at publication time. Guaranteed to be unique within the topic.</p>",
                "source": "lib/gcloud/pubsub/message.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>as well as expose the API calls.</p>",
            "source": "lib/gcloud/pubsub/connection.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>Returns the value of attribute project</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project=",
                "description": "<p>Sets the attribute project</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute project to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>Returns the value of attribute credentials</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>Sets the attribute credentials</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute credentials to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L32",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "get_topic",
                "description": "<p>Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L47",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_topic",
                "description": "<p>Creates the given topic with the given name.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L56",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_topics",
                "description": "<p>Lists matching topics.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L65",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_topic",
                "description": "<p>Deletes the topic with the given name. All subscriptions to this topic are also deleted. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L82",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_topic_policy",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L89",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "set_topic_policy",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_topic_permissions",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L104",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_subscription",
                "description": "<p>Creates a subscription on a given topic for a given subscriber.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L114",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_subscription",
                "description": "<p>Gets the details of a subscription.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L125",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_subscriptions",
                "description": "<p>Lists matching subscriptions by project.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L135",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_topics_subscriptions",
                "description": "<p>Lists matching subscriptions by project and topic.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L149",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_subscription",
                "description": "<p>Deletes an existing subscription. All pending messages in the subscription are immediately dropped.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L164",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_subscription_policy",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L171",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "set_subscription_policy",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L179",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_subscription_permissions",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L188",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "publish",
                "description": "<p>Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist. The messages parameter is an array of arrays. The first element is the data, second is attributes hash.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L203",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "pull",
                "description": "<p>Pulls a single message from the server.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L216",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "acknowledge",
                "description": "<p>Acknowledges receipt of a message.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L229",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "modify_push_config",
                "description": "<p>Modifies the PushConfig for a specified subscription.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L239",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "modify_ack_deadline",
                "description": "<p>Modifies the ack deadline for a specific message.</p>",
                "source": "lib/gcloud/pubsub/connection.rb#L250",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_path",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L259",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "topic_path",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L264",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "subscription_path",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L269",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L274",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "subscription_data",
                "description": "",
                "source": "lib/gcloud/pubsub/connection.rb#L280",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/pubsub/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "subscription",
          "metadata": {
            "name": "Subscription",
            "description": "<h1>Subscription</h1>  <p>A named resource representing the stream of messages from a single, specific {Topic}, to be delivered to the subscribing application.</p>",
            "source": "lib/gcloud/pubsub/subscription.rb#L38",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.pull\nmsgs.each { |msg| msg.acknowledge! }"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the subscription.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L71",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "topic",
                "description": "<p>The {Topic} from which this subscription receives messages.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L89",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.topic.name #=> \"projects/my-project/topics/my-topic\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Topic"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "deadline",
                "description": "<p>This value is the maximum number of seconds after a subscriber receives a message before the subscriber should acknowledge the message.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L97",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "endpoint",
                "description": "<p>Returns the URL locating the endpoint to which messages should be pushed.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L105",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "endpoint=",
                "description": "<p>Sets the URL locating the endpoint to which messages should be pushed.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L112",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "exists?",
                "description": "<p>Determines whether the subscription exists in the Pub/Sub service.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L134",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.exists? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Deletes an existing subscription. All pending messages in the subscription are immediately dropped.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L178",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.delete"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the subscription was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "pull",
                "description": "<p>Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. Raises an ApiError with status <code>UNAVAILABLE</code> if there are too many concurrent pull requests pending for the given subscription.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L235",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.pull.each { |msg| msg.acknowledge! }"
                  },
                  {
                    "caption": "A maximum number of messages returned can also be specified:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\", max: 10\nsub.pull.each { |msg| msg.acknowledge! }"
                  },
                  {
                    "caption": "The call can block until messages are available:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.pull immediate: false\nmsgs.each { |msg| msg.acknowledge! }"
                  }
                ]
              },
              "params": [
                {
                  "name": "immediate",
                  "types": ["Boolean"],
                  "description": "When <code>true</code> the system will respond immediately even if it is not able to return messages. When <code>false</code> the system is allowed to wait until it can return least one message. No messages are returned when a request times out. The default value is <code>true</code>.",
                  "optional": true,
                  "default": "true",
                  "nullable": false
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of messages to return for this request. The Pub/Sub system may return fewer than the number specified. The default value is <code>100</code>, the maximum value is <code>1000</code>.",
                  "optional": true,
                  "default": "100",
                  "nullable": false
                },
                {
                  "name": "autoack",
                  "types": ["Boolean"],
                  "description": "Automatically acknowledge the message as it is pulled. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Pubsub::ReceivedMessage>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "wait_for_messages",
                "description": "<p>Pulls from the server while waiting for messages to become available. This is the same as:</p>  <p>subscription.pull immediate: false</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L276",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmsgs = sub.wait_for_messages\nmsgs.each { |msg| msg.acknowledge! }"
                  }
                ]
              },
              "params": [
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of messages to return for this request. The Pub/Sub system may return fewer than the number specified. The default value is <code>100</code>, the maximum value is <code>1000</code>.",
                  "optional": true,
                  "default": "100",
                  "nullable": false
                },
                {
                  "name": "autoack",
                  "types": ["Boolean"],
                  "description": "Automatically acknowledge the message as it is pulled. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Pubsub::ReceivedMessage>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "listen",
                "description": "<p>Poll the backend for new messages. This runs a loop to ping the API, blocking indefinitely, yielding retrieved messages as they are received.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L326",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen do |msg|\n  # process msg\nend"
                  },
                  {
                    "caption": "Limit the number of messages pulled per batch with <code>max</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen max: 20 do |msg|\n  # process msg\nend"
                  },
                  {
                    "caption": "Automatically acknowledge messages with <code>autoack</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nsub.listen autoack: true do |msg|\n  # process msg\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of messages to return for this request. The Pub/Sub system may return fewer than the number specified. The default value is <code>100</code>, the maximum value is <code>1000</code>.",
                  "optional": true,
                  "default": "100",
                  "nullable": false
                },
                {
                  "name": "autoack",
                  "types": ["Boolean"],
                  "description": "Automatically acknowledge the message as it is pulled. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                },
                {
                  "name": "delay",
                  "types": ["Number"],
                  "description": "The number of seconds to pause between requests when the Google Cloud service has no messages to return. The default value is <code>1</code>.",
                  "optional": true,
                  "default": "1",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "acknowledge",
                "description": "<p>Acknowledges receipt of a message. After an ack, the Pub/Sub system can remove the message from the subscription. Acknowledging a message whose ack deadline has expired may succeed, although the message may have been sent again. Acknowledging a message more than once will not result in an error. This is only used for messages received via pull.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L358",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmessages = sub.pull\nsub.acknowledge messages"
                  }
                ]
              },
              "params": [
                {
                  "name": "*messages",
                  "types": [
                    "ReceivedMessage",
                    "String"
                  ],
                  "description": "One or more {ReceivedMessage} objects or ack_id values.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delay",
                "description": "<p>Modifies the acknowledge deadline for messages.</p>  <p>This indicates that more time is needed to process the messages, or to make the messages available for redelivery if the processing was interrupted.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L395",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nmessages = sub.pull\nsub.delay 120, messages"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_deadline",
                  "types": ["Integer"],
                  "description": "The new ack deadline in seconds from the time this request is sent to the Pub/Sub system. Must be &gt;= 0. For example, if the value is <code>10</code>, the new ack deadline will expire 10 seconds after the call is made. Specifying <code>0</code> may immediately make the message available for another pull request.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "*messages",
                  "types": [
                    "ReceivedMessage",
                    "String"
                  ],
                  "description": "One or more {ReceivedMessage} objects or ack_id values.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "policy",
                "description": "<p>Gets the access control policy.</p>  <p>By default, the policy values are memoized to reduce the number of API calls to the Pub/Sub service.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L446",
                "resources": [],
                "examples": [
                  {
                    "caption": "Policy values are memoized to reduce the number of API calls:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsubscription = pubsub.subscription \"my-subscription\"\nputs subscription.policy[\"bindings\"]\nputs subscription.policy[\"rules\"]"
                  },
                  {
                    "caption": "Use <code>force</code> to retrieve the latest policy from the service:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsubscription = pubsub.subscription \"my-subscription\"\npolicy = subscription.policy force: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "Force the latest policy to be retrieved from the Pub/Sub service when <code>true</code>. Otherwise the policy will be memoized to reduce the number of API calls made to the Pub/Sub service. The default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Hash"],
                  "description": "Returns a hash that conforms to the following structure:</p>  <p>{   &quot;etag&quot;=&gt;&quot;CAE=&quot;,   &quot;bindings&quot; =&gt; [{     &quot;role&quot; =&gt; &quot;roles/viewer&quot;,     &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]   }] }"
                }
              ]
            },
            {
              "metadata": {
                "name": "policy=",
                "description": "<p>Sets the access control policy.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L485",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nviewer_policy = {\n  \"bindings\" => [{\n    \"role\" => \"roles/viewer\",\n    \"members\" => [\"serviceAccount:your-service-account\"]\n  }]\n}\nsubscription = pubsub.subscription \"my-subscription\"\nsubscription.policy = viewer_policy"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_policy",
                  "types": ["String"],
                  "description": "A hash that conforms to the following structure:</p>  <p>{     &quot;bindings&quot; =&gt; [{       &quot;role&quot; =&gt; &quot;roles/viewer&quot;,       &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]     }]   }",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_permissions",
                "description": "<p>Tests the specified permissions against the <a href=\"https://cloud.google.com/iam/\">Cloud IAM</a> access control policy.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L520",
                "resources": [
                  {
                    "href": "https://cloud.google.com/iam/docs/managing-policies",
                    "title": "Managing Policies"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\nsub = pubsub.subscription \"my-subscription\"\nperms = sub.test_permissions \"projects.subscriptions.list\",\n                             \"projects.subscriptions.pull\"\nperms.include? \"projects.subscriptions.list\" #=> true\nperms.include? \"projects.subscriptions.pull\" #=> false"
                  }
                ]
              },
              "params": [
                {
                  "name": "*permissions",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The set of permissions to check access for. Permissions with wildcards (such as <code>*</code> or <code>storage.*</code>) are not allowed.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<String>"],
                  "description": "The permissions that have access."
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L544",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_gapi!",
                "description": "<p>Ensures a Google API object exists.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L550",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "coerce_ack_ids",
                "description": "<p>Makes sure the values are the <code>ack_id</code>. If given several {ReceivedMessage} objects extract the <code>ack_id</code> values.</p>",
                "source": "lib/gcloud/pubsub/subscription.rb#L564",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "receivedmessage",
          "metadata": {
            "name": "ReceivedMessage",
            "description": "<h1>ReceivedMessage</h1>  <p>Represents a Pub/Sub {Message} that can be acknowledged or delayed.</p>",
            "source": "lib/gcloud/pubsub/received_message.rb#L39",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  received_message.acknowledge!\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "ack_id",
                "description": "<p>The acknowledgment ID for the message.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L57",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "message",
                "description": "<p>The received message.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L63",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data",
                "description": "<p>The received message&#39;s data.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "attributes",
                "description": "<p>The received message&#39;s attributes.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L76",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "message_id",
                "description": "<p>The ID of the received message, assigned by the server at publication time. Guaranteed to be unique within the topic.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L83",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "acknowledge!",
                "description": "<p>Acknowledges receipt of the message.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L104",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  received_message.acknowledge!\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delay!",
                "description": "<p>Modifies the acknowledge deadline for the message.</p>  <p>This indicates that more time is needed to process the message, or to make the message available for redelivery.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L136",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\npubsub = gcloud.pubsub\n\nsub = pubsub.subscription \"my-topic-sub\"\nreceived_message = sub.pull.first\nif received_message\n  puts received_message.message.data\n  # Delay for 2 minutes\n  received_message.delay! 120\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_deadline",
                  "types": ["Integer"],
                  "description": "The new ack deadline in seconds from the time this request is sent to the Pub/Sub system. Must be &gt;= 0. For example, if the value is <code>10</code>, the new ack deadline will expire 10 seconds after the call is made. Specifying <code>0</code> may immediately make the message available for another pull request.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_subscription!",
                "description": "<p>Raise an error unless an active subscription is available.</p>",
                "source": "lib/gcloud/pubsub/received_message.rb#L161",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        }
      ]
    },
    {
      "id": "upload",
      "metadata": {
        "name": "Upload",
        "description": "<h1>Upload Settings</h1>  <p>Upload allows users to configure how files are uploaded to the Google Cloud Service APIs.</p>  <p>require &quot;gcloud/upload&quot;</p>  <p># Set the default threshold to 10 MiB.   Gcloud::Upload.resumable<em>threshold = 10</em>000_000</p>",
        "source": "lib/gcloud/upload.rb#L29",
        "resources": [],
        "examples": []
      },
      "methods": [
        {
          "metadata": {
            "name": "resumable_threshold",
            "description": "<p>Retrieve resumable threshold. If uploads are larger in size than this value then resumable uploads are used.</p>  <p>The default value is 5 MiB (5,000,000 bytes).</p>",
            "source": "lib/gcloud/upload.rb#L36",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "resumable_threshold=",
            "description": "<p>Sets a new resumable threshold value.</p>",
            "source": "lib/gcloud/upload.rb#L42",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        }
      ],
      "pages": []
    },
    {
      "id": "storage",
      "metadata": {
        "name": "Storage",
        "description": "<h1>Google Cloud Storage</h1>  <p>Google Cloud Storage is an Internet service to store data in Google&#39;s cloud. It allows world-wide storage and retrieval of any amount of data and at any time, taking advantage of Google&#39;s own reliable and fast networking infrastructure to perform data operations in a cost effective manner.</p>  <p>Gcloud&#39;s goal is to provide a API that is familiar and comfortable to Rubyists. Authentication is handled by Gcloud#storage. You can provide the project and credential information to connect to the Storage service, or if you are running on Google Compute Engine this configuration is taken care of for you.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new &quot;my-todo-project&quot;,                     &quot;/path/to/keyfile.json&quot; storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-bucket&quot; file = bucket.file &quot;path/to/my-file.ext&quot; ```</p>  <p>You can learn more about various options for connection on the <a href=\"../AUTHENTICATION\">Authentication Guide</a>.</p>  <p>To learn more about Cloud Storage, read the <a href=\"https://cloud.google.com/storage/docs/overview\">Google Cloud Storage Overview </a>.</p>  <h2>Retrieving Buckets</h2>  <p>A Bucket is the container for your data. There is no limit on the number of buckets that you can create in a project. You can use buckets to organize and control access to your data. Each bucket has a unique name, which is how they are retrieved: (See Project#bucket)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; ```</p>  <p>You can also retrieve all buckets on a project: (See Project#buckets)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>all_buckets = storage.buckets ```</p>  <p>If you have a significant number of buckets, you may need to paginate through them: (See Bucket::List#token)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>all<em>buckets = [] tmp</em>buckets = storage.buckets while tmp<em>buckets.any? do   tmp</em>buckets.each do |bucket|     all<em>buckets &lt;&lt; bucket   end   # break loop if no more buckets available   break if tmp</em>buckets.token.nil?   # get the next group of buckets   tmp<em>buckets = storage.buckets token: tmp</em>buckets.token end ```</p>  <h2>Creating a Bucket</h2>  <p>A unique name is all that is needed to create a new bucket: (See Project#create_bucket)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.create_bucket &quot;my-todo-app-attachments&quot; ```</p>  <h2>Retrieving Files</h2>  <p>A File is an individual pieces of data that you store in Google Cloud Storage. Files contain the data stored as well as metadata describing the data. Files belong to a bucket and cannot be shared among buckets. There is no limit on the number of objects that you can create in a bucket.</p>  <p>Files are retrieved by their name, which is the path of the file in the bucket: (See Bucket#file)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot; ```</p>  <p>You can also retrieve all files in a bucket: (See Bucket#files)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; all_files = bucket.files ```</p>  <p>Or you can retrieve all files in a specified path:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; avatar_files = bucket.files prefix: &quot;avatars/&quot; ```</p>  <p>If you have a significant number of files, you may need to paginate through them: (See File::List#token)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot;</p>  <p>all<em>files = [] tmp</em>files = bucket.files while tmp<em>files.any? do   tmp</em>files.each do |file|     all<em>files &lt;&lt; file   end   # break loop if no more files available   break if tmp</em>files.token.nil?   # get the next group of files   tmp<em>files = bucket.files token: tmp</em>files.token end ```</p>  <h2>Creating a File</h2>  <p>A new File can be uploaded by specifying the location of a file on the local file system, and the name/path that the file should be stored in the bucket. (See Bucket#create_file)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; bucket.create_file &quot;/var/todo-app/avatars/heidi/400x400.png&quot;,                    &quot;avatars/heidi/400x400.png&quot; ```</p>  <h3>A note about large uploads</h3>  <p>You may encounter a Broken pipe (Errno::EPIPE) error when attempting to upload large files. To avoid this problem, add the <a href=\"https://rubygems.org/gems/httpclient\">httpclient</a> gem to your project, and the line (or lines) of configuration shown below. These lines must execute after you require gcloud but before you make your first gcloud connection. The first statement configures <a href=\"https://rubygems.org/gems/faraday\">Faraday</a> to use httpclient. The second statement, which should only be added if you are using a version of Faraday at or above 0.9.2, is a workaround for <a href=\"https://github.com/GoogleCloudPlatform/gcloud-ruby/issues/367\">this gzip issue</a>.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <h1>Use httpclient to avoid broken pipe errors with large uploads</h1>  <p>Faraday.default_adapter = :httpclient</p>  <h1>Only add the following statement if using Faraday &gt;= 0.9.2</h1>  <h1>Override gzip middleware with no-op for httpclient</h1>  <p>Faraday::Response.register_middleware :gzip =&gt;                                         Faraday::Response::Middleware</p>  <p>gcloud = Gcloud.new storage = gcloud.storage ```</p>  <h2>Downloading a File</h2>  <p>Files can be downloaded to the local file system. (See File#download)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot; file.download &quot;/var/todo-app/avatars/heidi/400x400.png&quot; ```</p>  <h2>Using Signed URLs</h2>  <p>Access without authentication can be granted to a File for a specified period of time. This URL uses a cryptographic signature of your credentials to access the file. (See File#signed_url)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot; shared<em>url = file.signed</em>url method: &quot;GET&quot;,                              expires: 300 # 5 minutes from now ```</p>  <h2>Controlling Access to a Bucket</h2>  <p>Access to a bucket is controlled with Bucket#acl. A bucket has owners, writers, and readers. Permissions can be granted to an individual user&#39;s email address, a group&#39;s email address, as well as many predefined lists. See the <a href=\"https://cloud.google.com/storage/docs/access-control\">Access Control guide</a> for more.</p>  <p>Access to a bucket can be granted to a user by appending <code>&quot;user-&quot;</code> to the email address:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot;</p>  <p>email = &quot;heidi@example.net&quot; bucket.acl.add_reader &quot;user-#{email}&quot; ```</p>  <p>Access to a bucket can be granted to a group by appending <code>&quot;group-&quot;</code> to the email address:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot;</p>  <p>email = &quot;authors@example.net&quot; bucket.acl.add_reader &quot;group-#{email}&quot; ```</p>  <p>Access to a bucket can also be granted to a predefined list of permissions:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot;</p>  <p>bucket.acl.public! ```</p>  <h2>Controlling Access to a File</h2>  <p>Access to a file is controlled in two ways, either by the setting the default permissions to all files in a bucket with Bucket#default_acl, or by setting permissions to an individual file with File#acl.</p>  <p>Access to a file can be granted to a user by appending <code>&quot;user-&quot;</code> to the email address:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot;</p>  <p>email = &quot;heidi@example.net&quot; file.acl.add_reader &quot;user-#{email}&quot; ```</p>  <p>Access to a file can be granted to a group by appending <code>&quot;group-&quot;</code> to the email address:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot;</p>  <p>email = &quot;authors@example.net&quot; file.acl.add_reader &quot;group-#{email}&quot; ```</p>  <p>Access to a file can also be granted to a predefined list of permissions:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new storage = gcloud.storage</p>  <p>bucket = storage.bucket &quot;my-todo-app&quot; file = bucket.file &quot;avatars/heidi/400x400.png&quot;</p>  <p>file.acl.public! ```</p>",
        "source": "lib/gcloud/storage.rb#L402",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "file",
          "metadata": {
            "name": "File",
            "description": "<h1>File</h1>  <p>Represents a File (<a href=\"https://cloud.google.com/storage/docs/json_api/v1/objects\">Object</a>) that belongs to a {Bucket}. Files (Objects) are the individual pieces of data that you store in Google Cloud Storage. A file can be up to 5 TB in size. Files have two components: data and metadata. The data component is the data from an external file or other data source that you want to store in Google Cloud Storage. The metadata component is a collection of name-value pairs that describe various qualities of the data.</p>",
            "source": "lib/gcloud/storage/file.rb#L49",
            "resources": [
              {
                "href": "https://cloud.google.com/storage/docs/concepts-techniques",
                "title": "Concepts and Techniques"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.download \"/downloads/#{bucket.name}/#{file.name}\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "kind",
                "description": "<p>The kind of item this is. For files, this is always storage#object.</p>",
                "source": "lib/gcloud/storage/file.rb#L68",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "id",
                "description": "<p>The ID of the file.</p>",
                "source": "lib/gcloud/storage/file.rb#L74",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of this file.</p>",
                "source": "lib/gcloud/storage/file.rb#L80",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "bucket",
                "description": "<p>The name of the {Bucket} containing this file.</p>",
                "source": "lib/gcloud/storage/file.rb#L86",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "generation",
                "description": "<p>The content generation of this file. Used for object versioning.</p>",
                "source": "lib/gcloud/storage/file.rb#L93",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "metageneration",
                "description": "<p>The version of the metadata for this file at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular file.</p>",
                "source": "lib/gcloud/storage/file.rb#L102",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "api_url",
                "description": "<p>A URL that can be used to access the file using the REST API.</p>",
                "source": "lib/gcloud/storage/file.rb#L108",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "media_url",
                "description": "<p>A URL that can be used to download the file using the REST API.</p>",
                "source": "lib/gcloud/storage/file.rb#L114",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "size",
                "description": "<p>Content-Length of the data in bytes.</p>",
                "source": "lib/gcloud/storage/file.rb#L120",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>Creation time of the file.</p>",
                "source": "lib/gcloud/storage/file.rb#L126",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "updated_at",
                "description": "<p>The creation or modification time of the file. For buckets with versioning enabled, changing an object&#39;s metadata does not change this property.</p>",
                "source": "lib/gcloud/storage/file.rb#L134",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "md5",
                "description": "<p>MD5 hash of the data; encoded using base64.</p>",
                "source": "lib/gcloud/storage/file.rb#L140",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "crc32c",
                "description": "<p>The CRC32c checksum of the data, as described in <a href=\"http://tools.ietf.org/html/rfc4960#appendix-B\">RFC 4960, Appendix B</a>. Encoded using base64 in big-endian byte order.</p>",
                "source": "lib/gcloud/storage/file.rb#L148",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "etag",
                "description": "<p>HTTP 1.1 Entity tag for the file.</p>",
                "source": "lib/gcloud/storage/file.rb#L154",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "cache_control",
                "description": "<p>The <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Cache-Control</a> directive for the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L161",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "cache_control=",
                "description": "<p>Updates the <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Cache-Control</a> directive for the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L169",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_disposition",
                "description": "<p>The <a href=\"https://tools.ietf.org/html/rfc6266\">Content-Disposition</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L176",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_disposition=",
                "description": "<p>Updates the <a href=\"https://tools.ietf.org/html/rfc6266\">Content-Disposition</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L183",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_encoding",
                "description": "<p>The <a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.2.2\">Content-Encoding </a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L190",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_encoding=",
                "description": "<p>Updates the <a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.2.2\">Content-Encoding </a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L197",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_language",
                "description": "<p>The <a href=\"http://tools.ietf.org/html/bcp47\">Content-Language</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L204",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_language=",
                "description": "<p>Updates the <a href=\"http://tools.ietf.org/html/bcp47\">Content-Language</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L211",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_type",
                "description": "<p>The <a href=\"https://tools.ietf.org/html/rfc2616#section-14.17\">Content-Type</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L218",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "content_type=",
                "description": "<p>Updates the <a href=\"https://tools.ietf.org/html/rfc2616#section-14.17\">Content-Type</a> of the file data.</p>",
                "source": "lib/gcloud/storage/file.rb#L226",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "metadata",
                "description": "<p>A hash of custom, user-provided web-safe keys and arbitrary string values that will returned with requests for the file as &quot;x-goog-meta-&quot; response headers.</p>",
                "source": "lib/gcloud/storage/file.rb#L234",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "metadata=",
                "description": "<p>Updates the hash of custom, user-provided web-safe keys and arbitrary string values that will returned with requests for the file as &quot;x-goog-meta-&quot; response headers.</p>",
                "source": "lib/gcloud/storage/file.rb#L244",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "update",
                "description": "<p>Updates the file with changes made in the given block in a single PATCH request. The following attributes may be set: {#cache<em>control=}, {#content</em>disposition=}, {#content<em>encoding=}, {#content</em>language=}, {#content_type=}, and {#metadata=}. The {#metadata} hash accessible in the block is completely mutable and will be included in the request.</p>",
                "source": "lib/gcloud/storage/file.rb#L275",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\n\nfile.update do |f|\n  f.cache_control = \"private, max-age=0, no-cache\"\n  f.content_disposition = \"inline; filename=filename.ext\"\n  f.content_encoding = \"deflate\"\n  f.content_language = \"de\"\n  f.content_type = \"application/json\"\n  f.metadata[\"player\"] = \"Bob\"\n  f.metadata[\"score\"] = \"10\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "download",
                "description": "<p>Download the file&#39;s contents to a local file.</p>  <p>By default, the download is verified by calculating the MD5 digest.</p>",
                "source": "lib/gcloud/storage/file.rb#L343",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.download \"path/to/downloaded/file.ext\""
                  },
                  {
                    "caption": "Use the CRC32c digest by passing :crc32c.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.download \"path/to/downloaded/file.ext\", verify: :crc32c"
                  },
                  {
                    "caption": "Use the MD5 and CRC32c digests by passing :all.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.download \"path/to/downloaded/file.ext\", verify: :all"
                  },
                  {
                    "caption": "Disable the download verification by passing :none.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.download \"path/to/downloaded/file.ext\", verify: :none"
                  }
                ]
              },
              "params": [
                {
                  "name": "path",
                  "types": ["String"],
                  "description": "The path on the local file system to write the data to. The path provided must be writable.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "verify",
                  "types": ["Symbol"],
                  "description": "The verification algoruthm used to ensure the downloaded file contents are correct. Default is <code>:md5</code>.</p>  <p>Acceptable values are: * <code>md5</code> - Verify file content match using the MD5 hash. * <code>crc32c</code> - Verify file content match using the CRC32c hash. * <code>all</code> - Perform all available file content verification. * <code>none</code> - Don&#39;t perform file content verification.",
                  "optional": true,
                  "default": ":md5",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["File"],
                  "description": "Returns a <code>::File</code> object on the local file system"
                }
              ]
            },
            {
              "metadata": {
                "name": "copy",
                "description": "<p>Copy the file to a new location.</p>",
                "source": "lib/gcloud/storage/file.rb#L412",
                "resources": [],
                "examples": [
                  {
                    "caption": "The file can be copied to a new path in the current bucket:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.copy \"path/to/destination/file.ext\""
                  },
                  {
                    "caption": "The file can also be copied to a different bucket:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.copy \"new-destination-bucket\",\n          \"path/to/destination/file.ext\""
                  },
                  {
                    "caption": "The file can also be copied by specifying a generation:",
                    "code": "file.copy \"copy/of/previous/generation/file.ext\",\n          generation: 123456"
                  }
                ]
              },
              "params": [
                {
                  "name": "dest_bucket_or_path",
                  "types": ["String"],
                  "description": "Either the bucket to copy the file to, or the path to copy the file to in the current bucket.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "dest_path",
                  "types": ["String"],
                  "description": "If a bucket was provided in the first parameter, this contains the path to copy the file to in the given bucket.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "acl",
                  "types": ["String"],
                  "description": "A predefined set of access controls to apply to new file.</p>  <p>Acceptable values are: * <code>auth</code>, <code>auth_read</code>, <code>authenticated</code>, <code>authenticated_read</code>,   <code>authenticatedRead</code> - File owner gets OWNER access, and   allAuthenticatedUsers get READER access. * <code>owner_full</code>, <code>bucketOwnerFullControl</code> - File owner gets OWNER   access, and project team owners get OWNER access. * <code>owner_read</code>, <code>bucketOwnerRead</code> - File owner gets OWNER access, and   project team owners get READER access. * <code>private</code> - File owner gets OWNER access. * <code>project_private</code>, <code>projectPrivate</code> - File owner gets OWNER access,   and project team members get access according to their roles. * <code>public</code>, <code>public_read</code>, <code>publicRead</code> - File owner gets OWNER   access, and allUsers get READER access.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "generation",
                  "types": ["Integer"],
                  "description": "Select a specific revision of the file to copy. The default is the latest version.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Storage::File"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the file.</p>",
                "source": "lib/gcloud/storage/file.rb#L443",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nfile.delete"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the file was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "public_url",
                "description": "<p>Public URL to access the file. If the file is not public, requests to the URL will return an error. (See {File::Acl#public!} and {Bucket::DefaultAcl#public!}) To share a file that is not public see {#signed_url}.</p>",
                "source": "lib/gcloud/storage/file.rb#L485",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-public-data",
                    "title": "Accessing Public Data"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\npublic_url = file.public_url"
                  },
                  {
                    "caption": "Generate the URL with a protocol other than HTTPS:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\npublic_url = file.public_url protocol: \"http\""
                  }
                ]
              },
              "params": [
                {
                  "name": "protocol",
                  "types": ["String"],
                  "description": "The protocol to use for the URL. Default is <code>HTTPS</code>.",
                  "optional": true,
                  "default": ":https",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "signed_url",
                "description": "<p>Access without authentication can be granted to a File for a specified period of time. This URL uses a cryptographic signature of your credentials to access the file.</p>  <p>Generating a URL requires service account credentials, either by connecting with a service account when calling {Gcloud.storage}, or by passing in the service account <code>issuer</code> and <code>signing_key</code> values. Although the private key can be passed as a string for convenience, creating and storing an instance of <code>OpenSSL::PKey::RSA</code> is more efficient when making multiple calls to <code>signed_url</code>.</p>  <p>A SignedUrlUnavailable is raised if the service account credentials are missing. Service account credentials are acquired by following the steps in <a href=\"https://cloud.google.com/storage/docs/authentication#service_accounts\">Service Account Authentication</a>.</p>",
                "source": "lib/gcloud/storage/file.rb#L559",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-control#Signed-URLs",
                    "title": "Access Control Signed URLs guide"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\nshared_url = file.signed_url"
                  },
                  {
                    "caption": "Any of the option parameters may be specified:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\nshared_url = file.signed_url method: \"GET\",\n                             expires: 300 # 5 minutes from now"
                  },
                  {
                    "caption": "Using the <code>issuer</code> and <code>signing_key</code> options:",
                    "code": "require \"gcloud/storage\"\n\nstorage = Gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\nkey = OpenSSL::PKey::RSA.new \"-----BEGIN PRIVATE KEY-----\\n...\"\nshared_url = file.signed_url issuer: \"service-account@gcloud.com\",\n                             signing_key: key"
                  }
                ]
              },
              "params": [
                {
                  "name": "method",
                  "types": ["String"],
                  "description": "The HTTP verb to be used with the signed URL. Signed URLs can be used with <code>GET</code>, <code>HEAD</code>, <code>PUT</code>, and <code>DELETE</code> requests. Default is <code>GET</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "expires",
                  "types": ["Integer"],
                  "description": "The number of seconds until the URL expires. Default is 300/5 minutes.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_type",
                  "types": ["String"],
                  "description": "When provided, the client (browser) must send this value in the HTTP header. e.g. <code>text/plain</code>",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_md5",
                  "types": ["String"],
                  "description": "The MD5 digest value in base64. If you provide this in the string, the client (usually a browser) must provide this HTTP header with this same value in its request.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "issuer",
                  "types": ["String"],
                  "description": "Service Account&#39;s Client Email.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "client_email",
                  "types": ["String"],
                  "description": "Service Account&#39;s Client Email.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "signing_key",
                  "types": [
                    "OpenSSL::PKey::RSA",
                    "String"
                  ],
                  "description": "Service Account&#39;s Private Key.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "private_key",
                  "types": [
                    "OpenSSL::PKey::RSA",
                    "String"
                  ],
                  "description": "Service Account&#39;s Private Key.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "acl",
                "description": "<p>The {File::Acl} instance used to control access to the file.</p>  <p>A file has owners, writers, and readers. Permissions can be granted to an individual user&#39;s email address, a group&#39;s email address,  as well as many predefined lists.</p>",
                "source": "lib/gcloud/storage/file.rb#L616",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-control",
                    "title": "Access Control guide"
                  }
                ],
                "examples": [
                  {
                    "caption": "Grant access to a user by pre-pending <code>&quot;user-&quot;</code> to an email:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nemail = \"heidi@example.net\"\nfile.acl.add_reader \"user-#{email}\""
                  },
                  {
                    "caption": "Grant access to a group by pre-pending <code>&quot;group-&quot;</code> to an email:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nemail = \"authors@example.net\"\nfile.acl.add_reader \"group-#{email}\""
                  },
                  {
                    "caption": "Or, grant access via a predefined permissions list:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nfile = bucket.file \"avatars/heidi/400x400.png\"\n\nfile.acl.public!"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the file with current data from the Storage service.</p>",
                "source": "lib/gcloud/storage/file.rb#L622",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/storage/file.rb#L653",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_gapi!",
                "description": "",
                "source": "lib/gcloud/storage/file.rb#L657",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fix_copy_args",
                "description": "",
                "source": "lib/gcloud/storage/file.rb#L667",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "verify_file!",
                "description": "",
                "source": "lib/gcloud/storage/file.rb#L681",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "bucket",
          "metadata": {
            "name": "Bucket",
            "description": "<h1>Bucket</h1>  <p>Represents a Storage bucket. Belongs to a Project and has many Files.</p>",
            "source": "lib/gcloud/storage/bucket.rb#L38",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "kind",
                "description": "<p>The kind of item this is. For buckets, this is always <code>storage#bucket</code>.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L57",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "id",
                "description": "<p>The ID of the bucket.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L63",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the bucket.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L69",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "api_url",
                "description": "<p>A URL that can be used to access the bucket using the REST API.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L75",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>Creation time of the bucket.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "cors",
                "description": "<p>Returns the current CORS configuration for a static website served from the bucket.</p>  <p>The return value is a frozen (unmodifiable) array of hashes containing the attributes specified for the Bucket resource field <a href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets#cors\">cors</a>.</p>  <p>This method also accepts a block for updating the bucket&#39;s CORS rules. See {Bucket::Cors} for details.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L127",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/cross-origin",
                    "title": "Cross-Origin Resource Sharing (CORS)"
                  }
                ],
                "examples": [
                  {
                    "caption": "Retrieving the bucket&#39;s CORS rules.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\nbucket.cors #=> [{\"origin\"=>[\"http://example.org\"],\n            #     \"method\"=>[\"GET\",\"POST\",\"DELETE\"],\n            #     \"responseHeader\"=>[\"X-My-Custom-Header\"],\n            #     \"maxAgeSeconds\"=>3600}]"
                  },
                  {
                    "caption": "Updating the bucket&#39;s CORS rules inside a block.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\nbucket = storage.bucket \"my-todo-app\"\n\nbucket.update do |b|\n  b.cors do |c|\n    c.add_rule [\"http://example.org\", \"https://example.org\"],\n               \"*\",\n               response_headers: [\"X-My-Custom-Header\"],\n               max_age: 3600\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "cors=",
                "description": "<p>Updates the CORS configuration for a static website served from the bucket.</p>  <p>Accepts an array of hashes containing the attributes specified for the <a href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets#cors\">resource description of cors</a>.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L146",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/cross-origin",
                    "title": "Cross-Origin Resource Sharing (CORS)"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "location",
                "description": "<p>The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer&#39;s guide for the authoritative list.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L157",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/concepts-techniques",
                    "title": null
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "logging_bucket",
                "description": "<p>The destination bucket name for the bucket&#39;s logs.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L166",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-logs",
                    "title": "Access Logs"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "logging_bucket=",
                "description": "<p>Updates the destination bucket for the bucket&#39;s logs.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L177",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-logs",
                    "title": "Access Logs"
                  }
                ],
                "examples": []
              },
              "params": [
                {
                  "name": "logging_bucket",
                  "types": ["String"],
                  "description": "The bucket to hold the logging output",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "logging_prefix",
                "description": "<p>The logging object prefix for the bucket&#39;s logs. For more information,</p>",
                "source": "lib/gcloud/storage/bucket.rb#L186",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-logs",
                    "title": "Access Logs"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "logging_prefix=",
                "description": "<p>Updates the logging object prefix. This prefix will be used to create log object names for the bucket. It can be at most 900 characters and must be a <a href=\"https://cloud.google.com/storage/docs/bucket-naming#objectnames\">valid object name</a>. By default, the object prefix is the name of the bucket for which the logs are enabled.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L200",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-logs",
                    "title": "Access Logs"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "storage_class",
                "description": "<p>The bucket&#39;s storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include <code>STANDARD</code>, <code>NEARLINE</code>, and <code>DURABLE_REDUCED_AVAILABILITY</code>.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L208",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "versioning?",
                "description": "<p>Whether <a href=\"https://cloud.google.com/storage/docs/object-versioning\">Object Versioning</a> is enabled for the bucket.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L216",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "versioning=",
                "description": "<p>Updates whether <a href=\"https://cloud.google.com/storage/docs/object-versioning\">Object Versioning</a> is enabled for the bucket.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L227",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "website_main",
                "description": "<p>The index page returned from a static website served from the bucket when a site visitor requests the top level directory.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L238",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/website-configuration#step4",
                    "title": "How to Host a Static Website"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "website_main=",
                "description": "<p>Updates the index page returned from a static website served from the bucket when a site visitor requests the top level directory.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L249",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/website-configuration#step4",
                    "title": "How to Host a Static Website"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "website_404",
                "description": "<p>The page returned from a static website served from the bucket when a site visitor requests a resource that does not exist.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L260",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/website-configuration#step4",
                    "title": "How to Host a Static Website"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "website_404=",
                "description": "<p>Updates the page returned from a static website served from the bucket when a site visitor requests a resource that does not exist.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L271",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/website-configuration#step4",
                    "title": "How to Host a Static Website"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "update",
                "description": "<p>Updates the bucket with changes made in the given block in a single PATCH request. The following attributes may be set: {#cors=}, {#logging<em>bucket=}, {#logging</em>prefix=}, {#versioning=}, {#website<em>main=}, and {#website</em>404=}. In addition, the #cors configuration accessible in the block is completely mutable and will be included in the request. (See {Bucket::Cors})</p>",
                "source": "lib/gcloud/storage/bucket.rb#L313",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nbucket.update do |b|\n  b.website_main = \"index.html\"\n  b.website_404 = \"not_found.html\"\n  b.cors[0][\"method\"] = [\"GET\",\"POST\",\"DELETE\"]\n  b.cors[1][\"responseHeader\"] << \"X-Another-Custom-Header\"\nend"
                  },
                  {
                    "caption": "New CORS rules can also be added in a nested block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\nbucket = storage.bucket \"my-todo-app\"\n\nbucket.update do |b|\n  b.cors do |c|\n    c.add_rule [\"http://example.org\", \"https://example.org\"],\n               \"*\",\n               response_headers: [\"X-My-Custom-Header\"],\n               max_age: 300\n  end\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the bucket. The bucket must be empty before it can be deleted.</p>  <p>The API call to delete the bucket may be retried under certain conditions. See {Gcloud::Backoff} to control this behavior, or specify the wanted behavior using the <code>retries</code> option.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L350",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nbucket.delete"
                  },
                  {
                    "caption": "Specify the number of retries to attempt:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nbucket.delete retries: 5"
                  }
                ]
              },
              "params": [
                {
                  "name": "retries",
                  "types": ["Integer"],
                  "description": "The number of times the API call should be retried. Default is Gcloud::Backoff.retries.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the bucket was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "files",
                "description": "<p>Retrieves a list of files matching the criteria.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L411",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nfiles = bucket.files\nfiles.each do |file|\n  puts file.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {File::List#token})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nall_files = []\ntmp_files = bucket.files\nwhile tmp_files.any? do\n  tmp_files.each do |file|\n    all_files << file\n  end\n  # break loop if no more buckets available\n  break if tmp_files.token.nil?\n  # get the next group of files\n  tmp_files = bucket.files token: tmp_files.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "prefix",
                  "types": ["String"],
                  "description": "Filter results to files whose names begin with this prefix.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of items plus prefixes to return. As duplicate prefixes are omitted, fewer total results may be returned than requested. The default value of this parameter is 1,000 items.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "versions",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, lists all versions of an object as distinct results. The default is <code>false</code>. For more information, see <a href=\"https://cloud.google.com/storage/docs/object-versioning\">Object Versioning </a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Storage::File>"],
                  "description": "(See {Gcloud::Storage::File::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "file",
                "description": "<p>Retrieves a file matching the path.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L443",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nfile = bucket.file \"path/to/my-file.ext\"\nputs file.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "path",
                  "types": ["String"],
                  "description": "Name (path) of the file.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "generation",
                  "types": ["Integer"],
                  "description": "When present, selects a specific revision of this object. Default is the latest version.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Storage::File",
                    "nil"
                  ],
                  "description": "Returns nil if file does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "create_file",
                "description": "<p>Create a new File object by providing a path to a local file to upload and the path to store it with in the bucket.</p>  <p>A <code>chunk_size</code> value can be provided in the options to be used in resumable uploads. This value is the number of bytes per chunk and must be divisible by 256KB. If it is not divisible by 256KB then it will be lowered to the nearest acceptable value.</p>  <h4>Troubleshooting large uploads</h4>  <p>You may encounter errors while attempting to upload large files. Below are a couple of common cases and their solutions.</p>  <h5>Handling memory errors</h5>  <p>If you encounter a memory error such as <code>NoMemoryError</code>, try performing a resumable upload and setting the <code>chunk_size</code> option to a value that works for your environment, as explained in the final example above.</p>  <h5>Handling broken pipe errors</h5>  <p>To avoid broken pipe (<code>Errno::EPIPE</code>) errors when uploading, add the <a href=\"https://rubygems.org/gems/httpclient\">httpclient</a> gem to your project, and the configuration shown below. These lines must execute after you require gcloud but before you make your first gcloud connection. The first statement configures <a href=\"https://rubygems.org/gems/faraday\">Faraday</a> to use httpclient. The second statement, which should only be added if you are using a version of Faraday at or above 0.9.2, is a workaround for <a href=\"https://github.com/GoogleCloudPlatform/gcloud-ruby/issues/367\">this gzip issue</a>.</p>  <p>require &quot;gcloud&quot;</p>  <p># Use httpclient to avoid broken pipe errors with large uploads   Faraday.default_adapter = :httpclient</p>  <p># Only add the following statement if using Faraday &gt;= 0.9.2   # Override gzip middleware with no-op for httpclient   Faraday::Response.register_middleware :gzip =&gt;                                           Faraday::Response::Middleware</p>  <p>gcloud = Gcloud.new   storage = gcloud.storage</p>",
                "source": "lib/gcloud/storage/bucket.rb#L588",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nbucket.create_file \"path/to/local.file.ext\""
                  },
                  {
                    "caption": "Additionally, a destination path can be specified.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nbucket.create_file \"path/to/local.file.ext\",\n                   \"destination/path/file.ext\""
                  },
                  {
                    "caption": "Specify the chunk size as a number of bytes:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\n\nbucket.create_file \"path/to/local.file.ext\",\n                   \"destination/path/file.ext\",\n                   chunk_size: 1024*1024 # 1 MB chunk"
                  }
                ]
              },
              "params": [
                {
                  "name": "file",
                  "types": ["String"],
                  "description": "Path of the file on the filesystem to upload.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "path",
                  "types": ["String"],
                  "description": "Path to store the file in Google Cloud Storage.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "acl",
                  "types": ["String"],
                  "description": "A predefined set of access controls to apply to this file.</p>  <p>Acceptable values are: * <code>auth</code>, <code>auth_read</code>, <code>authenticated</code>, <code>authenticated_read</code>,   <code>authenticatedRead</code> - File owner gets OWNER access, and   allAuthenticatedUsers get READER access. * <code>owner_full</code>, <code>bucketOwnerFullControl</code> - File owner gets OWNER   access, and project team owners get OWNER access. * <code>owner_read</code>, <code>bucketOwnerRead</code> - File owner gets OWNER access, and   project team owners get READER access. * <code>private</code> - File owner gets OWNER access. * <code>project_private</code>, <code>projectPrivate</code> - File owner gets OWNER access,   and project team members get access according to their roles. * <code>public</code>, <code>public_read</code>, <code>publicRead</code> - File owner gets OWNER   access, and allUsers get READER access.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "cache_control",
                  "types": ["String"],
                  "description": "The <a href=\"https://tools.ietf.org/html/rfc7234#section-5.2\">Cache-Control</a> response header to be returned when the file is downloaded.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_disposition",
                  "types": ["String"],
                  "description": "The <a href=\"https://tools.ietf.org/html/rfc6266\">Content-Disposition</a> response header to be returned when the file is downloaded.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_encoding",
                  "types": ["String"],
                  "description": "The <a href=\"https://tools.ietf.org/html/rfc7231#section-3.1.2.2\">Content-Encoding </a> response header to be returned when the file is downloaded.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_language",
                  "types": ["String"],
                  "description": "The <a href=\"http://tools.ietf.org/html/bcp47\">Content-Language</a> response header to be returned when the file is downloaded.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "content_type",
                  "types": ["String"],
                  "description": "The <a href=\"https://tools.ietf.org/html/rfc2616#section-14.17\">Content-Type</a> response header to be returned when the file is downloaded.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "chunk_size",
                  "types": ["Integer"],
                  "description": "The number of bytes per chunk in a resumable upload. Must be divisible by 256KB. If it is not divisible by 265KB then it will be lowered to the nearest acceptable value.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "crc32c",
                  "types": ["String"],
                  "description": "The CRC32c checksum of the file data, as described in <a href=\"http://tools.ietf.org/html/rfc4960#appendix-B\">RFC 4960, Appendix B</a>. If provided, Cloud Storage will only create the file if the value matches the value calculated by the service. See <a href=\"https://cloud.google.com/storage/docs/hashes-etags\">Validation</a> for more information.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "md5",
                  "types": ["String"],
                  "description": "The MD5 hash of the file data. If provided, Cloud Storage will only create the file if the value matches the value calculated by the service. See <a href=\"https://cloud.google.com/storage/docs/hashes-etags\">Validation</a> for more information.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "metadata",
                  "types": ["Hash"],
                  "description": "A hash of custom, user-provided web-safe keys and arbitrary string values that will returned with requests for the file as &quot;x-goog-meta-&quot; response headers.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Storage::File"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "acl",
                "description": "<p>The Bucket::Acl instance used to control access to the bucket.</p>  <p>A bucket has owners, writers, and readers. Permissions can be granted to an individual user&#39;s email address, a group&#39;s email address, as well as many predefined lists.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L650",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-control",
                    "title": "Access Control guide"
                  }
                ],
                "examples": [
                  {
                    "caption": "Grant access to a user by pre-pending <code>&quot;user-&quot;</code> to an email:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"heidi@example.net\"\nbucket.acl.add_reader \"user-#{email}\""
                  },
                  {
                    "caption": "Grant access to a group by pre-pending <code>&quot;group-&quot;</code> to an email:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"authors@example.net\"\nbucket.acl.add_reader \"group-#{email}\""
                  },
                  {
                    "caption": "Or, grant access via a predefined permissions list:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nbucket.acl.public!"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_acl",
                "description": "<p>The Bucket::DefaultAcl instance used to control access to the bucket&#39;s files.</p>  <p>A bucket&#39;s files have owners, writers, and readers. Permissions can be granted to an individual user&#39;s email address, a group&#39;s email address, as well as many predefined lists.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L697",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/access-control",
                    "title": "Access Control guide"
                  }
                ],
                "examples": [
                  {
                    "caption": "Grant access to a user by pre-pending <code>&quot;user-&quot;</code> to an email:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"heidi@example.net\"\nbucket.default_acl.add_reader \"user-#{email}\""
                  },
                  {
                    "caption": "Grant access to a group by pre-pending <code>&quot;group-&quot;</code> to an email",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nemail = \"authors@example.net\"\nbucket.default_acl.add_reader \"group-#{email}\""
                  },
                  {
                    "caption": "Or, grant access via a predefined permissions list:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-todo-app\"\n\nbucket.default_acl.public!"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the bucket with current data from the Storage service.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L703",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L727",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_gapi!",
                "description": "",
                "source": "lib/gcloud/storage/bucket.rb#L731",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_file_exists!",
                "description": "<p>Raise an error if the file is not found.</p>",
                "source": "lib/gcloud/storage/bucket.rb#L743",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "deep_dup_and_freeze",
                "description": "<p>Given nil, empty array, a gapi array of hashes, or any value, returns a deeply dup&#39;d and frozen array of simple hashes or values (not gapi objects.)</p>",
                "source": "lib/gcloud/storage/bucket.rb#L758",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<h1>Storage Error</h1>  <p>Base Storage exception class.</p>",
            "source": "lib/gcloud/storage/errors.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<h1>ApiError</h1>  <p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/storage/errors.rb#L31",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/storage/errors.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/storage/errors.rb#L38",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "",
                "source": "lib/gcloud/storage/errors.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["ApiError"],
                  "description": "a new instance of ApiError"
                }
              ]
            }
          ]
        },
        {
          "id": "fileverificationerror",
          "metadata": {
            "name": "FileVerificationError",
            "description": "<h1>FileVerificationError</h1>  <p>Raised when a File download fails the verification.</p>",
            "source": "lib/gcloud/storage/errors.rb#L58",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "type",
                "description": "<p>The type of digest that failed verification, :md5 or :crc32c.</p>",
                "source": "lib/gcloud/storage/errors.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "type=",
                "description": "<p>The type of digest that failed verification, :md5 or :crc32c.</p>",
                "source": "lib/gcloud/storage/errors.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "gcloud_digest",
                "description": "<p>The value of the digest on the Gcloud file.</p>",
                "source": "lib/gcloud/storage/errors.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "gcloud_digest=",
                "description": "<p>The value of the digest on the Gcloud file.</p>",
                "source": "lib/gcloud/storage/errors.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "local_digest",
                "description": "<p>The value of the digest on the downloaded file.</p>",
                "source": "lib/gcloud/storage/errors.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "local_digest=",
                "description": "<p>The value of the digest on the downloaded file.</p>",
                "source": "lib/gcloud/storage/errors.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "signedurlunavailable",
          "metadata": {
            "name": "SignedUrlUnavailable",
            "description": "<h1>SignedUrlUnavailable Error</h1>  <p>This is raised when File#signed_url is unable to generate a URL due to missing credentials needed to create the URL.</p>",
            "source": "lib/gcloud/storage/errors.rb#L96",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>Represents the project that storage buckets and files belong to. All data in Google Cloud Storage belongs inside a project. A project consists of a set of users, a set of APIs, billing, authentication, and monitoring settings for those APIs.</p>  <p>Gcloud::Storage::Project is the main object for interacting with Google Storage. {Gcloud::Storage::Bucket} objects are created, read, updated, and deleted by Gcloud::Storage::Project.</p>  <p>See {Gcloud#storage}</p>",
            "source": "lib/gcloud/storage/project.rb#L49",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"path/to/my-file.ext\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>The Storage project connected to.</p>",
                "source": "lib/gcloud/storage/project.rb#L76",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\nstorage = gcloud.storage\n\nstorage.project #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "buckets",
                "description": "<p>Retrieves a list of buckets for the given project.</p>",
                "source": "lib/gcloud/storage/project.rb#L138",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbuckets = storage.buckets\nbuckets.each do |bucket|\n  puts bucket.name\nend"
                  },
                  {
                    "caption": "Retrieve all buckets with names that begin with a given prefix:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nuser_buckets = storage.buckets prefix: \"user-\""
                  },
                  {
                    "caption": "With pagination: (See {Bucket::List#token})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nall_buckets = []\ntmp_buckets = storage.buckets\nwhile tmp_buckets.any? do\n  tmp_buckets.each do |bucket|\n    all_buckets << bucket\n  end\n  # break loop if no more buckets available\n  break if tmp_buckets.token.nil?\n  # get the next group of buckets\n  tmp_buckets = storage.buckets token: tmp_buckets.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "prefix",
                  "types": ["String"],
                  "description": "Filter results to buckets whose names begin with this prefix.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of buckets to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Storage::Bucket>"],
                  "description": "(See {Gcloud::Storage::Bucket::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "bucket",
                "description": "<p>Retrieves bucket by name.</p>",
                "source": "lib/gcloud/storage/project.rb#L166",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.bucket \"my-bucket\"\nputs bucket.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "bucket_name",
                  "types": ["String"],
                  "description": "Name of a bucket.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Storage::Bucket",
                    "nil"
                  ],
                  "description": "Returns nil if bucket does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "create_bucket",
                "description": "<p>Creates a new bucket with optional attributes. Also accepts a block for defining the CORS configuration for a static website served from the bucket. See {Bucket::Cors} for details.</p>  <p>The API call to create the bucket may be retried under certain conditions. See {Gcloud::Backoff} to control this behavior, or specify the wanted behavior in the call with the <code>:retries:</code> option.</p>  <p>You can pass <a href=\"https://cloud.google.com/storage/docs/website-configuration\">website settings</a> for the bucket, including a block that defines CORS rule. See {Bucket::Cors} for details.</p>",
                "source": "lib/gcloud/storage/project.rb#L304",
                "resources": [
                  {
                    "href": "https://cloud.google.com/storage/docs/cross-origin",
                    "title": "Cross-Origin Resource Sharing (CORS)"
                  },
                  {
                    "href": "https://cloud.google.com/storage/docs/website-configuration",
                    "title": "How to Host a Static Website"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.create_bucket \"my-bucket\""
                  },
                  {
                    "caption": "Specify the number of retries to attempt:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\nbucket = storage.create_bucket \"my-bucket\", retries: 5"
                  },
                  {
                    "caption": "Add CORS rules in a block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nstorage = gcloud.storage\n\noptions = {\n  website_main: \"index.html\"\n  website_404: \"not_found.html\"\n}\nbucket = storage.create_bucket \"my-bucket\", options do |c|\n  c.add_rule [\"http://example.org\", \"https://example.org\"],\n             \"*\",\n             response_headers: [\"X-My-Custom-Header\"],\n             max_age: 300\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "bucket_name",
                  "types": ["String"],
                  "description": "Name of a bucket.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "acl",
                  "types": ["String"],
                  "description": "Apply a predefined set of access controls to this bucket.</p>  <p>Acceptable values are: * <code>auth</code>, <code>auth_read</code>, <code>authenticated</code>, <code>authenticated_read</code>,   <code>authenticatedRead</code> - Project team owners get OWNER access, and   allAuthenticatedUsers get READER access. * <code>private</code> - Project team owners get OWNER access. * <code>project_private</code>, <code>projectPrivate</code> - Project team members get   access according to their roles. * <code>public</code>, <code>public_read</code>, <code>publicRead</code> - Project team owners get   OWNER access, and allUsers get READER access. * <code>public_write</code>, <code>publicReadWrite</code> - Project team owners get OWNER   access, and allUsers get WRITER access.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "default_acl",
                  "types": ["String"],
                  "description": "Apply a predefined set of default object access controls to this bucket.</p>  <p>Acceptable values are: * <code>auth</code>, <code>auth_read</code>, <code>authenticated</code>, <code>authenticated_read</code>,   <code>authenticatedRead</code> - File owner gets OWNER access, and   allAuthenticatedUsers get READER access. * <code>owner_full</code>, <code>bucketOwnerFullControl</code> - File owner gets OWNER   access, and project team owners get OWNER access. * <code>owner_read</code>, <code>bucketOwnerRead</code> - File owner gets OWNER access, and   project team owners get READER access. * <code>private</code> - File owner gets OWNER access. * <code>project_private</code>, <code>projectPrivate</code> - File owner gets OWNER access,   and project team members get access according to their roles. * <code>public</code>, <code>public_read</code>, <code>publicRead</code> - File owner gets OWNER   access, and allUsers get READER access.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "cors",
                  "types": ["String"],
                  "description": "The CORS rules for the bucket. Accepts an array of hashes containing the attributes specified for the <a href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets#cors\">resource description of cors</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "location",
                  "types": ["String"],
                  "description": "The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Possible values include <code>ASIA</code>, <code>EU</code>, and <code>US</code>. (See the <a href=\"https://cloud.google.com/storage/docs/bucket-locations\">developer&#39;s guide</a> for the authoritative list. The default value is <code>US</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "logging_bucket",
                  "types": ["String"],
                  "description": "The destination bucket for the bucket&#39;s logs. For more information, see <a href=\"https://cloud.google.com/storage/docs/access-logs\">Access Logs</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "logging_prefix",
                  "types": ["String"],
                  "description": "The prefix used to create log object names for the bucket. It can be at most 900 characters and must be a <a href=\"https://cloud.google.com/storage/docs/bucket-naming#objectnames\">valid object name</a> . By default, the object prefix is the name of the bucket for which the logs are enabled. For more information, see <a href=\"https://cloud.google.com/storage/docs/access-logs\">Access Logs</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "retries",
                  "types": ["Integer"],
                  "description": "The number of times the API call should be retried. Default is {Gcloud::Backoff.retries}.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "storage_class",
                  "types": [
                    "Symbol",
                    "String"
                  ],
                  "description": "Defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include <code>:standard</code>, <code>:nearline</code>, and <code>:dra</code> (Durable Reduced Availability), as well as the strings returned by Bucket#storage_class. For more information, see <a href=\"https://cloud.google.com/storage/docs/storage-classes\">Storage Classes</a>. The default value is <code>:standard</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "versioning",
                  "types": ["Boolean"],
                  "description": "Whether <a href=\"https://cloud.google.com/storage/docs/object-versioning\">Object Versioning</a> is to be enabled for the bucket. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "website_main",
                  "types": ["String"],
                  "description": "The index page returned from a static website served from the bucket when a site visitor requests the top level directory. For more information, see <a href=\"https://cloud.google.com/storage/docs/website-configuration#step4\">How to Host a Static Website </a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "website_404",
                  "types": ["String"],
                  "description": "The page returned from a static website served from the bucket when a site visitor requests a resource that does not exist. For more information, see <a href=\"https://cloud.google.com/storage/docs/website-configuration#step4\">How to Host a Static Website </a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Storage::Bucket"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "acl_rule",
                "description": "",
                "source": "lib/gcloud/storage/project.rb#L323",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_bucket",
                "description": "",
                "source": "lib/gcloud/storage/project.rb#L327",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>as well as expose the API calls.</p>",
            "source": "lib/gcloud/storage/connection.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>Returns the value of attribute project</p>",
                "source": "lib/gcloud/storage/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project=",
                "description": "<p>Sets the attribute project</p>",
                "source": "lib/gcloud/storage/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute project to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/storage/connection.rb#L37",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "list_buckets",
                "description": "<p>Retrieves a list of buckets for the given project.</p>",
                "source": "lib/gcloud/storage/connection.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_bucket",
                "description": "<p>Retrieves bucket by name.</p>",
                "source": "lib/gcloud/storage/connection.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_bucket",
                "description": "<p>Creates a new bucket.</p>",
                "source": "lib/gcloud/storage/connection.rb#L71",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_bucket",
                "description": "<p>Updates a bucket, including its ACL metadata.</p>",
                "source": "lib/gcloud/storage/connection.rb#L87",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_bucket",
                "description": "<p>Permanently deletes an empty bucket.</p>",
                "source": "lib/gcloud/storage/connection.rb#L102",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_bucket_acls",
                "description": "<p>Retrieves a list of ACLs for the given bucket.</p>",
                "source": "lib/gcloud/storage/connection.rb#L113",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_bucket_acl",
                "description": "<p>Creates a new bucket ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L122",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_bucket_acl",
                "description": "<p>Permanently deletes a bucket ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L132",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_default_acls",
                "description": "<p>Retrieves a list of default ACLs for the given bucket.</p>",
                "source": "lib/gcloud/storage/connection.rb#L141",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_default_acl",
                "description": "<p>Creates a new default ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L150",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_default_acl",
                "description": "<p>Permanently deletes a default ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L160",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_files",
                "description": "<p>Retrieves a list of files matching the criteria.</p>",
                "source": "lib/gcloud/storage/connection.rb#L169",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "upload_file",
                "description": "<p>Stores a new object and metadata. If resumable is true, a resumable upload, otherwise uses a multipart form post.</p>  <p>UploadIO comes from Faraday, which gets it from multipart-post The initializer signature is: filename<em>or</em>io, content_type, filename = nil, opts = {}</p>",
                "source": "lib/gcloud/storage/connection.rb#L190",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_file",
                "description": "<p>Retrieves an object or its metadata.</p>",
                "source": "lib/gcloud/storage/connection.rb#L204",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "copy_file",
                "description": "<p>Copy a file from source bucket/object to a destination bucket/object.</p>",
                "source": "lib/gcloud/storage/connection.rb#L216",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "download_file",
                "description": "<p>Download contents of a file.</p>",
                "source": "lib/gcloud/storage/connection.rb#L231",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_file",
                "description": "<p>Updates a file&#39;s metadata.</p>",
                "source": "lib/gcloud/storage/connection.rb#L242",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_file",
                "description": "<p>Permanently deletes a file.</p>",
                "source": "lib/gcloud/storage/connection.rb#L257",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_file_acls",
                "description": "<p>Retrieves a list of ACLs for the given file.</p>",
                "source": "lib/gcloud/storage/connection.rb#L267",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_file_acl",
                "description": "<p>Creates a new file ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L276",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_file_acl",
                "description": "<p>Permanently deletes a file ACL.</p>",
                "source": "lib/gcloud/storage/connection.rb#L289",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "mime_type_for",
                "description": "<p>Retrieves the mime-type for a file path. An empty string is returned if no mime-type can be found.</p>",
                "source": "lib/gcloud/storage/connection.rb#L302",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_bucket_request",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L313",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_bucket_request",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L325",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "versioning_config",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L336",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "logging_config",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L340",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "website_config",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L349",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_file",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L367",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "file_media",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L380",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_file_request",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L388",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_file_request",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L397",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "incremental_backoff",
                "description": "",
                "source": "lib/gcloud/storage/connection.rb#L409",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "verify_chunk_size!",
                "description": "<p>Determines if a chunk_size is valid.</p>",
                "source": "lib/gcloud/storage/connection.rb#L417",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/storage/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        }
      ]
    },
    {
      "id": "bigquery",
      "metadata": {
        "name": "Bigquery",
        "description": "<h1>Google Cloud BigQuery</h1>  <p>Google Cloud BigQuery enables super-fast, SQL-like queries against massive datasets, using the processing power of Google&#39;s infrastructure. To learn more, read <a href=\"https://cloud.google.com/bigquery/what-is-bigquery\">What is BigQuery?</a>.</p>  <p>Gcloud&#39;s goal is to provide an API that is familiar and comfortable to Rubyists. Authentication is handled by Gcloud#bigquery. You can provide the project and credential information to connect to the BigQuery service, or if you are running on Google Compute Engine this configuration is taken care of for you. You can read more about the options for connecting in the <a href=\"../AUTHENTICATION\">Authentication Guide</a>.</p>  <p>To help you get started quickly, the first few examples below use a public dataset provided by Google. As soon as you have <a href=\"https://cloud.google.com/bigquery/sign-up\">signed up</a> to use BigQuery, and provided that you stay in the free tier for queries, you should be able to run these first examples without the need to set up billing or to load data (although we&#39;ll show you how to do that too.)</p>  <h2>Listing Datasets and Tables</h2>  <p>A BigQuery project holds datasets, which in turn hold tables. Assuming that you have not yet created datasets or tables in your own project, let&#39;s connect to Google&#39;s <code>publicdata</code> project, and see what you find.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new &quot;publicdata&quot; bigquery = gcloud.bigquery</p>  <p>bigquery.datasets.count #=&gt; 1 bigquery.datasets.first.dataset_id #=&gt; &quot;samples&quot;</p>  <p>dataset = bigquery.datasets.first tables = dataset.tables</p>  <p>tables.count #=&gt; 7 tables.map &amp;:table_id #=&gt; [..., &quot;shakespeare&quot;, &quot;trigrams&quot;, &quot;wikipedia&quot;] ```</p>  <p>In addition listing all datasets and tables in the project, you can also retrieve individual datasets and tables by ID. Let&#39;s look at the structure of the <code>shakespeare</code> table, which contains an entry for every word in every play written by Shakespeare.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new &quot;publicdata&quot; bigquery = gcloud.bigquery</p>  <p>dataset = bigquery.dataset &quot;samples&quot; table = dataset.table &quot;shakespeare&quot;</p>  <p>table.headers #=&gt; [&quot;word&quot;, &quot;word<em>count&quot;, &quot;corpus&quot;, &quot;corpus</em>date&quot;] table.rows_count #=&gt; 164656 ```</p>  <p>Now that you know the column names for the Shakespeare table, you can write and run a query.</p>  <h2>Running queries</h2>  <p>BigQuery offers both synchronous and asynchronous methods, as explained in <a href=\"https://cloud.google.com/bigquery/querying-data\">Querying Data</a>.</p>  <h3>Synchronous queries</h3>  <p>Let&#39;s start with the simpler synchronous approach. Notice that this time you are connecting using your own default project. This is necessary for running a query, since queries need to be able to create tables to hold results.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery</p>  <p>sql = &quot;SELECT TOP(word, 50) as word, COUNT(*) as count &quot; +       &quot;FROM publicdata:samples.shakespeare&quot; data = bigquery.query sql</p>  <p>data.count #=&gt; 50 data.next? #=&gt; false data.first #=&gt; {&quot;word&quot;=&gt;&quot;you&quot;, &quot;count&quot;=&gt;42} ```</p>  <p>The <code>TOP</code> function shown above is just one of a variety of functions offered by BigQuery. See the <a href=\"https://cloud.google.com/bigquery/query-reference\">Query Reference</a> for a full listing.</p>  <h3>Asynchronous queries</h3>  <p>Because you probably should not block for most BigQuery operations, including querying as well as importing, exporting, and copying data, the BigQuery API enables you to manage longer-running jobs. In the asynchronous approach to running a query, an instance of Gcloud::Bigquery::QueryJob is returned, rather than an instance of Gcloud::Bigquery::QueryData.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery</p>  <p>sql = &quot;SELECT TOP(word, 50) as word, COUNT(*) as count &quot; +       &quot;FROM publicdata:samples.shakespeare&quot; job = bigquery.query_job sql</p>  <p>job.wait<em>until</em>done! if !job.failed?   job.query_results.each do |row|     puts row[&quot;word&quot;]   end end ```</p>  <p>Once you have determined that the job is done and has not failed, you can obtain an instance of Gcloud::Bigquery::QueryData by calling Gcloud::Bigquery::QueryJob#query_results. The query results for both of the above examples are stored in temporary tables with a lifetime of about 24 hours. See the final example below for a demonstration of how to store query results in a permanent table.</p>  <h2>Creating Datasets and Tables</h2>  <p>The first thing you need to do in a new BigQuery project is to create a Gcloud::Bigquery::Dataset. Datasets hold tables and control access to them.</p>  <p>```ruby require &quot;gcloud/bigquery&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery dataset = bigquery.create<em>dataset &quot;my</em>dataset&quot; ```</p>  <p>Now that you have a dataset, you can use it to create a table. Every table is defined by a schema that may contain nested and repeated fields. The example below shows a schema with a repeated record field named <code>cities_lived</code>. (For more information about nested and repeated fields, see <a href=\"https://cloud.google.com/bigquery/preparing-data-for-bigquery\">Preparing Data for BigQuery</a>.)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery dataset = bigquery.dataset &quot;my_dataset&quot;</p>  <p>table = dataset.create<em>table &quot;people&quot; do |schema|   schema.string &quot;first</em>name&quot;, mode: :required   schema.record &quot;cities<em>lived&quot;, mode: :repeated do |nested</em>schema|     nested<em>schema.string &quot;place&quot;, mode: :required     nested</em>schema.integer &quot;number<em>of</em>years&quot;, mode: :required   end end ```</p>  <p>Because of the repeated field in this schema, we cannot use the CSV format to load data into the table.</p>  <h2>Loading records</h2>  <p>In addition to CSV, data can be imported from files that are formatted as <a href=\"http://jsonlines.org/\">Newline-delimited JSON</a> or <a href=\"http://avro.apache.org/\">Avro</a>, or from a Google Cloud Datastore backup. It can also be &quot;streamed&quot; into BigQuery.</p>  <p>To follow along with these examples, you will need to set up billing on the <a href=\"https://console.developers.google.com\">Google Developers Console</a>.</p>  <h3>Streaming records</h3>  <p>For situations in which you want new data to be available for querying as soon as possible, inserting individual records directly from your Ruby application is a great approach.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery dataset = bigquery.dataset &quot;my_dataset&quot; table = dataset.table &quot;people&quot;</p>  <p>rows = [     {         &quot;first<em>name&quot; =&gt; &quot;Anna&quot;,         &quot;cities</em>lived&quot; =&gt; [             {                 &quot;place&quot; =&gt; &quot;Stockholm&quot;,                 &quot;number<em>of</em>years&quot; =&gt; 2             }         ]     },     {         &quot;first<em>name&quot; =&gt; &quot;Bob&quot;,         &quot;cities</em>lived&quot; =&gt; [             {                 &quot;place&quot; =&gt; &quot;Seattle&quot;,                 &quot;number<em>of</em>years&quot; =&gt; 5             },             {                 &quot;place&quot; =&gt; &quot;Austin&quot;,                 &quot;number<em>of</em>years&quot; =&gt; 6             }         ]     } ] table.insert rows ```</p>  <p>There are some trade-offs involved with streaming, so be sure to read the discussion of data consistency in <a href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery\">Streaming Data Into BigQuery</a>.</p>  <h3>Uploading a file</h3>  <p>To follow along with this example, please download the <a href=\"http://www.ssa.gov/OACT/babynames/names.zip\">names.zip</a> archive from the U.S. Social Security Administration. Inside the archive you will find over 100 files containing baby name records since the year 1880. A PDF file also contained in the archive specifies the schema used below.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery dataset = bigquery.dataset &quot;my<em>dataset&quot; table = dataset.create</em>table &quot;baby_names&quot; do |schema|   schema.string &quot;name&quot;, mode: :required   schema.string &quot;sex&quot;, mode: :required   schema.integer &quot;number&quot;, mode: :required end</p>  <p>file = File.open &quot;names/yob2014.txt&quot; load_job = table.load file, format: &quot;csv&quot; ```</p>  <p>Because the names data, although formatted as CSV, is distributed in files with a <code>.txt</code> extension, this example explicitly passes the <code>format</code> option in order to demonstrate how to handle such situations. Because CSV is the default format for load operations, the option is not actually necessary. For JSON saved with a <code>.txt</code> extension, however, it would be.</p>  <h3>A note about large uploads</h3>  <p>You may encounter a Broken pipe (Errno::EPIPE) error when attempting to upload large files. To avoid this problem, add the <a href=\"https://rubygems.org/gems/httpclient\">httpclient</a> gem to your project, and the line (or lines) of configuration shown below. These lines must execute after you require gcloud but before you make your first gcloud connection. The first statement configures <a href=\"https://rubygems.org/gems/faraday\">Faraday</a> to use httpclient. The second statement, which should only be added if you are using a version of Faraday at or above 0.9.2, is a workaround for <a href=\"https://github.com/GoogleCloudPlatform/gcloud-ruby/issues/367\">this gzip issue</a>.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <h1>Use httpclient to avoid broken pipe errors with large uploads</h1>  <p>Faraday.default_adapter = :httpclient</p>  <h1>Only add the following statement if using Faraday &gt;= 0.9.2</h1>  <h1>Override gzip middleware with no-op for httpclient</h1>  <p>Faraday::Response.register_middleware :gzip =&gt;                                         Faraday::Response::Middleware</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery ```</p>  <h2>Exporting query results to Google Cloud Storage</h2>  <p>The example below shows how to pass the <code>table</code> option with a query in order to store results in a permanent table. It also shows how to export the result data to a Google Cloud Storage file. In order to follow along, you will need to enable the Google Cloud Storage API in addition to setting up billing.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new bigquery = gcloud.bigquery dataset = bigquery.dataset &quot;my<em>dataset&quot; source</em>table = dataset.table &quot;baby<em>names&quot; result</em>table = dataset.create<em>table &quot;baby</em>names_results&quot;</p>  <p>sql = &quot;SELECT name, number as count &quot; +       &quot;FROM baby<em>names &quot; +       &quot;WHERE name CONTAINS &#39;Sam&#39; &quot; +       &quot;ORDER BY count DESC&quot; query</em>job = dataset.query<em>job sql, table: result</em>table</p>  <p>query<em>job.wait</em>until_done!</p>  <p>if !query_job.failed?</p>  <p>storage = gcloud.storage   bucket<em>id = &quot;bigquery-exports-#{SecureRandom.uuid}&quot;   bucket = storage.create</em>bucket bucket<em>id   extract</em>url = &quot;gs://#{bucket.id}/baby-names-sam.csv&quot;</p>  <p>extract<em>job = result</em>table.extract extract_url</p>  <p>extract<em>job.wait</em>until_done!</p>  <p># Download to local filesystem   bucket.files.first.download &quot;baby-names-sam.csv&quot;</p>  <p>end ```</p>  <p>If a table you wish to export contains a large amount of data, you can pass a wildcard URI to export to multiple files (for sharding), or an array of URIs (for partitioning), or both. See <a href=\"https://cloud.google.com/bigquery/exporting-data-from-bigquery\">Exporting Data From BigQuery</a> for details.</p>",
        "source": "lib/gcloud/bigquery.rb#L384",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "job",
          "metadata": {
            "name": "Job",
            "description": "<h1>Job</h1>  <p>Represents a generic Job that may be performed on a {Table}.</p>  <p>The subclasses of Job represent the specific BigQuery job types: {CopyJob}, {ExtractJob}, {LoadJob}, and {QueryJob}.</p>  <p>A job instance is created when you call {Project#query<em>job}, {Dataset#query</em>job}, {Table#copy}, {Table#extract}, {Table#load}, or {View#data}.</p>",
            "source": "lib/gcloud/bigquery/job.rb#L56",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/docs/managing_jobs_datasets_projects",
                "title": "Managing Jobs, Datasets, and Projects"
              },
              {
                "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                "title": "Jobs API reference"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nq = \"SELECT COUNT(word) as count FROM publicdata:samples.shakespeare\"\njob = bigquery.query_job q\n\njob.wait_until_done!\n\nif job.failed?\n  puts job.error\nelse\n  puts job.query_results.first\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "job_id",
                "description": "<p>The ID of the job.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L74",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_id",
                "description": "<p>The ID of the project containing the job.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L80",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "state",
                "description": "<p>The current state of the job. The possible values are <code>PENDING</code>, <code>RUNNING</code>, and <code>DONE</code>. A <code>DONE</code> state does not mean that the job completed successfully. Use {#failed?} to discover if an error occurred or if the job was successful.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L89",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "running?",
                "description": "<p>Checks if the job&#39;s state is <code>RUNNING</code>.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "pending?",
                "description": "<p>Checks if the job&#39;s state is <code>PENDING</code>.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L103",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "done?",
                "description": "<p>Checks if the job&#39;s state is <code>DONE</code>. When <code>true</code>, the job has stopped running. However, a <code>DONE</code> state does not mean that the job completed successfully.  Use {#failed?} to detect if an error occurred or if the job was successful.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L113",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "failed?",
                "description": "<p>Checks if an error is present.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L120",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time when the job was created.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L126",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "started_at",
                "description": "<p>The time when the job was started. This field is present after the job&#39;s state changes from <code>PENDING</code> to either <code>RUNNING</code> or <code>DONE</code>.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L136",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ended_at",
                "description": "<p>The time when the job ended. This field is present when the job&#39;s state is <code>DONE</code>.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L145",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "configuration",
                "description": "<p>The configuration for the job. Returns a hash.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L156",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                    "title": "Jobs API reference"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "statistics",
                "description": "<p>The statistics for the job. Returns a hash.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L168",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                    "title": "Jobs API reference"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "status",
                "description": "<p>The job&#39;s status. Returns a hash. The values contained in the hash are also exposed by {#state}, {#error}, and {#errors}.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L178",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "error",
                "description": "<p>The last error for the job, if any errors have occurred. Returns a hash.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L198",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                    "title": "Jobs API reference"
                  }
                ],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Hash"],
                  "description": "Returns a hash containing <code>reason</code> and <code>message</code> keys:</p>  <p>{   &quot;reason&quot;=&gt;&quot;notFound&quot;,   &quot;message&quot;=&gt;&quot;Not found: Table publicdata:samples.BAD_ID&quot; }"
                }
              ]
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors for the job, if any errors have occurred. Returns an array of hash objects. See {#error}.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L205",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rerun!",
                "description": "<p>Created a new job with the current configuration.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L211",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the job with current data from the BigQuery service.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L223",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "wait_until_done!",
                "description": "<p>Refreshes the job until the job is <code>DONE</code>. The delay between refreshes will incrementally increase.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L250",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nextract_job = table.extract \"gs://my-bucket/file-name.json\",\n                            format: \"json\"\nextract_job.wait_until_done!\nextract_job.done? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/job.rb#L274",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "klass_for",
                "description": "<p>Get the subclass for a job type</p>",
                "source": "lib/gcloud/bigquery/job.rb#L280",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "retrieve_table",
                "description": "",
                "source": "lib/gcloud/bigquery/job.rb#L293",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "view",
          "metadata": {
            "name": "View",
            "description": "<h1>View</h1>  <p>A view is a virtual table defined by a SQL query. You can query views in the browser tool, or by using a query job.</p>  <p>BigQuery&#39;s views are logical views, not materialized views, which means that the query that defines the view is re-executed every time the view is queried. Queries are billed according to the total amount of data in all table fields referenced directly or indirectly by the top-level query.</p>",
            "source": "lib/gcloud/bigquery/view.rb#L42",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\nview = dataset.create_view \"my_view\",\n         \"SELECT name, age FROM [proj:dataset.users]\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "table_id",
                "description": "<p>A unique ID for this table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L65",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "dataset_id",
                "description": "<p>The ID of the <code>Dataset</code> containing this table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L74",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_id",
                "description": "<p>The ID of the <code>Project</code> containing this table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L83",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L102",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name=",
                "description": "<p>Updates the name of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L111",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "etag",
                "description": "<p>A string hash of the dataset.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L120",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "api_url",
                "description": "<p>A URL that can be used to access the dataset using the REST API.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L130",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description",
                "description": "<p>The description of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L140",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description=",
                "description": "<p>Updates the description of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L150",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time when this table was created.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L159",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "expires_at",
                "description": "<p>The time when this table expires. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L171",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "modified_at",
                "description": "<p>The date when this table was last modified.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L182",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "table?",
                "description": "<p>Checks if the table&#39;s type is &quot;TABLE&quot;.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L192",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "view?",
                "description": "<p>Checks if the table&#39;s type is &quot;VIEW&quot;.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L201",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "location",
                "description": "<p>The geographic location where the table should reside. Possible values include EU and US. The default value is US.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L211",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "schema",
                "description": "<p>The schema of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L221",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fields",
                "description": "<p>The fields of the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L234",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "headers",
                "description": "<p>The names of the columns in the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L246",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query",
                "description": "<p>The query that executes each time the view is loaded.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L255",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query=",
                "description": "<p>Updates the query that executes each time the view is loaded.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L279",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/query-reference",
                    "title": "BigQuery Query Reference"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\nview = dataset.table \"my_view\"\n\nview.query = \"SELECT first_name FROM [my_project:my_dataset.my_table]\""
                  }
                ]
              },
              "params": [
                {
                  "name": "new_query",
                  "types": ["String"],
                  "description": "The query that defines the view.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data",
                "description": "<p>Runs a query to retrieve all data from the view.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L326",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\nview = dataset.table \"my_view\"\n\ndata = view.data\ndata.each do |row|\n  puts row[\"first_name\"]\nend\nmore_data = data.next if data.next?"
                  }
                ]
              },
              "params": [
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "timeout",
                  "types": ["Integer"],
                  "description": "How long to wait for the query to complete, in milliseconds, before the request times out and returns. Note that this is only a timeout for the request, not the query. If the query takes longer to run than the timeout value, the call returns without any results and with QueryData#complete? set to false. The default value is 10000 milliseconds (10 seconds).",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "cache",
                  "types": ["Boolean"],
                  "description": "Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true. For more information, see <a href=\"https://developers.google.com/bigquery/querying-data\">query caching</a>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "dryrun",
                  "types": ["Boolean"],
                  "description": "If set to <code>true</code>, BigQuery doesn&#39;t run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryData"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the table.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L355",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\ntable.delete"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the table was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the table with current data from the BigQuery service.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L370",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L394",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/view.rb#L398",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_full_data!",
                "description": "<p>Load the complete representation of the table if it has been only partially loaded by a request to the API list method.</p>",
                "source": "lib/gcloud/bigquery/view.rb#L411",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/view.rb#L415",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data_complete?",
                "description": "",
                "source": "lib/gcloud/bigquery/view.rb#L425",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "data",
          "metadata": {
            "name": "Data",
            "description": "<h1>Data</h1>  <p>Represents {Table} Data as a list of name/value pairs. Also contains metadata such as <code>etag</code> and <code>total</code>.</p>",
            "source": "lib/gcloud/bigquery/data.rb#L25",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "kind",
                "description": "<p>The resource type of the API response.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L43",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "token",
                "description": "<p>A token used for paging results.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L49",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "etag",
                "description": "<p>A hash of this page of results.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L54",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "total",
                "description": "<p>The total number of rows in the complete table.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L59",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "next?",
                "description": "<p>Is there a next page of data?</p>",
                "source": "lib/gcloud/bigquery/data.rb#L65",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "next",
                "description": "",
                "source": "lib/gcloud/bigquery/data.rb#L69",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "raw",
                "description": "<p>Represents Table Data as a list of positional values (array of arrays). No type conversion is made, e.g. numbers are formatted as strings.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L78",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "format_rows",
                "description": "<p>rubocop:disable all Disabled rubocop because this implementation will not last.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "format_values",
                "description": "",
                "source": "lib/gcloud/bigquery/data.rb#L107",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_table!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/data.rb#L132",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "table",
          "metadata": {
            "name": "Table",
            "description": "<h1>Table</h1>  <p>A named resource representing a BigQuery table that holds zero or more records. Every table is defined by a schema that may contain nested and repeated fields.</p>",
            "source": "lib/gcloud/bigquery/table.rb#L66",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/preparing-data-for-bigquery",
                "title": "Preparing Data for BigQuery"
              }
            ],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\ntable = dataset.create_table \"my_table\" do |schema|\n  schema.string \"first_name\", mode: :required\n  schema.record \"cities_lived\", mode: :repeated do |nested_schema|\n    nested_schema.string \"place\", mode: :required\n    nested_schema.integer \"number_of_years\", mode: :required\n  end\nend\n\nrow = {\n  \"first_name\" => \"Alice\",\n  \"cities_lived\" => [\n    {\n      \"place\" => \"Seattle\",\n      \"number_of_years\" => 5\n    },\n    {\n      \"place\" => \"Stockholm\",\n      \"number_of_years\" => 6\n    }\n  ]\n}\ntable.insert row"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "table_id",
                "description": "<p>A unique ID for this table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L89",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "dataset_id",
                "description": "<p>The ID of the <code>Dataset</code> containing this table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L98",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_id",
                "description": "<p>The ID of the <code>Project</code> containing this table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L107",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "id",
                "description": "<p>The combined Project ID, Dataset ID, and Table ID for this table, in the format specified by the <a href=\"https://cloud.google.com/bigquery/query-reference#from\">Query Reference</a>: <code>project_name:datasetId.tableId</code>. To use this value in queries see {#query_id}.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L130",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_id",
                "description": "<p>The value returned by {#id}, wrapped in square brackets if the Project ID contains dashes, as specified by the <a href=\"https://cloud.google.com/bigquery/query-reference#from\">Query Reference</a>. Useful in queries.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L152",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\ndata = bigquery.query \"SELECT name FROM #{table.query_id}\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L161",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name=",
                "description": "<p>Updates the name of the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L170",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "etag",
                "description": "<p>A string hash of the dataset.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L179",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "api_url",
                "description": "<p>A URL that can be used to access the dataset using the REST API.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L189",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description",
                "description": "<p>The description of the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L199",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description=",
                "description": "<p>Updates the description of the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L209",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "bytes_count",
                "description": "<p>The number of bytes in the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L218",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rows_count",
                "description": "<p>The number of rows in the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L228",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time when this table was created.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L238",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "expires_at",
                "description": "<p>The time when this table expires. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L250",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "modified_at",
                "description": "<p>The date when this table was last modified.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L261",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "table?",
                "description": "<p>Checks if the table&#39;s type is &quot;TABLE&quot;.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L271",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "view?",
                "description": "<p>Checks if the table&#39;s type is &quot;VIEW&quot;.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L280",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "location",
                "description": "<p>The geographic location where the table should reside. Possible values include EU and US. The default value is US.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L290",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "schema",
                "description": "<p>Returns the table&#39;s schema as hash containing the keys and values returned by the Google Cloud BigQuery <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables#resource\">Rest API </a>. This method can also be used to set, replace, or add to the schema by passing a block. See {Table::Schema} for available methods. To set the schema by passing a hash instead, use {#schema=}.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L327",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"my_table\"\n\ntable.schema do |schema|\n  schema.string \"first_name\", mode: :required\n  schema.record \"cities_lived\", mode: :repeated do |nested_schema|\n    nested_schema.string \"place\", mode: :required\n    nested_schema.integer \"number_of_years\", mode: :required\n  end\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "replace",
                  "types": ["Boolean"],
                  "description": "Whether to replace the existing schema with the new schema. If <code>true</code>, the fields will replace the existing schema. If <code>false</code>, the fields will be added to the existing schema. When a table already contains data, schema changes must be additive. Thus, the default value is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                },
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "schema=",
                "description": "<p>Updates the schema of the table. To update the schema using a block instead, use #schema.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L374",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"my_table\"\n\nschema = {\n  \"fields\" => [\n    {\n      \"name\" => \"first_name\",\n      \"type\" => \"STRING\",\n      \"mode\" => \"REQUIRED\"\n    },\n    {\n      \"name\" => \"age\",\n      \"type\" => \"INTEGER\",\n      \"mode\" => \"REQUIRED\"\n    }\n  ]\n}\ntable.schema = schema"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_schema",
                  "types": ["Hash"],
                  "description": "A hash containing keys and values as specified by the Google Cloud BigQuery <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables#resource\">Rest API </a> .",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fields",
                "description": "<p>The fields of the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L383",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "headers",
                "description": "<p>The names of the columns in the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L395",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data",
                "description": "<p>Retrieves data from the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L426",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\ndata = table.data\ndata.each do |row|\n  puts row[\"first_name\"]\nend\nmore_data = table.data token: data.token"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "Page token, returned by a previous call, identifying the result set.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of results to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "start",
                  "types": ["Integer"],
                  "description": "Zero-based index of the starting row to read.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::Data"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "copy",
                "description": "<p>Copies the data from the table to another table. The destination table argument can also be a string identifier as specified by the <a href=\"https://cloud.google.com/bigquery/query-reference#from\">Query Reference</a>: <code>project_name:datasetId.tableId</code>. This is useful for referencing tables in other projects and datasets.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L488",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\ndestination_table = dataset.table \"my_destination_table\"\n\ncopy_job = table.copy destination_table"
                  },
                  {
                    "caption": "Passing a string identifier for the destination table:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\ncopy_job = table.copy \"other-project:other_dataset.other_table\""
                  }
                ]
              },
              "params": [
                {
                  "name": "destination_table",
                  "types": [
                    "Table",
                    "String"
                  ],
                  "description": "The destination for the copied data.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "create",
                  "types": ["String"],
                  "description": "Specifies whether the job is allowed to create new tables.</p>  <p>The following values are supported: * <code>needed</code> - Create the table if it does not exist. * <code>never</code> - The table must already exist. A &#39;notFound&#39; error is   raised if the table does not exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "write",
                  "types": ["String"],
                  "description": "Specifies how to handle data already present in the destination table. The default value is <code>empty</code>.</p>  <p>The following values are supported: * <code>truncate</code> - BigQuery overwrites the table data. * <code>append</code> - BigQuery appends the data to the table. * <code>empty</code> - An error will be returned if the destination table already   contains data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::CopyJob"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "extract",
                "description": "<p>Extract the data from the table to a Google Cloud Storage file.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L577",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/exporting-data-from-bigquery",
                    "title": "Exporting Data From BigQuery"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nextract_job = table.extract \"gs://my-bucket/file-name.json\",\n                            format: \"json\""
                  }
                ]
              },
              "params": [
                {
                  "name": "extract_url",
                  "types": [
                    "Gcloud::Storage::File",
                    "String",
                    "Array<String>"
                  ],
                  "description": "The Google Storage file or file URI pattern(s) to which BigQuery should extract the table data.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "format",
                  "types": ["String"],
                  "description": "The exported file format. The default value is <code>csv</code>.</p>  <p>The following values are supported: * <code>csv</code> - CSV * <code>json</code> - <a href=\"http://jsonlines.org/\">Newline-delimited JSON</a> * <code>avro</code> - <a href=\"http://avro.apache.org/\">Avro</a>",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "compression",
                  "types": ["String"],
                  "description": "The compression type to use for exported files. Possible values include <code>GZIP</code> and <code>NONE</code>. The default value is <code>NONE</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "delimiter",
                  "types": ["String"],
                  "description": "Delimiter to use between fields in the exported data. Default is <code>,</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "header",
                  "types": ["Boolean"],
                  "description": "Whether to print out a header row in the results. Default is <code>true</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::ExtractJob"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "load",
                "description": "<p>Loads data into the table. You can pass a gcloud storage file path or a gcloud storage file instance. Or, you can upload a file directly. See <a href=\"https://cloud.google.com/bigquery/loading-data-post-request#multipart\">Loading Data with a POST Request</a>.</p>  <h3>A note about large direct uploads</h3>  <p>You may encounter a Broken pipe (Errno::EPIPE) error when attempting to upload large files. To avoid this problem, add the <a href=\"https://rubygems.org/gems/httpclient\">httpclient</a> gem to your project, and the line (or lines) of configuration shown below. These lines must execute after you require gcloud but before you make your first gcloud connection. The first statement configures <a href=\"https://rubygems.org/gems/faraday\">Faraday</a> to use httpclient. The second statement, which should only be added if you are using a version of Faraday at or above 0.9.2, is a workaround for <a href=\"https://github.com/GoogleCloudPlatform/gcloud-ruby/issues/367\">this gzip issue</a>.</p>  <p>require &quot;gcloud&quot;</p>  <p># Use httpclient to avoid broken pipe errors with large uploads   Faraday.default_adapter = :httpclient</p>  <p># Only add the following statement if using Faraday &gt;= 0.9.2   # Override gzip middleware with no-op for httpclient   Faraday::Response.register_middleware :gzip =&gt;                                           Faraday::Response::Middleware</p>  <p>gcloud = Gcloud.new   bigquery = gcloud.bigquery</p>",
                "source": "lib/gcloud/bigquery/table.rb#L738",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nload_job = table.load \"gs://my-bucket/file-name.csv\""
                  },
                  {
                    "caption": "Pass a gcloud storage file instance:",
                    "code": "\nrequire \"gcloud\"\nrequire \"gcloud/storage\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nstorage = gcloud.storage\nbucket = storage.bucket \"my-bucket\"\nfile = bucket.file \"file-name.csv\"\nload_job = table.load file"
                  },
                  {
                    "caption": "Upload a file directly:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nfile = File.open \"my_data.csv\"\nload_job = table.load file"
                  }
                ]
              },
              "params": [
                {
                  "name": "file",
                  "types": [
                    "File",
                    "Gcloud::Storage::File",
                    "String"
                  ],
                  "description": "A file or the URI of a Google Cloud Storage file containing data to load into the table.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "format",
                  "types": ["String"],
                  "description": "The exported file format. The default value is <code>csv</code>.</p>  <p>The following values are supported: * <code>csv</code> - CSV * <code>json</code> - <a href=\"http://jsonlines.org/\">Newline-delimited JSON</a> * <code>avro</code> - <a href=\"http://avro.apache.org/\">Avro</a> * <code>datastore_backup</code> - Cloud Datastore backup",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "create",
                  "types": ["String"],
                  "description": "Specifies whether the job is allowed to create new tables.</p>  <p>The following values are supported: * <code>needed</code> - Create the table if it does not exist. * <code>never</code> - The table must already exist. A &#39;notFound&#39; error is   raised if the table does not exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "write",
                  "types": ["String"],
                  "description": "Specifies how to handle data already present in the table. The default value is <code>empty</code>.</p>  <p>The following values are supported: * <code>truncate</code> - BigQuery overwrites the table data. * <code>append</code> - BigQuery appends the data to the table. * <code>empty</code> - An error will be returned if the table already contains   data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "projection_fields",
                  "types": ["Array<String>"],
                  "description": "If the <code>format</code> option is set to <code>datastore_backup</code>, indicates which entity properties to load from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If not set, BigQuery loads all properties. If any named property isn&#39;t found in the Cloud Datastore backup, an invalid error is returned.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "jagged_rows",
                  "types": ["Boolean"],
                  "description": "Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If <code>false</code>, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is <code>false</code>. Only applicable to CSV, ignored for other formats.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "quoted_newlines",
                  "types": ["Boolean"],
                  "description": "Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "encoding",
                  "types": ["String"],
                  "description": "The character encoding of the data. The supported values are <code>UTF-8</code> or <code>ISO-8859-1</code>. The default value is <code>UTF-8</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "delimiter",
                  "types": ["String"],
                  "description": "Specifices the separator for fields in a CSV file. BigQuery converts the string to <code>ISO-8859-1</code> encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. Default is <code>,</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "ignore_unknown",
                  "types": ["Boolean"],
                  "description": null,
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max_bad_records",
                  "types": ["Integer"],
                  "description": "The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is <code>0</code>, which requires that all records are valid.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "quote",
                  "types": ["String"],
                  "description": "The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote <code>&quot;</code>. If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "skip_leading",
                  "types": ["Integer"],
                  "description": "The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is <code>0</code>. This property is useful if you have header rows in the file that should be skipped.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::LoadJob"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "insert",
                "description": "<p>Inserts data into the table for near-immediate querying, without the need to complete a #load operation before the data can appear in query results.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L790",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/streaming-data-into-bigquery",
                    "title": "Streaming Data Into BigQuery"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\nrows = [\n  { \"first_name\" => \"Alice\", \"age\" => 21 },\n  { \"first_name\" => \"Bob\", \"age\" => 22 }\n]\ntable.insert rows"
                  }
                ]
              },
              "params": [
                {
                  "name": "rows",
                  "types": [
                    "Hash",
                    "Array<Hash>"
                  ],
                  "description": "A hash object or array of hash objects containing the data.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "skip_invalid",
                  "types": ["Boolean"],
                  "description": "Insert all valid rows of a request, even if invalid rows exist. The default value is <code>false</code>, which causes the entire request to fail if any invalid rows exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "ignore_unknown",
                  "types": ["Boolean"],
                  "description": "Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::InsertResponse"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the table.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L819",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\n\ntable.delete"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the table was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the table with current data from the BigQuery service.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L834",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L859",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L863",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "class_for",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L873",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_storage",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L878",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_local",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L890",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_resumable",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L898",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_multipart",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L908",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "storage_url?",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L923",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "local_file?",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L929",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "verify_chunk_size!",
                "description": "<p>Determines if a chunk_size is valid.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L937",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_full_data!",
                "description": "<p>Load the complete representation of the table if it has been only partially loaded by a request to the API list method.</p>",
                "source": "lib/gcloud/bigquery/table.rb#L950",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L954",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data_complete?",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L964",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "get_table_ref",
                "description": "",
                "source": "lib/gcloud/bigquery/table.rb#L970",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<p>Base BigQuery exception class.</p>",
            "source": "lib/gcloud/bigquery/errors.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/bigquery/errors.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/bigquery/errors.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/bigquery/errors.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>Projects are top-level containers in Google Cloud Platform. They store information about billing and authorized users, and they contain BigQuery data. Each project has a friendly name and a unique ID.</p>  <p>Gcloud::Bigquery::Project is the main object for interacting with Google BigQuery. {Gcloud::Bigquery::Dataset} objects are created, accessed, and deleted by Gcloud::Bigquery::Project.</p>  <p>See {Gcloud#bigquery}</p>",
            "source": "lib/gcloud/bigquery/project.rb#L47",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>  <p>See {Gcloud.bigquery}</p>",
                "source": "lib/gcloud/bigquery/project.rb#L56",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Project"],
                  "description": "a new instance of Project"
                }
              ]
            },
            {
              "metadata": {
                "name": "project",
                "description": "<p>The BigQuery project connected to.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L73",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\", \"/path/to/keyfile.json\"\nbigquery = gcloud.bigquery\n\nbigquery.project #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_job",
                "description": "<p>Queries data using the <a href=\"https://cloud.google.com/bigquery/querying-data\">asynchronous method</a>.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L146",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\njob = bigquery.query_job \"SELECT name FROM [my_proj:my_data.my_table]\"\n\njob.wait_until_done!\nif !job.failed?\n  job.query_results.each do |row|\n    puts row[\"name\"]\n  end\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "A query string, following the BigQuery <a href=\"https://cloud.google.com/bigquery/query-reference\">query syntax</a>, of the query to execute. Example: &quot;SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "priority",
                  "types": ["String"],
                  "description": "Specifies a priority for the query. Possible values include <code>INTERACTIVE</code> and <code>BATCH</code>. The default value is <code>INTERACTIVE</code>.",
                  "optional": true,
                  "default": "\"INTERACTIVE\"",
                  "nullable": false
                },
                {
                  "name": "cache",
                  "types": ["Boolean"],
                  "description": "Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true. For more information, see <a href=\"https://developers.google.com/bigquery/querying-data\">query caching</a>.",
                  "optional": true,
                  "default": "true",
                  "nullable": false
                },
                {
                  "name": "table",
                  "types": ["Table"],
                  "description": "The destination table where the query results should be stored. If not present, a new table will be created to store the results.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "create",
                  "types": ["String"],
                  "description": "Specifies whether the job is allowed to create new tables.</p>  <p>The following values are supported: * <code>needed</code> - Create the table if it does not exist. * <code>never</code> - The table must already exist. A &#39;notFound&#39; error is   raised if the table does not exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "write",
                  "types": ["String"],
                  "description": "Specifies the action that occurs if the destination table already exists.</p>  <p>The following values are supported: * <code>truncate</code> - BigQuery overwrites the table data. * <code>append</code> - BigQuery appends the data to the table. * <code>empty</code> - A &#39;duplicate&#39; error is returned in the job result if the   table exists and contains data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "large_results",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires <code>table</code> parameter to be set.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "flatten",
                  "types": ["Boolean"],
                  "description": "Flattens all nested and repeated fields in the query results. The default value is <code>true</code>. <code>large_results</code> parameter must be <code>true</code> if this is set to <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "dataset",
                  "types": [
                    "Dataset",
                    "String"
                  ],
                  "description": "Specifies the default dataset to use for unqualified table names in the query.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryJob"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "query",
                "description": "<p>Queries data using the <a href=\"https://cloud.google.com/bigquery/querying-data\">synchronous method</a>.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L211",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndata = bigquery.query \"SELECT name FROM [my_proj:my_data.my_table]\"\ndata.each do |row|\n  puts row[\"name\"]\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "A query string, following the BigQuery <a href=\"https://cloud.google.com/bigquery/query-reference\">query syntax</a>, of the query to execute. Example: &quot;SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "timeout",
                  "types": ["Integer"],
                  "description": "How long to wait for the query to complete, in milliseconds, before the request times out and returns. Note that this is only a timeout for the request, not the query. If the query takes longer to run than the timeout value, the call returns without any results and with QueryData#complete? set to false. The default value is 10000 milliseconds (10 seconds).",
                  "optional": true,
                  "default": "10000",
                  "nullable": false
                },
                {
                  "name": "dryrun",
                  "types": ["Boolean"],
                  "description": "If set to <code>true</code>, BigQuery doesn&#39;t run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "cache",
                  "types": ["Boolean"],
                  "description": "Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true. For more information, see <a href=\"https://developers.google.com/bigquery/querying-data\">query caching</a>.",
                  "optional": true,
                  "default": "true",
                  "nullable": false
                },
                {
                  "name": "dataset",
                  "types": ["String"],
                  "description": "Specifies the default datasetId and projectId to assume for any unqualified table names in the query. If not set, all table names in the query string must be qualified in the format &#39;datasetId.tableId&#39;.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "project",
                  "types": ["String"],
                  "description": "Specifies the default projectId to assume for any unqualified table names in the query. Only used if <code>dataset</code> option is set.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryData"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "dataset",
                "description": "<p>Retrieves an existing dataset by ID.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L241",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.dataset \"my_dataset\"\nputs dataset.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "dataset_id",
                  "types": ["String"],
                  "description": "The ID of a dataset.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Bigquery::Dataset",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the dataset does not exist."
                }
              ]
            },
            {
              "metadata": {
                "name": "create_dataset",
                "description": "<p>Creates a new dataset.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L308",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.create_dataset \"my_dataset\""
                  },
                  {
                    "caption": "A name and description can be provided:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.create_dataset \"my_dataset\",\n                                  name: \"My Dataset\",\n                                  description: \"This is my Dataset\""
                  },
                  {
                    "caption": "Access rules can be provided with the <code>access</code> option:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.create_dataset \"my_dataset\",\n  access: [{\"role\"=>\"WRITER\", \"userByEmail\"=>\"writers@example.com\"}]"
                  },
                  {
                    "caption": "Or, configure access with a block: (See {Dataset::Access})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.create_dataset \"my_dataset\" do |access|\n  access.add_writer_user \"writers@example.com\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "dataset_id",
                  "types": ["String"],
                  "description": "A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "A descriptive name for the dataset.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "description",
                  "types": ["String"],
                  "description": "A user-friendly description of the dataset.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "expiration",
                  "types": ["Integer"],
                  "description": "The default lifetime of all tables in the dataset, in milliseconds. The minimum value is 3600000 milliseconds (one hour).",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "access",
                  "types": ["Array<Hash>"],
                  "description": "The access rules for a Dataset using the Google Cloud Datastore API data structure of an array of hashes. See <a href=\"https://cloud.google.com/bigquery/access-control\">BigQuery Access Control</a> for more information.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::Dataset"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "datasets",
                "description": "<p>Retrieves the list of datasets belonging to the project.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L374",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndatasets = bigquery.datasets\ndatasets.each do |dataset|\n  puts dataset.name\nend"
                  },
                  {
                    "caption": "Retrieve all datasets, including hidden ones, with <code>:all</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nall_datasets = bigquery.datasets, all: true"
                  },
                  {
                    "caption": "With pagination: (See {Dataset::List#token})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nall_datasets = []\ntmp_datasets = bigquery.datasets\nwhile tmp_datasets.any? do\n  tmp_datasets.each do |dataset|\n    all_datasets << dataset\n  end\n  # break loop if no more datasets available\n  break if tmp_datasets.token.nil?\n  # get the next group of datasets\n  tmp_datasets = bigquery.datasets token: tmp_datasets.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "all",
                  "types": ["Boolean"],
                  "description": "Whether to list all datasets, including hidden ones. The default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of datasets to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Bigquery::Dataset>"],
                  "description": "(See {Gcloud::Bigquery::Dataset::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "job",
                "description": "<p>Retrieves an existing job by ID.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L401",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\njob = bigquery.job \"my_job\""
                  }
                ]
              },
              "params": [
                {
                  "name": "job_id",
                  "types": ["String"],
                  "description": "The ID of a job.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Bigquery::Job",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the job does not exist."
                }
              ]
            },
            {
              "metadata": {
                "name": "jobs",
                "description": "<p>Retrieves the list of jobs belonging to the project.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L466",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\njobs = bigquery.jobs"
                  },
                  {
                    "caption": "Retrieve only running jobs using the <code>:filter</code> option:",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nrunning_jobs = bigquery.jobs filter: \"running\""
                  },
                  {
                    "caption": "With pagination: (See {Job::List#token})",
                    "code": "\nrequire \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nall_jobs = []\ntmp_jobs = bigquery.jobs\nwhile tmp_jobs.any? do\n  tmp_jobs.each do |job|\n    all_jobs << job\n  end\n  # break loop if no more jobs available\n  break if tmp_jobs.token.nil?\n  # get the next group of jobs\n  tmp_jobs = bigquery.jobs token: tmp_jobs.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "all",
                  "types": ["Boolean"],
                  "description": "Whether to display jobs owned by all users in the project. The default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of jobs to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "filter",
                  "types": ["String"],
                  "description": "A filter for job state.</p>  <p>Acceptable values are: * <code>done</code> - Finished jobs * <code>pending</code> - Pending jobs * <code>running</code> - Running jobs",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Bigquery::Job>"],
                  "description": "(See {Gcloud::Bigquery::Job::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/project.rb#L481",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "dataset",
          "metadata": {
            "name": "Dataset",
            "description": "<h1>Dataset</h1>  <p>Represents a Dataset. A dataset is a grouping mechanism that holds zero or more tables. Datasets are the lowest level unit of access control; you cannot control access at the table level. A dataset is contained within a specific project.</p>",
            "source": "lib/gcloud/bigquery/dataset.rb#L43",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.create_dataset \"my_dataset\",\n                                  name: \"My Dataset\",\n                                  description: \"This is my Dataset\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "dataset_id",
                "description": "<p>A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_id",
                "description": "<p>The ID of the project containing this dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L75",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>A descriptive name for the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L94",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name=",
                "description": "<p>Updates the descriptive name for the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L103",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "etag",
                "description": "<p>A string hash of the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L112",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "api_url",
                "description": "<p>A URL that can be used to access the dataset using the REST API.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L122",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description",
                "description": "<p>A user-friendly description of the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L132",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "description=",
                "description": "<p>Updates the user-friendly description of the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L142",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_expiration",
                "description": "<p>The default lifetime of all tables in the dataset, in milliseconds.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L151",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_expiration=",
                "description": "<p>Updates the default lifetime of all tables in the dataset, in milliseconds.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L162",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time when this dataset was created.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L171",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "modified_at",
                "description": "<p>The date when this dataset or any of its tables was last modified.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L181",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "location",
                "description": "<p>The geographic location where the dataset should reside. Possible values include EU and US. The default value is US.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L192",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "access",
                "description": "<p>Retrieves the access rules for a Dataset using the Google Cloud Datastore API data structure of an array of hashes. The rules can be updated when passing a block, see {Dataset::Access} for all the methods available.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L237",
                "resources": [
                  {
                    "href": "https://cloud.google.com/bigquery/access-control",
                    "title": "BigQuery Access Control"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\ndataset.access #=> [{\"role\"=>\"OWNER\",\n               #     \"specialGroup\"=>\"projectOwners\"},\n               #    {\"role\"=>\"WRITER\",\n               #     \"specialGroup\"=>\"projectWriters\"},\n               #    {\"role\"=>\"READER\",\n               #     \"specialGroup\"=>\"projectReaders\"},\n               #    {\"role\"=>\"OWNER\",\n               #     \"userByEmail\"=>\"123456789-...com\"}]"
                  },
                  {
                    "caption": "Manage the access rules by passing a block:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\ndataset.access do |access|\n  access.add_owner_group \"owners@example.com\"\n  access.add_writer_user \"writer@example.com\"\n  access.remove_writer_user \"readers@example.com\"\n  access.add_reader_special :all\n  access.add_reader_view other_dataset_view_object\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "access=",
                "description": "<p>Sets the access rules for a Dataset using the Google Cloud Datastore API data structure of an array of hashes. See <a href=\"https://cloud.google.com/bigquery/access-control\">BigQuery Access Control</a> for more information.</p>  <p>This method is provided for advanced usage of managing the access rules. Calling {#access} with a block is the preferred way to manage access rules.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L274",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\ndataset.access = [{\"role\"=>\"OWNER\",\n                   \"specialGroup\"=>\"projectOwners\"},\n                  {\"role\"=>\"WRITER\",\n                   \"specialGroup\"=>\"projectWriters\"},\n                  {\"role\"=>\"READER\",\n                   \"specialGroup\"=>\"projectReaders\"},\n                  {\"role\"=>\"OWNER\",\n                   \"userByEmail\"=>\"123456789-...com\"}]"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Permanently deletes the dataset. The dataset must be empty before it can be deleted unless the <code>force</code> option is set to <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L299",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndataset = bigquery.dataset \"my_dataset\"\ndataset.delete"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, delete all the tables in the dataset. If <code>false</code> and the dataset contains tables, the request will fail. Default is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if the dataset was deleted."
                }
              ]
            },
            {
              "metadata": {
                "name": "create_table",
                "description": "<p>Creates a new table. If you are adapting existing code that was written for the <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables#resource\">Rest API </a>, you can pass the table&#39;s schema as a hash (see example.)</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L397",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"my_table\""
                  },
                  {
                    "caption": "You can also pass name and description options.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"my_table\"\n                             name: \"My Table\",\n                             description: \"A description of my table.\""
                  },
                  {
                    "caption": "You can define the table&#39;s schema using a block.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.create_table \"my_table\" do |schema|\n  schema.string \"first_name\", mode: :required\n  schema.record \"cities_lived\", mode: :repeated do |nested_schema|\n    nested_schema.string \"place\", mode: :required\n    nested_schema.integer \"number_of_years\", mode: :required\n  end\nend"
                  },
                  {
                    "caption": "You can pass the table&#39;s schema as a hash.",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\nschema = {\n  \"fields\" => [\n    {\n      \"name\" => \"first_name\",\n      \"type\" => \"STRING\",\n      \"mode\" => \"REQUIRED\"\n    },\n    {\n      \"name\" => \"cities_lived\",\n      \"type\" => \"RECORD\",\n      \"mode\" => \"REPEATED\",\n      \"fields\" => [\n        {\n          \"name\" => \"place\",\n          \"type\" => \"STRING\",\n          \"mode\" => \"REQUIRED\"\n        },\n        {\n          \"name\" => \"number_of_years\",\n          \"type\" => \"INTEGER\",\n          \"mode\" => \"REQUIRED\"\n        }\n      ]\n    }\n  ]\n}\ntable = dataset.create_table \"my_table\", schema: schema"
                  }
                ]
              },
              "params": [
                {
                  "name": "table_id",
                  "types": ["String"],
                  "description": "The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "A descriptive name for the table.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "description",
                  "types": ["String"],
                  "description": "A user-friendly description of the table.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "schema",
                  "types": ["Hash"],
                  "description": "A hash specifying fields and data types for the table. A block may be passed instead (see examples.) For the format of this hash, see the <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/tables#resource\">Tables resource </a> .",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::Table"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "create_view",
                "description": "<p>Creates a new view table from the given query.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L445",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\nview = dataset.create_view \"my_view\",\n          \"SELECT name, age FROM [proj:dataset.users]\""
                  },
                  {
                    "caption": "A name and description can be provided:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\nview = dataset.create_view \"my_view\",\n          \"SELECT name, age FROM [proj:dataset.users]\",\n          name: \"My View\", description: \"This is my view\""
                  }
                ]
              },
              "params": [
                {
                  "name": "table_id",
                  "types": ["String"],
                  "description": "The ID of the view table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "The query that BigQuery executes when the view is referenced.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "A descriptive name for the table.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "description",
                  "types": ["String"],
                  "description": "A user-friendly description of the table.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::View"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "table",
                "description": "<p>Retrieves an existing table by ID.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L469",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntable = dataset.table \"my_table\"\nputs table.name"
                  }
                ]
              },
              "params": [
                {
                  "name": "table_id",
                  "types": ["String"],
                  "description": "The ID of a table.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Bigquery::Table",
                    "Gcloud::Bigquery::View",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the table does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "tables",
                "description": "<p>Retrieves the list of tables belonging to the dataset.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L521",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\ntables = dataset.tables\ntables.each do |table|\n  puts table.name\nend"
                  },
                  {
                    "caption": "With pagination: (See {Dataset::List#token})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\ndataset = bigquery.dataset \"my_dataset\"\n\nall_tables = []\ntmp_tables = dataset.tables\nwhile tmp_tables.any? do\n  tmp_tables.each do |table|\n    all_tables << table\n  end\n  # break loop if no more tables available\n  break if tmp_tables.token.nil?\n  # get the next group of tables\n  tmp_tables = dataset.tables token: tmp_tables.token\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of tables to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Array<Gcloud::Bigquery::Table>",
                    "Array<Gcloud::Bigquery::View>"
                  ],
                  "description": "(See {Gcloud::Bigquery::Table::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "query_job",
                "description": "<p>Queries data using the <a href=\"https://cloud.google.com/bigquery/querying-data\">asynchronous method</a>.</p>  <p>Sets the current dataset as the default dataset in the query. Useful for using unqualified table names.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L595",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\njob = bigquery.query_job \"SELECT name FROM my_table\"\n\njob.wait_until_done!\nif !job.failed?\n  job.query_results.each do |row|\n    puts row[\"name\"]\n  end\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "A query string, following the BigQuery <a href=\"https://cloud.google.com/bigquery/query-reference\">query syntax</a>, of the query to execute. Example: &quot;SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "priority",
                  "types": ["String"],
                  "description": "Specifies a priority for the query. Possible values include <code>INTERACTIVE</code> and <code>BATCH</code>. The default value is <code>INTERACTIVE</code>.",
                  "optional": true,
                  "default": "\"INTERACTIVE\"",
                  "nullable": false
                },
                {
                  "name": "cache",
                  "types": ["Boolean"],
                  "description": "Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true. For more information, see <a href=\"https://developers.google.com/bigquery/querying-data\">query caching</a>.",
                  "optional": true,
                  "default": "true",
                  "nullable": false
                },
                {
                  "name": "table",
                  "types": ["Table"],
                  "description": "The destination table where the query results should be stored. If not present, a new table will be created to store the results.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "create",
                  "types": ["String"],
                  "description": "Specifies whether the job is allowed to create new tables.</p>  <p>The following values are supported: * <code>needed</code> - Create the table if it does not exist. * <code>never</code> - The table must already exist. A &#39;notFound&#39; error is   raised if the table does not exist.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "write",
                  "types": ["String"],
                  "description": "Specifies the action that occurs if the destination table already exists.</p>  <p>The following values are supported: * <code>truncate</code> - BigQuery overwrites the table data. * <code>append</code> - BigQuery appends the data to the table. * <code>empty</code> - A &#39;duplicate&#39; error is returned in the job result if the   table exists and contains data.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "large_results",
                  "types": ["Boolean"],
                  "description": "If <code>true</code>, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires <code>table</code> parameter to be set.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "flatten",
                  "types": ["Boolean"],
                  "description": "Flattens all nested and repeated fields in the query results. The default value is <code>true</code>. <code>large_results</code> parameter must be <code>true</code> if this is set to <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryJob"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "query",
                "description": "<p>Queries data using the <a href=\"https://cloud.google.com/bigquery/querying-data\">synchronous method</a>.</p>  <p>Sets the current dataset as the default dataset in the query. Useful for using unqualified table names.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L658",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\ndata = bigquery.query \"SELECT name FROM my_table\"\ndata.each do |row|\n  puts row[\"name\"]\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["String"],
                  "description": "A query string, following the BigQuery <a href=\"https://cloud.google.com/bigquery/query-reference\">query syntax</a>, of the query to execute. Example: &quot;SELECT count(f1) FROM [myProjectId:myDatasetId.myTableId]&quot;.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "timeout",
                  "types": ["Integer"],
                  "description": "How long to wait for the query to complete, in milliseconds, before the request times out and returns. Note that this is only a timeout for the request, not the query. If the query takes longer to run than the timeout value, the call returns without any results and with QueryData#complete? set to false. The default value is 10000 milliseconds (10 seconds).",
                  "optional": true,
                  "default": "10000",
                  "nullable": false
                },
                {
                  "name": "dryrun",
                  "types": ["Boolean"],
                  "description": "If set to <code>true</code>, BigQuery doesn&#39;t run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is <code>false</code>.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "cache",
                  "types": ["Boolean"],
                  "description": "Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true. For more information, see <a href=\"https://developers.google.com/bigquery/querying-data\">query caching</a>.",
                  "optional": true,
                  "default": "true",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryData"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "insert_table",
                "description": "",
                "source": "lib/gcloud/bigquery/dataset.rb#L682",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L693",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/dataset.rb#L697",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_full_data!",
                "description": "<p>Load the complete representation of the dataset if it has been only partially loaded by a request to the API list method.</p>",
                "source": "lib/gcloud/bigquery/dataset.rb#L710",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload_gapi!",
                "description": "",
                "source": "lib/gcloud/bigquery/dataset.rb#L714",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "data_complete?",
                "description": "",
                "source": "lib/gcloud/bigquery/dataset.rb#L724",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "copyjob",
          "metadata": {
            "name": "CopyJob",
            "description": "<h1>CopyJob</h1>  <p>A {Job} subclass representing a copy operation that may be performed on a {Table}. A CopyJob instance is created when you call {Table#copy}.</p>",
            "source": "lib/gcloud/bigquery/copy_job.rb#L29",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/docs/tables#copyingtable",
                "title": "Copying an Existing Table"
              },
              {
                "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                "title": "Jobs API reference"
              }
            ],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "source",
                "description": "<p>The table from which data is copied. This is the table on which {Table#copy} was called. Returns a {Table} instance.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L33",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "destination",
                "description": "<p>The table to which data is copied. Returns a {Table} instance.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L43",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_if_needed?",
                "description": "<p>Checks if the create disposition for the job is <code>CREATE_IF_NEEDED</code>, which provides the following behavior: If the table does not exist, the copy operation creates the table. This is the default.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L55",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "create_never?",
                "description": "<p>Checks if the create disposition for the job is <code>CREATE_NEVER</code>, which provides the following behavior: The table must already exist; if it does not, an error is returned in the job result.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L64",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "write_truncate?",
                "description": "<p>Checks if the write disposition for the job is <code>WRITE_TRUNCATE</code>, which provides the following behavior: If the table already exists, the copy operation overwrites the table data.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L73",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "write_append?",
                "description": "<p>Checks if the write disposition for the job is <code>WRITE_APPEND</code>, which provides the following behavior: If the table already exists, the copy operation appends the data to the table.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L82",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "write_empty?",
                "description": "<p>Checks if the write disposition for the job is <code>WRITE_EMPTY</code>, which provides the following behavior: If the table already exists and contains data, the job will have an error. This is the default.</p>",
                "source": "lib/gcloud/bigquery/copy_job.rb#L91",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "loadjob",
          "metadata": {
            "name": "LoadJob",
            "description": "<h1>LoadJob</h1>  <p>A {Job} subclass representing a load operation that may be performed on a {Table}. A LoadJob instance is created when you call {Table#load}.</p>",
            "source": "lib/gcloud/bigquery/load_job.rb#L29",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/loading-data-into-bigquery",
                "title": "Loading Data Into BigQuery"
              },
              {
                "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                "title": "Jobs API reference"
              }
            ],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "sources",
                "description": "<p>The URI or URIs representing the Google Cloud Storage files from which the operation loads data.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L33",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "destination",
                "description": "<p>The table into which the operation loads data. This is the table on which {Table#load} was invoked. Returns a {Table} instance.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delimiter",
                "description": "<p>The delimiter used between fields in the source data. The default is a comma (,).</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L51",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "skip_leading_rows",
                "description": "<p>The number of header rows at the top of a CSV file to skip. The default value is <code>0</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L60",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "utf8?",
                "description": "<p>Checks if the character encoding of the data is UTF-8. This is the default.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L69",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "iso8859_1?",
                "description": "<p>Checks if the character encoding of the data is ISO-8859-1.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "quote",
                "description": "<p>The value that is used to quote data sections in a CSV file. The default value is a double-quote (<code>&quot;</code>). If your data does not contain quoted sections, the value should be an empty string. If your data contains quoted newline characters, {#quoted_newlines?} should return <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L88",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "max_bad_records",
                "description": "<p>The maximum number of bad records that the load operation can ignore. If the number of bad records exceeds this value, an error is returned. The default value is <code>0</code>, which requires that all records be valid.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L99",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "quoted_newlines?",
                "description": "<p>Checks if quoted data sections may contain newline characters in a CSV file. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L108",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "json?",
                "description": "<p>Checks if the format of the source data is <a href=\"http://jsonlines.org/\">newline-delimited JSON</a>. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L117",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "csv?",
                "description": "<p>Checks if the format of the source data is CSV. The default is <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L124",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "backup?",
                "description": "<p>Checks if the source data is a Google Cloud Datastore backup.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L132",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "allow_jagged_rows?",
                "description": "<p>Checks if the load operation accepts rows that are missing trailing optional columns. The missing values are treated as nulls. If <code>false</code>, records with missing trailing columns are treated as bad records, and if there are too many bad records, an error is returned. The default value is <code>false</code>. Only applicable to CSV, ignored for other formats.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L143",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "ignore_unknown_values?",
                "description": "<p>Checks if the load operation allows extra values that are not represented in the table schema. If <code>true</code>, the extra values are ignored. If <code>false</code>, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L155",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "schema",
                "description": "<p>The schema for the data. Returns a hash. Can be empty if the table has already has the correct schema (see {Table#schema=} and {Table#schema}), or if the schema can be inferred from the loaded data.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L165",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "input_files",
                "description": "<p>The number of source files.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L173",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "input_file_bytes",
                "description": "<p>The number of bytes of source data.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L179",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "output_rows",
                "description": "<p>The number of rows that have been loaded into the table. While an import job is in the running state, this value may change.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L186",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "output_bytes",
                "description": "<p>The number of bytes that have been loaded into the table. While an import job is in the running state, this value may change.</p>",
                "source": "lib/gcloud/bigquery/load_job.rb#L193",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "queryjob",
          "metadata": {
            "name": "QueryJob",
            "description": "<h1>QueryJob</h1>  <p>A {Job} subclass representing a query operation that may be performed on a {Table}. A QueryJob instance is created when you call {Project#query<em>job}, {Dataset#query</em>job}, or {View#data}.</p>",
            "source": "lib/gcloud/bigquery/query_job.rb#L29",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/querying-data",
                "title": "Querying Data"
              },
              {
                "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                "title": "Jobs API reference"
              }
            ],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "batch?",
                "description": "<p>Checks if the priority for the query is <code>BATCH</code>.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L32",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "interactive?",
                "description": "<p>Checks if the priority for the query is <code>INTERACTIVE</code>.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L39",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "large_results?",
                "description": "<p>Checks if the the query job allows arbitrarily large results at a slight cost to performance.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L48",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "cache?",
                "description": "<p>Checks if the query job looks for an existing result in the query cache. For more information, see <a href=\"https://cloud.google.com/bigquery/querying-data#querycaching\">Query Caching</a>.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L58",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "flatten?",
                "description": "<p>Checks if the query job flattens nested and repeated fields in the query results. The default is <code>true</code>. If the value is <code>false</code>, #large_results? should return <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L68",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "cache_hit?",
                "description": "<p>Checks if the query results are from the query cache.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L76",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "bytes_processed",
                "description": "<p>The number of bytes processed by the query.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L82",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "destination",
                "description": "<p>The table in which the query results are stored.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L88",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_results",
                "description": "<p>Retrieves the query results for the job.</p>",
                "source": "lib/gcloud/bigquery/query_job.rb#L125",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nbigquery = gcloud.bigquery\n\nq = \"SELECT word FROM publicdata:samples.shakespeare\"\njob = bigquery.query_job q\n\njob.wait_until_done!\ndata = job.query_results\ndata.each do |row|\n  puts row[\"word\"]\nend\ndata = data.next if data.next?"
                  }
                ]
              },
              "params": [
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "Page token, returned by a previous call, identifying the result set.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of results to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "start",
                  "types": ["Integer"],
                  "description": "Zero-based index of the starting row to read.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "timeout",
                  "types": ["Integer"],
                  "description": "How long to wait for the query to complete, in milliseconds, before returning. Default is 10,000 milliseconds (10 seconds).",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Bigquery::QueryData"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>as well as expose the API calls.</p>",
            "source": "lib/gcloud/bigquery/connection.rb#L26",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>Returns the value of attribute project</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L29",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project=",
                "description": "<p>Sets the attribute project</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L29",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute project to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>Returns the value of attribute credentials</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>Sets the attribute credentials</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute credentials to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "list_datasets",
                "description": "<p>Lists all datasets in the specified project to which you have been granted the READER dataset role.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L46",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_dataset",
                "description": "<p>Returns the dataset specified by datasetID.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L61",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_dataset",
                "description": "<p>Creates a new empty dataset.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L70",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_dataset",
                "description": "<p>Updates information in an existing dataset, only replacing fields that are provided in the submitted dataset resource.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_dataset",
                "description": "<p>Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying force: true in options. Immediately after deletion, you can create another dataset with the same name.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L97",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_tables",
                "description": "<p>Lists all tables in the specified dataset. Requires the READER dataset role.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L109",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_project_table",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L122",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_table",
                "description": "<p>Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L135",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_table",
                "description": "<p>Creates a new, empty table in the dataset.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L141",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_table",
                "description": "<p>Updates information in an existing table, replacing fields that are provided in the submitted table resource.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L152",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_table",
                "description": "<p>Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L164",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_tabledata",
                "description": "<p>Retrieves data from the table.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L174",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_tabledata",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L188",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_jobs",
                "description": "<p>Lists all jobs in the specified project to which you have been granted the READER job role.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L201",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_job",
                "description": "<p>Returns the job specified by jobID.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L210",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_job",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L217",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_job",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L225",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L233",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "job_query_results",
                "description": "<p>Returns the query data for the job</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L243",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "copy_table",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L257",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "link_table",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L265",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "extract_table",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L273",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_table",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L281",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_multipart",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L290",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_resumable",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L301",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_access_rules",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L315",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "table_ref_from_s",
                "description": "<p>Extracts at least <code>tbl</code> group, and possibly <code>dts</code> and <code>prj</code> groups, from strings in the formats: &quot;my<em>table&quot;, &quot;my</em>dataset.my<em>table&quot;, or &quot;my-project:my</em>dataset.my<em>table&quot;. Then merges project</em>id and dataset_id from the default table if they are missing.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L329",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L341",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_dataset_request",
                "description": "<p>Create the HTTP body for insert dataset</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L349",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_dataset_request",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L362",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_jobs_params",
                "description": "<p>The parameters for the list_jobs call.</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L373",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_table_request",
                "description": "<p>Create the HTTP body for insert table</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L386",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "patch_table_request",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L399",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_tabledata_rows",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L408",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_table_config",
                "description": "<p>Job description for query job</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L426",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query_config",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L460",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "copy_table_config",
                "description": "<p>Job description for copy job</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L480",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "link_table_config",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L494",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "extract_table_config",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L510",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_table_config",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L530",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_disposition",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L557",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "write_disposition",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L567",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "priority_value",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L579",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "source_format",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L584",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "projection_fields",
                "description": "",
                "source": "lib/gcloud/bigquery/connection.rb#L600",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "load_media",
                "description": "<p>rubocop:enable all</p>",
                "source": "lib/gcloud/bigquery/connection.rb#L606",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "querydata",
          "metadata": {
            "name": "QueryData",
            "description": "<h1>QueryData</h1>  <p>Represents Data returned from a query a a list of name/value pairs.</p>",
            "source": "lib/gcloud/bigquery/query_data.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "total_bytes",
                "description": "<p>The total number of bytes processed for this query.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L36",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "complete?",
                "description": "<p>Whether the query has completed or not. When data is present this will always be <code>true</code>. When <code>false</code>, <code>total</code> will not be available.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L42",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "cache_hit?",
                "description": "<p>Whether the query result was fetched from the query cache.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L47",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "schema",
                "description": "<p>The schema of the data.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L53",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "fields",
                "description": "<p>The fields of the data.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "headers",
                "description": "<p>The name of the columns in the data.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L71",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "next?",
                "description": "<p>Is there a next page of data?</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "next",
                "description": "",
                "source": "lib/gcloud/bigquery/query_data.rb#L81",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "job",
                "description": "<p>The BigQuery {Job} that was created to run the query.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L94",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/bigquery/query_data.rb#L123",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "job?",
                "description": "",
                "source": "lib/gcloud/bigquery/query_data.rb#L127",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "job_id",
                "description": "",
                "source": "lib/gcloud/bigquery/query_data.rb#L131",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "extractjob",
          "metadata": {
            "name": "ExtractJob",
            "description": "<h1>ExtractJob</h1>  <p>A {Job} subclass representing an export operation that may be performed on a {Table}. A ExtractJob instance is created when you call {Table#extract}.</p>",
            "source": "lib/gcloud/bigquery/extract_job.rb#L30",
            "resources": [
              {
                "href": "https://cloud.google.com/bigquery/exporting-data-from-bigquery",
                "title": "Exporting Data From BigQuery"
              },
              {
                "href": "https://cloud.google.com/bigquery/docs/reference/v2/jobs",
                "title": "Jobs API reference"
              }
            ],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "destinations",
                "description": "<p>The URI or URIs representing the Google Cloud Storage files to which the data is exported.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "source",
                "description": "<p>The table from which the data is exported. This is the table upon which {Table#extract} was called. Returns a {Table} instance.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L41",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "compression?",
                "description": "<p>Checks if the export operation compresses the data using gzip. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L52",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "json?",
                "description": "<p>Checks if the destination format for the data is <a href=\"http://jsonlines.org/\">newline-delimited JSON</a>. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L60",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "csv?",
                "description": "<p>Checks if the destination format for the data is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default is <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L68",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "avro?",
                "description": "<p>Checks if the destination format for the data is <a href=\"http://avro.apache.org/\">Avro</a>. The default is <code>false</code>.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delimiter",
                "description": "<p>The symbol the operation uses to delimit fields in the exported data. The default is a comma (,).</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L85",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "print_header?",
                "description": "<p>Checks if the exported data contains a header row. The default is <code>true</code>.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L94",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "destinations_file_counts",
                "description": "<p>The count of files per destination URI or URI pattern specified in {#destinations}. Returns an Array of values in the same order as the URI patterns.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L104",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "destinations_counts",
                "description": "<p>The count of files per destination URI or URI pattern specified in {#destinations}. Returns a Hash with the URI patterns as keys and the counts as values.</p>",
                "source": "lib/gcloud/bigquery/extract_job.rb#L112",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/bigquery/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "insertresponse",
          "metadata": {
            "name": "InsertResponse",
            "description": "<p>InsertResponse</p>",
            "source": "lib/gcloud/bigquery/insert_response.rb#L20",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "success?",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L27",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "insert_count",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L31",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "error_count",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L35",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "insert_errors",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L39",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "error_rows",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L49",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors_for",
                "description": "",
                "source": "lib/gcloud/bigquery/insert_response.rb#L57",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        }
      ]
    },
    {
      "id": "datastore",
      "metadata": {
        "name": "Datastore",
        "description": "<h1>Google Cloud Datastore</h1>  <p>Google Cloud Datastore is a fully managed, schemaless database for storing non-relational data. You should feel at home if you are familiar with relational databases, but there are some key differences to be aware of to make the most of using Datastore.</p>  <p>Gcloud&#39;s goal is to provide a API that is familiar and comfortable to Rubyists. Authentication is handled by Gcloud#datastore. You can provide the project and credential information to connect to the Datastore service, or if you are running on Google Compute Engine this configuration is taken care of for you.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new &quot;my-todo-project&quot;,                     &quot;/path/to/keyfile.json&quot; dataset = gcloud.datastore entity = dataset.find &quot;Task&quot;, &quot;start&quot; entity[&quot;completed&quot;] = true dataset.save entity ```</p>  <p>You can learn more about various options for connection on the <a href=\"../AUTHENTICATION\">Authentication Guide</a>.</p>  <p>To learn more about Datastore, read the <a href=\"https://cloud.google.com/datastore/docs/concepts/overview\">Google Cloud Datastore Concepts Overview </a>.</p>  <h2>Retrieving Records</h2>  <p>Records, called &quot;entities&quot; in Datastore, are retrieved by using a Key. The Key is more than a numeric identifier, it is a complex data structure that can be used to model relationships. The simplest Key has a string <tt>kind</tt> value, and either a numeric <tt>id</tt> value, or a string <tt>name</tt> value. A single record can be retrieved by calling Gcloud::Datastore::Dataset#find and passing the parts of the key:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore entity = dataset.find &quot;Task&quot;, &quot;start&quot; ```</p>  <p>Optionally, Gcloud::Datastore::Dataset#find can be given a Key object:</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore key = dataset.key &quot;Task&quot;, 12345 entity = dataset.find key ```</p>  <p>See Gcloud::Datastore::Dataset#find</p>  <h2>Querying Records</h2>  <p>Multiple records can be found that match criteria. (See Gcloud::Datastore::Query#where)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore query = dataset.query(&quot;List&quot;).   where(&quot;active&quot;, &quot;=&quot;, true) active_lists = dataset.run query ```</p>  <p>Records can also be ordered. (See Gcloud::Datastore::Query#order)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore query = dataset.query(&quot;List&quot;).   where(&quot;active&quot;, &quot;=&quot;, true).   order(&quot;name&quot;) active_lists = dataset.run query ```</p>  <p>The number of records returned can be specified. (See Gcloud::Datastore::Query#limit)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore query = dataset.query(&quot;List&quot;).   where(&quot;active&quot;, &quot;=&quot;, true).   order(&quot;name&quot;).   limit(5) active_lists = dataset.run query ```</p>  <p>Records&#39; Key structures can also be queried. (See Gcloud::Datastore::Query#ancestor)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore</p>  <p>list = dataset.find &quot;List&quot;, &quot;todos&quot; query = dataset.query(&quot;Task&quot;).   ancestor(list.key) items = dataset.run query ```</p>  <p>See Gcloud::Datastore::Query and Gcloud::Datastore::Dataset#run</p>  <h2>Paginating Records</h2>  <p>All Records may not return at once, requiring multiple calls to Datastore to return them all. The returned records will have a <tt>cursor</tt> if there are more available.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore</p>  <p>list = dataset.find &quot;List&quot;, &quot;todos&quot; query = dataset.query(&quot;Task&quot;).   ancestor(list.key) all<em>tasks = [] tmp</em>tasks = dataset.run query while tmp<em>tasks.any? do   tmp</em>tasks.each do |task|     all<em>tasks &lt;&lt; task   end   # break loop if no more tasks available   break if tmp</em>tasks.cursor.nil?   # set cursor on the query   query = query.cursor tmp<em>tasks.cursor   # query for more records   tmp</em>tasks = dataset.run query end ```</p>  <p>See Gcloud::Datastore::Dataset::LookupResults and Gcloud::Datastore::Dataset::QueryResults</p>  <h2>Creating Records</h2>  <p>New entities can be created and persisted buy calling Dataset#save. The entity must have a Key to be saved. If the Key is incomplete then it will be completed when saved.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore entity = dataset.entity &quot;User&quot; do |e|   e[&quot;name&quot;] = &quot;Heidi Henderson&quot; end entity.key.id #=&gt; nil dataset.save entity entity.key.id #=&gt; 123456789 ```</p>  <h2>Updating Records</h2>  <p>Entities hold properties. A property has a name that is a string or symbol, and a value that is an object. Most value objects are supported, including String, Integer, Date, Time, and even other Entity or Key objects. Changes to the Entity&#39;s properties are persisted by calling Dataset#save.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore entity = dataset.find &quot;User&quot;, &quot;heidi&quot;</p>  <h1>Read the status property</h1>  <p>entity[&quot;status&quot;] #=&gt; &quot;inactive&quot;</p>  <h1>Write the status property</h1>  <p>entity[&quot;status&quot;] = &quot;active&quot;</p>  <h1>Persist the changes</h1>  <p>dataset.save entity ```</p>  <h2>Deleting Records</h2>  <p>Entities can be removed from Datastore by calling Dataset#delete and passing the Entity object or the entity&#39;s Key object.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore entity = dataset.find &quot;User&quot;, &quot;heidi&quot; dataset.delete entity ```</p>  <h2>Transactions</h2>  <p>Complex logic can be wrapped in a Transaction. All queries and updates within the Dataset#transaction block are run within the transaction scope, and will be automatically committed when the block completes.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore</p>  <p>key = dataset.key &quot;User&quot;, &quot;heidi&quot;</p>  <p>user = dataset.entity key do |u|   u[&quot;name&quot;] = &quot;Heidi Henderson&quot;   u[&quot;email&quot;] = &quot;heidi@example.net&quot; end</p>  <p>dataset.transaction do |tx|   if tx.find(user.key).nil?     tx.save user   end end ```</p>  <p>Alternatively, if no block is given the transaction object is returned allowing you to commit or rollback manually.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new dataset = gcloud.datastore</p>  <p>key = dataset.key &quot;User&quot;, &quot;heidi&quot;</p>  <p>user = dataset.entity key do |u|   u[&quot;name&quot;] = &quot;Heidi Henderson&quot;   u[&quot;email&quot;] = &quot;heidi@example.net&quot; end</p>  <p>tx = dataset.transaction begin   if tx.find(user.key).nil?     tx.save user   end   tx.commit rescue   tx.rollback end ```</p>  <p>See Gcloud::Datastore::Transaction and Gcloud::Datastore::Dataset#transaction</p>",
        "source": "lib/gcloud/datastore.rb#L330",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "key",
          "metadata": {
            "name": "Key",
            "description": "<h1>Key</h1>  <p>Every Datastore record has an identifying key, which includes the record&#39;s entity kind and a unique identifier. The identifier may be either a key name string, assigned explicitly by the application, or an integer numeric ID, assigned automatically by Datastore.</p>",
            "source": "lib/gcloud/datastore/key.rb#L31",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "kind",
                "description": "<p>The kind of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L42",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"User\"\nkey.kind #=> \"User\"\nkey.kind = \"Task\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "kind=",
                "description": "<p>The kind of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L42",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"User\"\nkey.kind #=> \"User\"\nkey.kind = \"Task\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "dataset_id",
                "description": "<p>The dataset_id of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L59",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi@example.com\"\nentity.key.dataset_id #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "dataset_id=",
                "description": "<p>The dataset_id of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L59",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi@example.com\"\nentity.key.dataset_id #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["String"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "namespace",
                "description": "<p>The namespace of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L76",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi@example.com\"\nentity.key.namespace #=> \"ns~todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "String",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "namespace=",
                "description": "<p>The namespace of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L76",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi@example.com\"\nentity.key.namespace #=> \"ns~todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "String",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Create a new Key instance.</p>",
                "source": "lib/gcloud/datastore/key.rb#L90",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\""
                  }
                ]
              },
              "params": [
                {
                  "name": "kind",
                  "types": ["String"],
                  "description": "The kind of the Key. This is optional.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "id_or_name",
                  "types": [
                    "Integer",
                    "String"
                  ],
                  "description": "The id or name of the Key. This is optional.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Dataset::Key"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "id",
                "description": "<p>The id of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L127",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"User\", 123456\nkey.id #=> 123456"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Integer",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The name of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L157",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nkey.name #=> \"heidi@example.com\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "String",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "parent",
                "description": "<p>The parent of the Key.</p>",
                "source": "lib/gcloud/datastore/key.rb#L191",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nuser = dataset.find \"User\", \"heidi@example.com\"\nquery = dataset.query(\"List\").\n  ancestor(user.key)\nlists = dataset.run query\nlists.first.key.parent #=> Key(\"User\", \"heidi@example.com\")"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Key",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "path",
                "description": "<p>Represent the Key&#39;s path (including parent) as an array of arrays. Each inner array contains two values, the kind and the id or name. If neither an id or name exist then nil will be returned.</p>",
                "source": "lib/gcloud/datastore/key.rb#L205",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = Gcloud::Datastore::Key.new \"List\", \"todos\"\nkey.parent = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nkey.path #=> [[\"User\", \"heidi@example.com\"], [\"List\", \"todos\"]]"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Array<(String, String)>>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "complete?",
                "description": "<p>Determine if the key is complete. A complete key has either an id or a name.</p>  <p>Inverse of {#incomplete?}</p>",
                "source": "lib/gcloud/datastore/key.rb#L215",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "incomplete?",
                "description": "<p>Determine if the key is incomplete. An incomplete key has neither an id nor a name.</p>  <p>Inverse of {#complete?}</p>",
                "source": "lib/gcloud/datastore/key.rb#L224",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            }
          ]
        },
        {
          "id": "query",
          "metadata": {
            "name": "Query",
            "description": "<h1>Query</h1>  <p>Represents the search criteria against a Datastore.</p>",
            "source": "lib/gcloud/datastore/query.rb#L34",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"completed\", \"=\", true)\n\nentities = dataset.run query"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Returns a new query object.</p>",
                "source": "lib/gcloud/datastore/query.rb#L41",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Query"],
                  "description": "a new instance of Query"
                }
              ]
            },
            {
              "metadata": {
                "name": "kind",
                "description": "<p>Add the kind of entities to query.</p>",
                "source": "lib/gcloud/datastore/query.rb#L54",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind \"Task\"\n\nall_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "where",
                "description": "<p>Add a property filter to the query.</p>",
                "source": "lib/gcloud/datastore/query.rb#L71",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  where(\"completed\", \"=\", true)\n\ncompleted_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ancestor",
                "description": "<p>Add a filter for entities that inherit from a key.</p>",
                "source": "lib/gcloud/datastore/query.rb#L96",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  ancestor(parent.key)\n\ncompleted_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "order",
                "description": "<p>Sort the results by a property name. By default, an ascending sort order will be used. To sort in descending order, provide a second argument of a string or symbol that starts with &quot;d&quot;.</p>",
                "source": "lib/gcloud/datastore/query.rb#L115",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  order(\"due\", :desc)\n\nsorted_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "limit",
                "description": "<p>Set a limit on the number of results to be returned.</p>",
                "source": "lib/gcloud/datastore/query.rb#L135",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(10)\n\npaginated_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "offset",
                "description": "<p>Set an offset for the results to be returned.</p>",
                "source": "lib/gcloud/datastore/query.rb#L151",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(10).\n  offset(20)\n\npaginated_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "start",
                "description": "<p>Set the cursor to start the results at.</p>",
                "source": "lib/gcloud/datastore/query.rb#L167",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  limit(10).\n  cursor(task_cursor)\n\npaginated_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "select",
                "description": "<p>Retrieve only select properties from the matched entities.</p>",
                "source": "lib/gcloud/datastore/query.rb#L183",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  select(\"completed\", \"due\")\n\npartial_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "group_by",
                "description": "<p>Group results by a list of properties.</p>",
                "source": "lib/gcloud/datastore/query.rb#L200",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = Gcloud::Datastore::Query.new\nquery.kind(\"Task\").\n  group_by(\"completed\")\n\ngrouped_tasks = dataset.run query"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "entity",
          "metadata": {
            "name": "Entity",
            "description": "<h1>Entity</h1>  <p>Entity represents a Datastore record. Every Entity has a {Key}, and a list of properties.</p>",
            "source": "lib/gcloud/datastore/entity.rb#L33",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "entity = Gcloud::Datastore::Entity.new\nentity.key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nentity[\"name\"] = \"Heidi Henderson\""
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "key",
                "description": "<p>The Key that identifies the entity.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L36",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Create a new Entity object.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Entity"],
                  "description": "a new instance of Entity"
                }
              ]
            },
            {
              "metadata": {
                "name": "[]",
                "description": "<p>Retrieve a property value by providing the name.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L69",
                "resources": [],
                "examples": [
                  {
                    "caption": "Properties can be retrieved with a string name:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nuser = dataset.find \"User\", \"heidi@example.com\"\nuser[\"name\"] #=> \"Heidi Henderson\""
                  },
                  {
                    "caption": "Or with a symbol name:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nuser = dataset.find \"User\", \"heidi@example.com\"\nuser[:name] #=> \"Heidi Henderson\""
                  }
                ]
              },
              "params": [
                {
                  "name": "prop_name",
                  "types": [
                    "String",
                    "Symbol"
                  ],
                  "description": "The name of the property.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Object",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the property doesn&#39;t exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "[]=",
                "description": "<p>Set a property value by name.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L95",
                "resources": [],
                "examples": [
                  {
                    "caption": "Properties can be set with a string name:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nuser = dataset.find \"User\", \"heidi@example.com\"\nuser[\"name\"] = \"Heidi H. Henderson\""
                  },
                  {
                    "caption": "Or with a symbol name:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nuser = dataset.find \"User\", \"heidi@example.com\"\nuser[:name] = \"Heidi H. Henderson\""
                  }
                ]
              },
              "params": [
                {
                  "name": "prop_name",
                  "types": [
                    "String",
                    "Symbol"
                  ],
                  "description": "The name of the property.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "prop_value",
                  "types": ["Object"],
                  "description": "The value of the property.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "properties",
                "description": "<p>Retrieve properties in a hash-like structure. Properties can be accessed or set by string or symbol.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L125",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "entity.properties[:name] = \"Heidi H. Henderson\"\nentity.properties[\"name\"] #=> \"Heidi H. Henderson\"\n\nentity.properties.each do |name, value|\n  puts \"property #{name} has a value of #{value}\"\nend"
                  },
                  {
                    "caption": "A property&#39;s existence can be determined by calling <code>exist?</code>:",
                    "code": "entity.properties.exist? :name #=> true\nentity.properties.exist? \"name\" #=> true\nentity.properties.exist? :expiration #=> false"
                  },
                  {
                    "caption": "A property can be removed from the entity:",
                    "code": "entity.properties.delete :name\nentity.save"
                  },
                  {
                    "caption": "The properties can be converted to a hash:",
                    "code": "prop_hash = entity.properties.to_h"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Properties"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "key=",
                "description": "<p>Sets the Key that identifies the entity.</p>  <p>Once the entity is saved, the key is frozen and immutable. Trying to set a key when immutable will raise a <code>RuntimeError</code>.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L153",
                "resources": [],
                "examples": [
                  {
                    "caption": "The Key can be set before the entity is saved:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = Gcloud::Datastore::Entity.new\nentity.key = Gcloud::Datastore::Key.new \"User\"\ndataset.save entity"
                  },
                  {
                    "caption": "Once the entity is saved, the key is frozen and immutable:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\nentity = dataset.find \"User\", \"heidi@example.com\"\nentity.persisted? #=> true\nentity.key = Gcloud::Datastore::Key.new \"User\" #=> RuntimeError\nentity.key.frozen? #=> true\nentity.key.id = 9876543221 #=> RuntimeError"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "persisted?",
                "description": "<p>Indicates if the record is persisted. Default is false.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L173",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nnew_entity = Gcloud::Datastore::Entity.new\nnew_entity.persisted? #=> false\n\nfound_entity = dataset.find \"User\", \"heidi@example.com\"\nfound_entity.persisted? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "exclude_from_indexes?",
                "description": "<p>Indicates if a property is flagged to be excluded from the Datastore indexes. The default value is false.</p>",
                "source": "lib/gcloud/datastore/entity.rb#L189",
                "resources": [],
                "examples": [
                  {
                    "caption": "Single property values will return a single flag setting:",
                    "code": "entity[\"age\"] = 21\nentity.exclude_from_indexes? \"age\" #=> false"
                  },
                  {
                    "caption": "Array property values will return an array of flag settings:",
                    "code": "entity[\"tags\"] = [\"ruby\", \"code\"]\nentity.exclude_from_indexes? \"tags\" #=> [false, false]"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "exclude_from_indexes!",
                "description": "<p>Flag a property to be excluded from the Datastore indexes. Setting true will exclude the property from the indexes. Setting false will include the property on any applicable indexes. The default value for the flag is false.</p>  <p>entity[&quot;age&quot;] = 21   entity.exclude<em>from</em>indexes! &quot;age&quot;, true</p>  <p>Properties that are arrays can be given multiple exclude flags.</p>  <p>entity[&quot;tags&quot;] = [&quot;ruby&quot;, &quot;code&quot;]   entity.exclude<em>from</em>indexes! &quot;tags&quot;, [true, false]</p>  <p>Or, array properties can be given a single flag that will be applied to each item in the array.</p>  <p>entity[&quot;tags&quot;] = [&quot;ruby&quot;, &quot;code&quot;]   entity.exclude<em>from</em>indexes! &quot;tags&quot;, true</p>  <p>Flags can also be set with a block for either single and array values.</p>  <p>entity[&quot;age&quot;] = 21   entity.exclude<em>from</em>indexes! &quot;age&quot; do |age|     age &gt; 18   end</p>",
                "source": "lib/gcloud/datastore/entity.rb#L221",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<h1>Datastore Error</h1>  <p>Base Datastore exception class.</p>",
            "source": "lib/gcloud/datastore/errors.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "keyfileerror",
          "metadata": {
            "name": "KeyfileError",
            "description": "<h1>KeyfileError</h1>  <p>Raised when a keyfile is not correct.</p>",
            "source": "lib/gcloud/datastore/errors.rb#L31",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<h1>ApiError</h1>  <p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/datastore/errors.rb#L38",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "method",
                "description": "<p>The API method of the failed HTTP request.</p>",
                "source": "lib/gcloud/datastore/errors.rb#L41",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "response",
                "description": "<p>The response object of the failed HTTP request.</p>",
                "source": "lib/gcloud/datastore/errors.rb#L45",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "propertyerror",
          "metadata": {
            "name": "PropertyError",
            "description": "<h1>PropertyError</h1>  <p>Raised when a property is not correct.</p>",
            "source": "lib/gcloud/datastore/errors.rb#L59",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "transactionerror",
          "metadata": {
            "name": "TransactionError",
            "description": "<h1>TransactionError</h1>  <p>General error for Transaction problems.</p>",
            "source": "lib/gcloud/datastore/errors.rb#L66",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "inner",
                "description": "<p>An error that occurred within the transaction. (optional)</p>",
                "source": "lib/gcloud/datastore/errors.rb#L69",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "dataset",
          "metadata": {
            "name": "Dataset",
            "description": "<h1>Dataset</h1>  <p>Dataset is the data saved in a project&#39;s Datastore. Dataset is analogous to a database in relational database world.</p>  <p>Gcloud::Datastore::Dataset is the main object for interacting with Google Datastore. {Gcloud::Datastore::Entity} objects are created, read, updated, and deleted by Gcloud::Datastore::Dataset.</p>  <p>See {Gcloud#datastore}</p>",
            "source": "lib/gcloud/datastore/dataset.rb#L50",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nquery = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\n\ntasks = dataset.run query"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project",
                "description": "<p>The Datastore project connected to.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L76",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new \"my-todo-project\",\n                    \"/path/to/keyfile.json\"\n\ndataset = gcloud.datastore\ndataset.project #=> \"my-todo-project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "allocate_ids",
                "description": "<p>Generate IDs for a Key before creating an entity.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L102",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "empty_key = dataset.key \"Task\"\ntask_keys = dataset.allocate_ids empty_key, 5"
                  }
                ]
              },
              "params": [
                {
                  "name": "incomplete_key",
                  "types": ["Key"],
                  "description": "A Key without <code>id</code> or <code>name</code> set.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "count",
                  "types": ["String"],
                  "description": "The number of new key IDs to create.",
                  "optional": true,
                  "default": "1",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Datastore::Key>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "save",
                "description": "<p>Persist one or more entities to the Datastore.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L125",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "dataset.save task1, task2"
                  }
                ]
              },
              "params": [
                {
                  "name": "*entities",
                  "types": ["Entity"],
                  "description": "One or more entity objects to be saved without <code>id</code> or <code>name</code> set.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::Datastore::Entity>"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "find",
                "description": "<p>Retrieve an entity by providing key information.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L149",
                "resources": [],
                "examples": [
                  {
                    "caption": "Finding an entity with a key:",
                    "code": "key = dataset.key \"Task\", 123456\ntask = dataset.find key"
                  },
                  {
                    "caption": "Finding an entity with a <code>kind</code> and <code>id</code>/<code>name</code>:",
                    "code": "task = dataset.find \"Task\", 123456"
                  }
                ]
              },
              "params": [
                {
                  "name": "key_or_kind",
                  "types": [
                    "Key",
                    "String"
                  ],
                  "description": "A Key object or <code>kind</code> string value.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "id_or_name",
                  "types": [
                    "Integer",
                    "String",
                    "nil"
                  ],
                  "description": "The Key&#39;s <code>id</code> or <code>name</code> value if a <code>kind</code> was provided in the first parameter.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::Datastore::Entity",
                    "nil"
                  ],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "find_all",
                "description": "<p>Retrieve the entities for the provided keys.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L172",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "gcloud = Gcloud.new\ndataset = gcloud.datastore\nkey1 = dataset.key \"Task\", 123456\nkey2 = dataset.key \"Task\", 987654\ntasks = dataset.find_all key1, key2"
                  }
                ]
              },
              "params": [
                {
                  "name": "*keys",
                  "types": ["Key"],
                  "description": "One or more Key objects to find records for.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Dataset::LookupResults"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Remove entities from the Datastore.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L194",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "gcloud = Gcloud.new\ndataset = gcloud.datastore\ndataset.delete entity1, entity2"
                  }
                ]
              },
              "params": [
                {
                  "name": "*entities_or_keys",
                  "types": [
                    "Entity",
                    "Key"
                  ],
                  "description": "One or more Entity or Key objects to remove.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": "Returns <code>true</code> if successful"
                }
              ]
            },
            {
              "metadata": {
                "name": "run",
                "description": "<p>Retrieve entities specified by a Query.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L223",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"
                  },
                  {
                    "caption": "Run the query within a namespace with the <code>namespace</code> option:",
                    "code": "query = Gcloud::Datastore::Query.new.kind(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query, namespace: \"ns~todo-project\""
                  }
                ]
              },
              "params": [
                {
                  "name": "query",
                  "types": ["Query"],
                  "description": "The Query object with the search criteria.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "namespace",
                  "types": ["String"],
                  "description": "The namespace the query is to run within.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Dataset::QueryResults"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "transaction",
                "description": "<p>Creates a Datastore Transaction.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L274",
                "resources": [],
                "examples": [
                  {
                    "caption": "Runs the given block in a database transaction:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nuser = dataset.entity \"User\", \"heidi\" do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ndataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.save user\n  end\nend"
                  },
                  {
                    "caption": "If no block is given, a Transaction object is returned:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\ndataset = gcloud.datastore\n\nuser = dataset.entity \"User\", \"heidi\" do |u|\n  u[\"name\"] = \"Heidi Henderson\"\n  u[\"email\"] = \"heidi@example.net\"\nend\n\ntx = dataset.transaction\nbegin\n  if tx.find(user.key).nil?\n    tx.save user\n  end\n  tx.commit\nrescue\n  tx.rollback\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "query",
                "description": "<p>Create a new Query instance. This is a convenience method to make the creation of Query objects easier.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L306",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "query = dataset.query(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"
                  },
                  {
                    "caption": "The previous example is equivalent to:",
                    "code": "query = Gcloud::Datastore::Query.new.\n  kind(\"Task\").\n  where(\"completed\", \"=\", true)\ntasks = dataset.run query"
                  }
                ]
              },
              "params": [
                {
                  "name": "*kinds",
                  "types": ["String"],
                  "description": "The kind of entities to query. This is optional.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Query"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "key",
                "description": "<p>Create a new Key instance. This is a convenience method to make the creation of Key objects easier.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L328",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "key = dataset.key \"User\", \"heidi@example.com\""
                  },
                  {
                    "caption": "The previous example is equivalent to:",
                    "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\""
                  }
                ]
              },
              "params": [
                {
                  "name": "kind",
                  "types": ["String"],
                  "description": "The kind of the Key. This is optional.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "id_or_name",
                  "types": [
                    "Integer",
                    "String"
                  ],
                  "description": "The id or name of the Key. This is optional.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Key"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "entity",
                "description": "<p>Create a new empty Entity instance. This is a convenience method to make the creation of Entity objects easier.</p>  <p>end</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L372",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "entity = dataset.entity"
                  },
                  {
                    "caption": "The previous example is equivalent to:",
                    "code": "entity = Gcloud::Datastore::Entity.new"
                  },
                  {
                    "caption": "The key can also be passed in as an object:",
                    "code": "key = dataset.key \"User\", \"heidi@example.com\"\nentity = dataset.entity key"
                  },
                  {
                    "caption": "Or the key values can be passed in as parameters:",
                    "code": "entity = dataset.entity \"User\", \"heidi@example.com\""
                  },
                  {
                    "caption": "The previous example is equivalent to:",
                    "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nentity = Gcloud::Datastore::Entity.new\nentity.key = key"
                  },
                  {
                    "caption": "The newly created entity can also be configured using a block:",
                    "code": "user = dataset.entity \"User\", \"heidi@example.com\" do |u|\n  u[\"name\"] = \"Heidi Henderson\""
                  },
                  {
                    "caption": "The previous example is equivalent to:",
                    "code": "key = Gcloud::Datastore::Key.new \"User\", \"heidi@example.com\"\nentity = Gcloud::Datastore::Entity.new\nentity.key = key\nentity[\"name\"] = \"Heidi Henderson\""
                  }
                ]
              },
              "params": [
                {
                  "name": "key_or_kind",
                  "types": [
                    "Key",
                    "String",
                    "nil"
                  ],
                  "description": "A Key object or <code>kind</code> string value. This is optional.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "id_or_name",
                  "types": [
                    "Integer",
                    "String",
                    "nil"
                  ],
                  "description": "The Key&#39;s <code>id</code> or <code>name</code> value if a <code>kind</code> was provided in the first parameter.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::Datastore::Entity"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "to_gcloud_entities",
                "description": "<p>Convenince method to convert proto entities to Gcloud entities.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L391",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "to_gcloud_keys",
                "description": "<p>Convenince method to convert proto keys to Gcloud keys.</p>",
                "source": "lib/gcloud/datastore/dataset.rb#L400",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "optional_partition_id",
                "description": "",
                "source": "lib/gcloud/datastore/dataset.rb#L439",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>Represent the HTTP connection to the Datastore, as well as the Datastore API calls.</p>  <p>This class only deals with Protocol Buffer objects, and is not part of the public API.</p>",
            "source": "lib/gcloud/datastore/connection.rb#L28",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "dataset_id",
                "description": "<p>The project/dataset_id connected to.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "dataset_id=",
                "description": "<p>The project/dataset_id connected to.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>The Credentials object for signing HTTP requests.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L38",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>The Credentials object for signing HTTP requests.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L38",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Create a new Connection instance.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L47",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "conn = Gcloud::Datastore.Connection.new \"my-todo-project\",\n  Gcloud::Datastore::Credentials.new(\"/path/to/keyfile.json\")"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "allocate_ids",
                "description": "<p>Allocate IDs for incomplete keys. (This is useful for referencing an entity before it is inserted.)</p>",
                "source": "lib/gcloud/datastore/connection.rb#L55",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "lookup",
                "description": "<p>Look up entities by keys.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L66",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "run_query",
                "description": "<p>Query for entities.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L74",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "begin_transaction",
                "description": "<p>Begin a new transaction.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L86",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "commit",
                "description": "<p>Commit a transaction, optionally creating, deleting or modifying some entities.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L96",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rollback",
                "description": "<p>Roll back a transaction.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L111",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_http_headers",
                "description": "<p>The default HTTP headers to be sent on all API calls.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L121",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "default_http_headers=",
                "description": "<p>Update the default HTTP headers.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L128",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http",
                "description": "<p>The HTTP object that makes calls to Datastore. This must be a Faraday object.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L133",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http=",
                "description": "<p>Update the HTTP object.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L138",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http_host",
                "description": "<p>The Datastore API URL.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L142",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "http_host=",
                "description": "<p>Update the Datastore API URL.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L148",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/datastore/connection.rb#L153",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rpc",
                "description": "<p>Convenience method for making an API call to Datastore. Requests will be signed with the credentials object.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L162",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rpc_path",
                "description": "<p>Generates the HTTP Path value for the API call.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L176",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_proto_request_body",
                "description": "<p>Convenience method for encoding a Beefcake object to a string.</p>",
                "source": "lib/gcloud/datastore/connection.rb#L182",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "properties",
          "metadata": {
            "name": "Properties",
            "description": "<h1>Properties</h1>  <p>Hash-like data structure for Datastore properties.</p>  <p>See {Entity#properties}</p>",
            "source": "lib/gcloud/datastore/properties.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "initialize",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L25",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Properties"],
                  "description": "a new instance of Properties"
                }
              ]
            },
            {
              "metadata": {
                "name": "[]",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "[]=",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "exist?",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L47",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "fetch",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L52",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "each",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L58",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "to_h",
                "description": "",
                "source": "lib/gcloud/datastore/properties.rb#L67",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_key_type",
                "description": "<p>Ensures the key is the proper type, otherwise a PropertyError is raised.</p>",
                "source": "lib/gcloud/datastore/properties.rb#L77",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "ensure_value_type",
                "description": "<p>Ensures the value is a type that can be persisted, otherwise a PropertyError is raised.</p>",
                "source": "lib/gcloud/datastore/properties.rb#L88",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "transaction",
          "metadata": {
            "name": "Transaction",
            "description": "<h1>Transaction</h1>  <p>Special Connection instance for running transactions.</p>  <p>See {Gcloud::Datastore::Dataset.transaction}</p>",
            "source": "lib/gcloud/datastore/transaction.rb#L24",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "id",
                "description": "<p>Returns the value of attribute id</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L25",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "save",
                "description": "<p>Persist entities in a transaction.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L46",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "dataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.save task1, task2\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Remove entities in a transaction.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L62",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "dataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.delete task1, task2\n  end\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "start",
                "description": "<p>Begins a transaction. This method is run when a new Transaction is created.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L73",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "commit",
                "description": "<p>Commits a transaction.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L83",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "rollback",
                "description": "<p>Rolls a transaction back.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L95",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reset!",
                "description": "<p>Reset the transaction. {Transaction#start} must be called afterwards.</p>",
                "source": "lib/gcloud/datastore/transaction.rb#L107",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "<p>Authentication credentials to Google Cloud. The most common way to create this object is to provide the path to the JSON keyfile downloaded from Google Cloud.</p>",
            "source": "lib/gcloud/datastore/credentials.rb#L28",
            "resources": [
              {
                "href": "https://developers.google.com/accounts/docs/application-default-credentials",
                "title": null
              }
            ],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "sign_http_request",
                "description": "<p>Sign OAuth 2.0 API calls.</p>",
                "source": "lib/gcloud/datastore/credentials.rb#L37",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        }
      ]
    },
    {
      "id": "proto",
      "metadata": {
        "name": "Proto",
        "description": "<p>Proto is the namespace that contains all Protocol Buffer objects.</p>  <p>The methods in this module are for convenience in using the Protocol Buffer objects and as such can change in the future. Neither the convenience methods nor the Protocol Buffer objects are not part of the gcloud public API. These methods, and even this module&#39;s existance, may change in the future.</p>  <p>You have been warned.</p>",
        "source": "lib/gcloud/datastore/proto.rb#L35",
        "resources": [],
        "examples": []
      },
      "methods": [
        {
          "metadata": {
            "name": "from_proto_value",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L36",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "to_proto_value",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L61",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "from_proto_properties",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L91",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "to_proto_properties",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L99",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "microseconds_from_time",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L108",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "time_from_microseconds",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L112",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "to_prop_filter_op",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L135",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "to_prop_order_direction",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L140",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "encode_cursor",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L148",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "decode_cursor",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L152",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "to_more_results_string",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L158",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_filter",
            "description": "<p>Convenience methods to create protocol buffer objects</p>",
            "source": "lib/gcloud/datastore/proto.rb#L173",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_composite_filter",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L177",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_mutation",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L184",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_property_filter",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L194",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_property_expressions",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L202",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_property_expression",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L208",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_property_references",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L214",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_property_reference",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L220",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_path_element",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L226",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_partition_id",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L237",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "new_run_query_request",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L244",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        }
      ],
      "pages": [
        {
          "id": "key",
          "metadata": {
            "name": "Key",
            "description": "",
            "source": "lib/gcloud/datastore/proto.rb#L251",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "dup",
                "description": "",
                "source": "lib/gcloud/datastore/proto.rb#L252",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        }
      ]
    },
    {
      "id": "resourcemanager",
      "metadata": {
        "name": "ResourceManager",
        "description": "<h1>Google Cloud Resource Manager</h1>  <p>The Resource Manager API provides methods that you can use to programmatically manage your projects in the Google Cloud Platform. You may be familiar with managing projects in the <a href=\"https://developers.google.com/console/help/new/\">Developers Console</a>. With this API you can do the following:</p>  <ul> <li>Get a list of all projects associated with an account</li> <li>Create new projects</li> <li>Update existing projects</li> <li>Delete projects</li> <li>Undelete, or recover, projects that you don&#39;t want to delete</li> </ul>  <p>The Resource Manager API is a Beta release and is not covered by any SLA or deprecation policy and may be subject to backward-incompatible changes.</p>  <h2>Accessing the Service</h2>  <p>Currently, the full functionality of the Resource Manager API is available only to whitelisted users. (Contact your account manager or a member of the Google Cloud sales team if you are interested in access.) Read-only methods such as ResourceManager::Manager#projects and ResourceManager::Manager#project are accessible to any user who enables the Resource Manager API in the <a href=\"https://console.developers.google.com\">Developers Console</a>.</p>  <h2>Authentication</h2>  <p>The Resource Manager API currently requires authentication of a <a href=\"https://developers.google.com/identity/protocols/OAuth2\">User Account</a>, and cannot currently be accessed with a <a href=\"https://developers.google.com/identity/protocols/OAuth2ServiceAccount\">Service Account</a>. To use a User Account install the <a href=\"http://cloud.google.com/sdk\">Google Cloud SDK</a> and authenticate with the following:</p>  <p><code> $ gcloud auth login </code></p>  <p>Also make sure all <code>GCLOUD</code> environment variables are cleared of any service accounts. Then gcloud will be able to detect the user authentication and connect with those credentials.</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager ```</p>  <h2>Listing Projects</h2>  <p>Project is a collection of settings, credentials, and metadata about the application or applications you&#39;re working on. You can retrieve and inspect all projects that you have permissions to. (See Manager#projects)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager resource<em>manager.projects.each do |project|   puts projects.project</em>id end ```</p>  <h2>Managing Projects with Labels</h2>  <p>Labels can be added to or removed from projects. (See Project#labels)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager project = resource_manager.project &quot;tokyo-rain-123&quot;</p>  <h1>Label the project as production</h1>  <p>project.update do |p|   p.labels[&quot;env&quot;] = &quot;production&quot; end ```</p>  <p>Projects can then be filtered by labels. (See Manager#projects)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager</p>  <h1>Find only the productions projects</h1>  <p>projects = resource<em>manager.projects filter: &quot;labels.env:production&quot; projects.each do |project|   puts project.project</em>id end ```</p>  <h2>Creating a Project</h2>  <p>You can also use the API to create new projects. (See Manager#create_project)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager project = resource<em>manager.create</em>project &quot;tokyo-rain-123&quot;,                                           name: &quot;Todos Development&quot;,                                           labels: {env: :development} ```</p>  <h2>Deleting a Project</h2>  <p>You can delete projects when they are no longer needed. (See Manager#delete and Project#delete)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager resource_manager.delete &quot;tokyo-rain-123&quot; ```</p>  <h2>Undeleting a Project</h2>  <p>You can also restore a deleted project within the waiting period that starts when the project was deleted. Restoring a project returns it to the state it was in prior to being deleted. (See Manager#undelete and Project#undelete)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager resource_manager.undelete &quot;tokyo-rain-123&quot; ```</p>  <h2>Managing IAM Policies</h2>  <p>Google Cloud Identity and Access Management (<a href=\"https://cloud.google.com/iam/\">Cloud IAM</a>) access control policies can be managed on projects. These policies allow project owners to manage <em>who</em> (identity) has access to <em>what</em> (role). See <a href=\"https://cloud.google.com/iam/docs/overview\">Cloud IAM Overview</a> for more information.</p>  <p>A project&#39;s access control policy can be retrieved. (See Project#policy)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager project = resource_manager.project &quot;tokyo-rain-123&quot; policy = project.policy ```</p>  <p>A project&#39;s access control policy can also be set. (See Project#policy=)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager project = resource_manager.project &quot;tokyo-rain-123&quot;</p>  <p>viewer<em>policy = {   &quot;bindings&quot; =&gt; [{     &quot;role&quot; =&gt; &quot;roles/viewer&quot;,     &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]   }] } project.policy = viewer</em>policy ```</p>  <p>And permissions can be tested on a project. (See Project#test_permissions)</p>  <p>```ruby require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new resource<em>manager = gcloud.resource</em>manager project = resource<em>manager.project &quot;tokyo-rain-123&quot; perms = project.test</em>permissions &quot;resourcemanager.projects.get&quot;,                                  &quot;resourcemanager.projects.delete&quot; perms.include? &quot;resourcemanager.projects.get&quot;    #=&gt; true perms.include? &quot;resourcemanager.projects.delete&quot; #=&gt; false ```</p>  <p>For more information about using access control policies see <a href=\"https://cloud.google.com/iam/docs/managing-policies\">Managing Policies</a>.</p>",
        "source": "lib/gcloud/resource_manager.rb#L250",
        "resources": [],
        "examples": []
      },
      "methods": [],
      "pages": [
        {
          "id": "error",
          "metadata": {
            "name": "Error",
            "description": "<p>Base Resource Manager exception class.</p>",
            "source": "lib/gcloud/resource_manager/errors.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        },
        {
          "id": "apierror",
          "metadata": {
            "name": "ApiError",
            "description": "<p>Raised when an API call is not successful.</p>",
            "source": "lib/gcloud/resource_manager/errors.rb#L27",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "code",
                "description": "<p>The code of the error.</p>",
                "source": "lib/gcloud/resource_manager/errors.rb#L30",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "errors",
                "description": "<p>The errors encountered.</p>",
                "source": "lib/gcloud/resource_manager/errors.rb#L34",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "manager",
          "metadata": {
            "name": "Manager",
            "description": "<h1>Manager</h1>  <p>Provides methods for creating, retrieving, and updating projects.</p>  <p>require &quot;gcloud&quot;</p>  <p>gcloud = Gcloud.new   resource<em>manager = gcloud.resource</em>manager   resource<em>manager.projects.each do |project|     puts projects.project</em>id   end</p>  <p>See {Gcloud#resource_manager}</p>",
            "source": "lib/gcloud/resource_manager/manager.rb#L37",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "projects",
                "description": "<p>Retrieves the projects that are visible to the user and satisfy the specified filter. This method returns projects in an unspecified order. New projects do not necessarily appear at the end of the list.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L109",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nprojects = resource_manager.projects\nprojects.each do |project|\n  puts project.project_id\nend"
                  },
                  {
                    "caption": "Projects can be filtered using the <code>filter</code> option:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nprojects = resource_manager.projects filter: \"labels.env:production\"\nprojects.each do |project|\n  puts project.project_id\nend"
                  },
                  {
                    "caption": "With pagination: (See {Gcloud::ResourceManager::Project::List})",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nprojects = resource_manager.projects.all\nprojects.each do |project|\n  puts project.project_id\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "filter",
                  "types": ["String"],
                  "description": "An expression for filtering the results of the request. Filter rules are case insensitive.</p>  <p>The fields eligible for filtering are: * <code>name</code> * <code>id</code> * <code>labels.key</code> - where <code>key</code> is the name of a label</p>  <p>Some examples of using labels as filters: * <code>name:*</code> - The project has a name. * <code>name:Howl</code> - The project&#39;s name is Howl or howl. * <code>name:HOWL</code> - Equivalent to above. * <code>NAME:howl</code> - Equivalent to above. * <code>labels.color:*</code> - The project has the label color. * <code>labels.color:red</code> - The project&#39;s label color has the value red. * <code>labels.color:red labels.size:big</code> - The project&#39;s label   color has the value red and its label size has the value big.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "token",
                  "types": ["String"],
                  "description": "A previously-returned page token representing part of the larger set of results to view.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "max",
                  "types": ["Integer"],
                  "description": "Maximum number of projects to return.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<Gcloud::ResourceManager::Project>"],
                  "description": "(See {Gcloud::ResourceManager::Project::List})"
                }
              ]
            },
            {
              "metadata": {
                "name": "project",
                "description": "<p>Retrieves the project identified by the specified <code>project_id</code>.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L134",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.project_id #=> \"tokyo-rain-123\""
                  }
                ]
              },
              "params": [
                {
                  "name": "project_id",
                  "types": ["String"],
                  "description": "The ID of the project.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": [
                    "Gcloud::ResourceManager::Project",
                    "nil"
                  ],
                  "description": "Returns <code>nil</code> if the project does not exist"
                }
              ]
            },
            {
              "metadata": {
                "name": "create_project",
                "description": "<p>Creates a project resource.</p>  <p>Initially, the project resource is owned by its creator exclusively. The creator can later grant permission to others to read or update the project.</p>  <p>Several APIs are activated automatically for the project, including Google Cloud Storage.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L190",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.create_project \"tokyo-rain-123\""
                  },
                  {
                    "caption": "A project can also be created with a <code>name</code> and <code>labels</code>:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.create_project \"tokyo-rain-123\",\n                                          name: \"Todos Development\",\n                                          labels: {env: :development}"
                  }
                ]
              },
              "params": [
                {
                  "name": "project_id",
                  "types": ["String"],
                  "description": "The unique, user-assigned ID of the project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited.",
                  "optional": false,
                  "nullable": false
                },
                {
                  "name": "name",
                  "types": ["String"],
                  "description": "The user-assigned name of the project. This field is optional and can remain unset.</p>  <p>Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                },
                {
                  "name": "labels",
                  "types": ["Hash"],
                  "description": "The labels associated with this project.</p>  <p>Label keys must be between 1 and 63 characters long and must conform to the following regular expression: <code><a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?</code>.</p>  <p>Label values must be between 0 and 63 characters long and must conform to the regular expression <code>(<a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?)?</code>.</p>  <p>No more than 256 labels can be associated with a given resource.",
                  "optional": true,
                  "default": "nil",
                  "nullable": true
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Gcloud::ResourceManager::Project"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Marks the project for deletion. This method will only affect the project if the following criteria are met:</p>  <ul> <li>The project does not have a billing account associated with it.</li> <li>The project has a lifecycle state of <code>ACTIVE</code>.</li> <li>This method changes the project&#39;s lifecycle state from <code>ACTIVE</code> to <code>DELETE_REQUESTED</code>. The deletion starts at an unspecified time, at which point the lifecycle state changes to <code>DELETE_IN_PROGRESS</code>.</li> </ul>  <p>Until the deletion completes, you can check the lifecycle state by retrieving the project with Manager#project. The project remains visible to Manager#project and Manager#projects, but cannot be updated.</p>  <p>After the deletion completes, the project is not retrievable by the Manager#project and Manager#projects methods.</p>  <p>The caller must have modify permissions for this project.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L229",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.delete \"tokyo-rain-123\""
                  }
                ]
              },
              "params": [
                {
                  "name": "project_id",
                  "types": ["String"],
                  "description": "The ID of the project.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "undelete",
                "description": "<p>Restores the project. You can only use this method for a project that has a lifecycle state of <code>DELETE_REQUESTED</code>. After deletion starts, as indicated by a lifecycle state of <code>DELETE_IN_PROGRESS</code>, the project cannot be restored.</p>  <p>The caller must have modify permissions for this project.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L255",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nresource_manager.undelete \"tokyo-rain-123\""
                  }
                ]
              },
              "params": [
                {
                  "name": "project_id",
                  "types": ["String"],
                  "description": "The ID of the project.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "list_projects_options",
                "description": "<p>Create an options hash from the projects parameters.</p>",
                "source": "lib/gcloud/resource_manager/manager.rb#L268",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "project",
          "metadata": {
            "name": "Project",
            "description": "<h1>Project</h1>  <p>Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs, AppEngine Apps, VMs, and other Google Cloud Platform resources.</p>",
            "source": "lib/gcloud/resource_manager/project.rb#L41",
            "resources": [],
            "examples": [
              {
                "caption": null,
                "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.update do |p|\n  p.name = \"My Project\"\n  p.labels[\"env\"] = \"production\"\nend"
              }
            ]
          },
          "methods": [
            {
              "metadata": {
                "name": "project_id",
                "description": "<p>The unique, user-assigned ID of the project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. e.g. tokyo-rain-123</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L62",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "project_number",
                "description": "<p>The number uniquely identifying the project. e.g. 415104041262</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L69",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name",
                "description": "<p>The user-assigned name of the project.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L76",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "name=",
                "description": "<p>Updates the user-assigned name of the project. This field is optional and can remain unset.</p>  <p>Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L95",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.name = \"My Project\""
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "labels",
                "description": "<p>The labels associated with this project.</p>  <p>Label keys must be between 1 and 63 characters long and must conform to the regular expression <code><a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?</code>.</p>  <p>Label values must be between 0 and 63 characters long and must conform to the regular expression <code>(<a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?)?</code>.</p>  <p>No more than 256 labels can be associated with a given resource. (<code>Hash</code>)</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L137",
                "resources": [],
                "examples": [
                  {
                    "caption": "Labels are read-only and cannot be changed:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.labels[\"env\"] #=> \"dev\" # read only\nproject.labels[\"env\"] = \"production\" # raises error"
                  },
                  {
                    "caption": "Labels can be updated by passing a block, or with {#labels=}:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.labels do |labels|\n  labels[\"env\"] = \"production\"\nend"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "labels=",
                "description": "<p>Updates the labels associated with this project.</p>  <p>Label keys must be between 1 and 63 characters long and must conform to the regular expression <code><a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?</code>.</p>  <p>Label values must be between 0 and 63 characters long and must conform to the regular expression <code>(<a href=\"%5B-a-z0-9%5D*%5Ba-z0-9%5D\">a-z</a>?)?</code>.</p>  <p>No more than 256 labels can be associated with a given resource. (<code>Hash</code>)</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L169",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.labels = { \"env\" => \"production\" }"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "created_at",
                "description": "<p>The time that this project was created.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L183",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "state",
                "description": "<p>The project lifecycle state.</p>  <p>Possible values are: * <code>ACTIVE</code> - The normal and active state. * <code>LIFECYCLE_STATE_UNSPECIFIED</code> - Unspecified state. This is only   used/useful for distinguishing unset values. * <code>DELETE_REQUESTED</code> - The project has been marked for deletion by the   user (by invoking DeleteProject) or by the system (Google Cloud   Platform). This can generally be reversed by invoking UndeleteProject. * <code>DELETE_IN_PROGRESS</code> - The process of deleting the project has begun.   Reversing the deletion is no longer possible.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L202",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "active?",
                "description": "<p>Checks if the state is <code>ACTIVE</code>.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L208",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "unspecified?",
                "description": "<p>Checks if the state is <code>LIFECYCLE_STATE_UNSPECIFIED</code>.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L215",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete_requested?",
                "description": "<p>Checks if the state is <code>DELETE_REQUESTED</code>.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L222",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "delete_in_progress?",
                "description": "<p>Checks if the state is <code>DELETE_IN_PROGRESS</code>.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L229",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Boolean"],
                  "description": null
                }
              ]
            },
            {
              "metadata": {
                "name": "update",
                "description": "<p>Updates the project in a single API call. See {Project::Updater}</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L248",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.update do |p|\n  p.name = \"My Project\"\n  p.labels[\"env\"] = \"production\"\nend"
                  }
                ]
              },
              "params": [
                {
                  "name": "yield",
                  "types": ["block"],
                  "description": null,
                  "optional": true,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "reload!",
                "description": "<p>Reloads the project (with updated state) from the Google Cloud Resource Manager service.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L271",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.reload!"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete",
                "description": "<p>Marks the project for deletion. This method will only affect the project if the following criteria are met:</p>  <ul> <li>The project does not have a billing account associated with it.</li> <li>The project has a lifecycle state of <code>ACTIVE</code>.</li> <li>This method changes the project&#39;s lifecycle state from <code>ACTIVE</code> to <code>DELETE_REQUESTED</code>. The deletion starts at an unspecified time, at which point the lifecycle state changes to <code>DELETE_IN_PROGRESS</code>.</li> </ul>  <p>Until the deletion completes, you can check the lifecycle state by calling #reload!, or by retrieving the project with Manager#project. The project remains visible to Manager#project and Manager#projects, but cannot be updated.</p>  <p>After the deletion completes, the project is not retrievable by the Manager#project and Manager#projects methods.</p>  <p>The caller must have modify permissions for this project.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L312",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.active? #=> true\nproject.delete\nproject.active? #=> false\nproject.delete_requested? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "undelete",
                "description": "<p>Restores the project. You can only use this method for a project that has a lifecycle state of <code>DELETE_REQUESTED</code>. After deletion starts, as indicated by a lifecycle state of <code>DELETE_IN_PROGRESS</code>, the project cannot be restored.</p>  <p>The caller must have modify permissions for this project.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L341",
                "resources": [],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nproject.delete_requested? #=> true\nproject.undelete\nproject.delete_requested? #=> false\nproject.active? #=> true"
                  }
                ]
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "policy",
                "description": "<p>Gets the <a href=\"https://cloud.google.com/iam/\">Cloud IAM</a> access control policy. Returns a hash that conforms to the following structure:</p>  <p>{     &quot;bindings&quot; =&gt; [{       &quot;role&quot; =&gt; &quot;roles/viewer&quot;,       &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]     }],     &quot;version&quot; =&gt; 0,     &quot;etag&quot; =&gt; &quot;CAE=&quot;   }</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L393",
                "resources": [
                  {
                    "href": "https://cloud.google.com/iam/docs/managing-policies",
                    "title": "Managing Policies"
                  }
                ],
                "examples": [
                  {
                    "caption": "Policy values are memoized by default:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\npolicy = project.policy\n\nputs policy[\"bindings\"]\nputs policy[\"version\"]\nputs policy[\"etag\"]"
                  },
                  {
                    "caption": "Use the <code>force</code> option to retrieve the latest policy:",
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\npolicy = project.policy force: true"
                  }
                ]
              },
              "params": [
                {
                  "name": "force",
                  "types": ["Boolean"],
                  "description": "Force load the latest policy when <code>true</code>. Otherwise the policy will be memoized to reduce the number of API calls made. The default is <code>false</code>.",
                  "optional": true,
                  "default": "false",
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Hash"],
                  "description": "See description"
                }
              ]
            },
            {
              "metadata": {
                "name": "policy=",
                "description": "<p>Sets the <a href=\"https://cloud.google.com/iam/\">Cloud IAM</a> access control policy.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L437",
                "resources": [
                  {
                    "href": "https://cloud.google.com/iam/docs/managing-policies",
                    "title": "Managing Policies"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\n\nviewer_policy = {\n  \"bindings\" => [{\n    \"role\" => \"roles/viewer\",\n    \"members\" => [\"serviceAccount:your-service-account\"]\n  }]\n}\nproject.policy = viewer_policy"
                  }
                ]
              },
              "params": [
                {
                  "name": "new_policy",
                  "types": ["String"],
                  "description": "A hash that conforms to the following structure:</p>  <p>{     &quot;bindings&quot; =&gt; [{       &quot;role&quot; =&gt; &quot;roles/viewer&quot;,       &quot;members&quot; =&gt; [&quot;serviceAccount:your-service-account&quot;]     }]   }",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_permissions",
                "description": "<p>Tests the specified permissions against the <a href=\"https://cloud.google.com/iam/\">Cloud IAM</a> access control policy.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L472",
                "resources": [
                  {
                    "href": "https://cloud.google.com/iam/docs/managing-policies",
                    "title": "Managing Policies"
                  }
                ],
                "examples": [
                  {
                    "caption": null,
                    "code": "require \"gcloud\"\n\ngcloud = Gcloud.new\nresource_manager = gcloud.resource_manager\nproject = resource_manager.project \"tokyo-rain-123\"\nperms = project.test_permissions \"resourcemanager.projects.get\",\n                                 \"resourcemanager.projects.delete\"\nperms.include? \"resourcemanager.projects.get\"    #=> true\nperms.include? \"resourcemanager.projects.delete\" #=> false"
                  }
                ]
              },
              "params": [
                {
                  "name": "*permissions",
                  "types": [
                    "String",
                    "Array<String>"
                  ],
                  "description": "The set of permissions to check access for. Permissions with wildcards (such as <code>*</code> or <code>storage.*</code>) are not allowed.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Array<String>"],
                  "description": "The permissions that have access"
                }
              ]
            },
            {
              "metadata": {
                "name": "ensure_connection!",
                "description": "<p>Raise an error unless an active connection is available.</p>",
                "source": "lib/gcloud/resource_manager/project.rb#L496",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "connection",
          "metadata": {
            "name": "Connection",
            "description": "<p>Represents the connection to Resource Manager, as well as expose the API calls.</p>",
            "source": "lib/gcloud/resource_manager/connection.rb#L25",
            "resources": [],
            "examples": []
          },
          "methods": [
            {
              "metadata": {
                "name": "credentials",
                "description": "<p>Returns the value of attribute credentials</p>",
                "source": "lib/gcloud/resource_manager/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "credentials=",
                "description": "<p>Sets the attribute credentials</p>",
                "source": "lib/gcloud/resource_manager/connection.rb#L28",
                "resources": [],
                "examples": []
              },
              "params": [
                {
                  "name": "value",
                  "types": null,
                  "description": "the value to set the attribute credentials to.",
                  "optional": false,
                  "nullable": false
                }
              ],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "initialize",
                "description": "<p>Creates a new Connection instance.</p>",
                "source": "lib/gcloud/resource_manager/connection.rb#L32",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": [
                {
                  "types": ["Connection"],
                  "description": "a new instance of Connection"
                }
              ]
            },
            {
              "metadata": {
                "name": "list_project",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L40",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_project",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L52",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "create_project",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L59",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "update_project",
                "description": "<p>Updated the project, given the project Google API Client object/hash. We try not to pass the gapi objects, but there is no PATCH, so we need to pass in a complete Project object.</p>",
                "source": "lib/gcloud/resource_manager/connection.rb#L73",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "delete_project",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L83",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "undelete_project",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L90",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "get_policy",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L97",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "set_policy",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L104",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "test_permissions",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L112",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            },
            {
              "metadata": {
                "name": "inspect",
                "description": "",
                "source": "lib/gcloud/resource_manager/connection.rb#L120",
                "resources": [],
                "examples": []
              },
              "params": [],
              "exceptions": [],
              "returns": []
            }
          ]
        },
        {
          "id": "credentials",
          "metadata": {
            "name": "Credentials",
            "description": "",
            "source": "lib/gcloud/resource_manager/credentials.rb#L22",
            "resources": [],
            "examples": []
          },
          "methods": []
        }
      ]
    },
    {
      "id": "verifier",
      "metadata": {
        "name": "Verifier",
        "description": "<p>Verifies downloaded files by creating an MD5 or CRC32c hash digest and comparing the value to the one from the Storage API.</p>",
        "source": "lib/gcloud/storage/file/verifier.rb#L28",
        "resources": [],
        "examples": []
      },
      "methods": [
        {
          "metadata": {
            "name": "verify_md5!",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L29",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "verify_crc32c!",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L37",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "verify_md5",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L45",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "verify_crc32c",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L49",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "md5_for",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L53",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        },
        {
          "metadata": {
            "name": "crc32c_for",
            "description": "",
            "source": "lib/gcloud/storage/file/verifier.rb#L59",
            "resources": [],
            "examples": []
          },
          "params": [],
          "exceptions": [],
          "returns": []
        }
      ],
      "pages": []
    }
  ]
}